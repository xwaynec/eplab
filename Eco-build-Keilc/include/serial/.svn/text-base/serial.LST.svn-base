C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE SERIAL
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe .\..\..\include\serial\serial.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPR
                    -INT INCDIR(../../Include) SRC(./serial.src)

line level    source

   1          /*
   2           * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3           * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4           * Permission to copy, modify, and distribute this program is granted 
   5           * for noncommercial purposes, provided the author(s) and copyright
   6           * notice are retained. All other uses require explicit written
   7           * permission from NTHU. 
   8           *
   9           * serial port driver
  10           *
  11           * Min-Hua Chen <orca.chen@gmail.com>
  12           * 2007/8/2
  13           */
  14          
  15          #include "Eco/reg24e1.h"
   1      =1  #ifndef REGnRF24E1_H
   2      =1  #define REGnRF24E1_H
   3      =1  
   4      =1  /*  BYTE Registers  */
   5      =1  sfr P0                  = 0x80 ;
   6      =1  sfr SP                  = 0x81 ;
   7      =1  sfr DPL                 = 0x82 ;
   8      =1  sfr DPL0                = 0x82 ;
   9      =1  sfr DPH                 = 0x83 ;
  10      =1  sfr DPH0                = 0x83 ;
  11      =1  sfr DPL1                = 0x84 ;
  12      =1  sfr DPH1                = 0x85 ;
  13      =1  sfr DPS                 = 0x86 ;
  14      =1  sfr PCON                = 0x87 ;
  15      =1  sfr TCON                = 0x88 ;
  16      =1  sfr TMOD                = 0x89 ;
  17      =1  sfr TL0                 = 0x8A ;
  18      =1  sfr TL1                 = 0x8B ;
  19      =1  sfr TH0                 = 0x8C ;
  20      =1  sfr TH1                 = 0x8D ;
  21      =1  sfr CKCON               = 0x8E ;
  22      =1  sfr SPC_FNC             = 0x8F ;
  23      =1  sfr P1          = 0x90 ;
  24      =1  sfr EXIF                = 0x91 ;
  25      =1  sfr MPAGE               = 0x92 ;
  26      =1  sfr P0_DIR              = 0x94 ;
  27      =1  sfr P0_ALT              = 0x95 ;
  28      =1  sfr P1_DIR              = 0x96 ;
  29      =1  sfr P1_ALT              = 0x97 ;
  30      =1  sfr SCON                = 0x98 ;
  31      =1  sfr SBUF                = 0x99 ;
  32      =1  sfr RADIO               = 0xA0 ;
  33      =1  sfr ADCCON              = 0xA1 ;
  34      =1  sfr ADCDATAH    = 0xA2 ;
  35      =1  sfr ADCDATAL    = 0xA3 ;
  36      =1  sfr ADCSTATIC   = 0xA4 ;
  37      =1  sfr IE                  = 0xA8 ;
  38      =1  sfr PWMCON              = 0xA9 ;
  39      =1  sfr PWMDUTY             = 0xAA ;
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 2   

  40      =1  sfr REGX_MSB    = 0xAB ;
  41      =1  sfr REGX_LSB    = 0xAC ;
  42      =1  sfr REGX_CTRL   = 0xAD ;
  43      =1  sfr RSTREAS             = 0xB1 ;
  44      =1  sfr SPI_DATA    = 0xB2 ;
  45      =1  sfr SPI_CTRL    = 0xB3 ;
  46      =1  sfr SPICLK              = 0xB4 ;
  47      =1  sfr TICK_DV             = 0xB5 ;
  48      =1  sfr CK_CTRL             = 0xB6 ;
  49      =1  sfr TEST_MODE   = 0xB7 ;
  50      =1  sfr IP                  = 0xB8 ;
  51      =1  sfr T1_1V2              = 0xBC ;
  52      =1  sfr T2_1V2              = 0xBD ;
  53      =1  sfr DEV_OFFSET  = 0xBE ;
  54      =1  sfr T2CON               = 0xC8 ;
  55      =1  sfr RCAP2L              = 0xCA ;
  56      =1  sfr RCAP2H              = 0xCB ;
  57      =1  sfr TL2                 = 0xCC ;
  58      =1  sfr TH2                 = 0xCD ;
  59      =1  sfr PSW                 = 0xD0 ;
  60      =1  sfr EICON               = 0xD8 ;
  61      =1  sfr ACC                 = 0xE0 ;
  62      =1  sfr EIE                 = 0xE8 ;
  63      =1  sfr B                   = 0xF0 ;
  64      =1  sfr EIP                 = 0xF8 ;
  65      =1  
  66      =1  
  67      =1  /*  BIT Registers  */
  68      =1  /* P0 */
  69      =1  sbit P0_0       = 0x80  ;
  70      =1  sbit DIO2       = 0x80  ;
  71      =1  sbit P0_1       = 0x81  ;
  72      =1  sbit RXD        = 0x81  ;
  73      =1  sbit DIO3       = 0x81  ;
  74      =1  sbit P0_2       = 0x82  ;
  75      =1  sbit TXD        = 0x82  ;
  76      =1  sbit DIO4       = 0x82  ;
  77      =1  sbit P0_3       = 0x83  ;
  78      =1  sbit INT0_N     = 0x83  ;
  79      =1  sbit DIO5       = 0x83  ;
  80      =1  sbit P0_4       = 0x84  ;
  81      =1  sbit INT1_N     = 0x84  ;
  82      =1  sbit DIO6       = 0x84  ;
  83      =1  sbit P0_5       = 0x85  ;
  84      =1  sbit T0         = 0x85  ;
  85      =1  sbit DIO7       = 0x85  ;
  86      =1  sbit P0_6       = 0x86  ;
  87      =1  sbit T1         = 0x86  ;
  88      =1  sbit DIO8       = 0x86  ;
  89      =1  sbit P0_7       = 0x87  ;
  90      =1  sbit PWM        = 0x87  ;
  91      =1  sbit DIO9       = 0x87  ;
  92      =1  
  93      =1  /*  TCON  */
  94      =1  sbit IT0        = 0x88 ;
  95      =1  sbit IE0        = 0x89 ;
  96      =1  sbit IT1        = 0x8A ;
  97      =1  sbit IE1        = 0x8B ;
  98      =1  sbit TR0        = 0x8C ;
  99      =1  sbit TF0        = 0x8D ;
 100      =1  sbit TR1        = 0x8E ;
 101      =1  sbit TF1        = 0x8F ;
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 3   

 102      =1  
 103      =1  /* P1 */
 104      =1  sbit P1_0       = 0x90 ;
 105      =1  sbit T2         = 0x90 ;
 106      =1  sbit DIO0       = 0x90 ;
 107      =1  sbit P1_1       = 0x91 ;
 108      =1  sbit DIO1       = 0x91 ;
 109      =1  sbit P1_2       = 0x92 ;
 110      =1  sbit DIN0       = 0x92 ;
 111      =1  
 112      =1  /*  SCON  */
 113      =1  sbit RI         = 0x98 ;
 114      =1  sbit TI         = 0x99 ;
 115      =1  sbit RB8        = 0x9A ;
 116      =1  sbit TB8        = 0x9B ;
 117      =1  sbit REN        = 0x9C ;
 118      =1  sbit SM2        = 0x9D ;
 119      =1  sbit SM1        = 0x9E ;
 120      =1  sbit SM0        = 0x9F ;
 121      =1  
 122      =1  /* P2 */
 123      =1  sbit DATA       = 0xA0 ;
 124      =1  sbit CLK1       = 0xA1 ;
 125      =1  sbit DR1        = 0xA2 ;
 126      =1  sbit CS         = 0xA3 ;
 127      =1  sbit DOUT2      = 0xA4 ;
 128      =1  sbit CLK2       = 0xA5 ;
 129      =1  sbit DR2_CE     = 0xA6 ;
 130      =1  sbit DR2        = 0xA6 ;
 131      =1  sbit CE         = 0xA6 ;
 132      =1  sbit PWR_UP     = 0xA7 ;
 133      =1  
 134      =1  /*  IE   */
 135      =1  sbit EX0        = 0xA8 ;
 136      =1  sbit ET0        = 0xA9 ;
 137      =1  sbit EX1        = 0xAA ;
 138      =1  sbit ET1        = 0xAB ;
 139      =1  sbit ES         = 0xAC ;
 140      =1  sbit ET2        = 0xAD ;
 141      =1  sbit EA         = 0xAF ;
 142      =1  
 143      =1  /*  IP   */
 144      =1  sbit PX0        = 0xB8 ;
 145      =1  sbit PT0        = 0xB9 ;
 146      =1  sbit PX1        = 0xBA ;
 147      =1  sbit PT1        = 0xBB ;
 148      =1  sbit PS         = 0xBC ;
 149      =1  sbit PT2        = 0xBD ;
 150      =1  
 151      =1  /*  T2CON  */
 152      =1  sbit CP_RL2     = 0xC8 ;
 153      =1  sbit CPRL2      = 0xC8 ;
 154      =1  sbit C_T2       = 0xC9 ;
 155      =1  sbit CT2        = 0xC9 ;
 156      =1  sbit TR2        = 0xCA ;
 157      =1  sbit EXEN2      = 0xCB ;
 158      =1  sbit TCLK       = 0xCC ;
 159      =1  sbit RCLK       = 0xCD ;
 160      =1  sbit EXF2       = 0xCE ;
 161      =1  sbit TF2        = 0xCF ;
 162      =1  
 163      =1  /*  PSW   */
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 4   

 164      =1  sbit P          = 0xD0 ;
 165      =1  sbit F1         = 0xD1 ;
 166      =1  sbit OV         = 0xD2 ;
 167      =1  sbit RS0        = 0xD3 ;
 168      =1  sbit RS1        = 0xD4 ;
 169      =1  sbit F0         = 0xD5 ;
 170      =1  sbit AC         = 0xD6 ;
 171      =1  sbit CY         = 0xD7 ;
 172      =1  
 173      =1  /*  EICON  */
 174      =1  sbit WDTI       = 0xDB ;
 175      =1  
 176      =1  /*  EIE  */
 177      =1  sbit EX2        = 0xE8 ;
 178      =1  sbit EX3        = 0xE9 ;
 179      =1  sbit EX4        = 0xEA ;
 180      =1  sbit EX5        = 0xEB ;
 181      =1  sbit EWDI       = 0xEC ;
 182      =1  
 183      =1  /*  EIP  */
 184      =1  sbit PX2        = 0xF8 ;
 185      =1  sbit PX3        = 0xF9 ;
 186      =1  sbit PX4        = 0xFA ;
 187      =1  sbit PX5        = 0xFB ;
 188      =1  sbit PWDI       = 0xFC ;
 189      =1  
 190      =1  
 191      =1  /* BIT definitions for bits that are not directly accessible */
 192      =1  /* PCON bits */
 193      =1  #define IDL             0x01
 194      =1  #define PD              0x02
 195      =1  #define GF0             0x04
 196      =1  #define GF1             0x08
 197      =1  #define SMOD            0x80
 198      =1  
 199      =1  /* TMOD bits */
 200      =1  #define T0_M0           0x01
 201      =1  #define T0_M1           0x02
 202      =1  #define T0_CT           0x04
 203      =1  #define T0_GATE         0x08
 204      =1  #define T1_M0           0x10
 205      =1  #define T1_M1           0x20
 206      =1  #define T1_CT           0x40
 207      =1  #define T1_GATE         0x80
 208      =1  
 209      =1  #define T0_MASK         0x0F
 210      =1  #define T1_MASK         0xF0
 211      =1  
 212      =1  /* Interrupt numbers: address = (number * 8) + 3 */
 213      =1  #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
 214      =1  #define TF0_VECTOR      1       /* 0x0b timer 0 */
 215      =1  #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
 216      =1  #define TF1_VECTOR      3       /* 0x1b timer 1 */
 217      =1  #define SI0_VECTOR      4       /* 0x23 serial port 0 */
 218      =1  
 219      =1  #endif
  16          #include "serial.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 5   

   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _SERIAL_H_
  10      =1  #define _SERIAL_H_
  11      =1  
  12      =1  /* for SCON register */
  13      =1  #define SERIAL_MODE0    0x00    /* sync mode */
  14      =1  #define SERIAL_MODE1    (1 << 6)        /* async, full duplex mode */
  15      =1  #define SERIAL_MODE2    (2 << 6)        /* async, full duplex mode */ 
  16      =1  #define SERIAL_MODE3    (3 << 6)        /* async, full duplex mode */ 
  17      =1  
  18      =1  #define SERIAL_CLK_D4           (1 << 5)
  19      =1  
  20      =1  #define SERIAL_IO_PORT  (3 << 1)
  21      =1  #define RECV_ENABLE     (1 << 4)
  22      =1  #define TRAN_DONE       (1 << 1)
  23      =1  #define RECV_DONE       1
  24      =1  
  25      =1  /* for PCON register */
  26      =1  #define BAUD_DOUBLE     (1 << 7)
  27      =1  
  28      =1  void serial_init(unsigned int baud);
  29      =1  void putc(char c);
  30      =1  void puts(char *s);
  31      =1  char getc();
  32      =1  void int_print(unsigned int val) reentrant;
  33      =1  
  34      =1  #endif
  17          #include "timer/timer.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _TIMER_H_
  10      =1  #define _TIMER_H_
  11      =1  
  12      =1  /* for TMOD register */
  13      =1  #define TIMER1_AS_CNTR  (1 << 6)
  14      =1  
  15      =1  #define TIMER0_AS_CNTR  (1 << 2)
  16      =1  
  17      =1  
  18      =1  #define TIMER1_MODE0    (0 << 4)        /* 13-bit counter */
  19      =1  #define TIMER1_MODE1    (1 << 4)        /* 16-bit counter */
  20      =1  #define TIMER1_MODE2    (2 << 4)        /* 8-bit counter, auto-reload */
  21      =1  #define TIMER1_MODE3    (3 << 4)        /* two 8-bit counters */
  22      =1  
  23      =1  #define TIMER0_MODE0    0x00    /* 13-bit counter */
  24      =1  #define TIMER0_MODE1    0x01    /* 16-bit counter */
  25      =1  #define TIMER0_MODE2    0x10    /* 8-bit counter, auto-reload */
  26      =1  #define TIMER0_MODE3    0x11    /* two 8-bit counters */
  27      =1  
  28      =1  /* for TCON register */
  29      =1  #define TIMER1_ENABLE   (1 << 6)
  30      =1  #define TIMER0_ENABLE   (1 << 4)
  31      =1  
  32      =1  /* for T2CON register */
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 6   

  33      =1  #define TIMER2_ENABLE   (1 << 2)
  34      =1  #define TIMER2_AUTO     ~0x01   /* auto-reload */
  35      =1  
  36      =1  /* for CKCON register */
  37      =1  #define TIMER2_CLK_D4   (1 << 5)        /* 1/4 of CPU clock rate */
  38      =1  #define TIMER1_CLK_D4   (1 << 4)
  39      =1  #define TIMER0_CLK_D4   (1 << 3)
  40      =1  
  41      =1  #endif 
  18          
  19          /* setup_baudrate - note that the CPU is 16M Hz
  20           * @baud: baudrate
  21           */
  22          static int setup_baudrate(unsigned int baud)
  23          {
  24   1              T2CON &= TIMER2_AUTO;   /* set auto-reload */
  25   1              TCLK = 1;       /* set transmit clock */
  26   1              RCLK = 1;       /* set receive clock */
  27   1              C_T2 = 0;       /* select timer function */
  28   1              T2CON |= TIMER2_ENABLE; /* enable timer2 */
  29   1      
  30   1              P0 &= ~0x06;    /* clean [1:2] bits */
  31   1              P0_ALT |= SERIAL_IO_PORT;       /* select serial I/O port */
  32   1      
  33   1              switch (baud) {
  34   2              case 57600:
  35   2                      RCAP2H = 0xFF;
  36   2                      RCAP2L = 0xF7;
  37   2                      break;
  38   2              case 19200:
  39   2                      RCAP2H = 0xFF;
  40   2                      RCAP2L = 0xE6;
  41   2                      break;
  42   2              default:
  43   2                      /* baudrate not supported */
  44   2                      return 0;
  45   2              }
  46   1              return 1;
  47   1      }
  48          
  49          /* serial_init - setup baudrate 
  50           * NOTE: using timer 2 as baud generator @ CPU 16M Hz only 
  51           * @baud: baud rate
  52           */
  53          void serial_init(unsigned int baud)
  54          {
  55   1              /* SCON initial value: 0x00 */
  56   1              /* add more supported modes here */
  57   1      
  58   1              setup_baudrate(baud);
  59   1              SCON |= SERIAL_MODE1;   /* enable serial port mode 1 */
  60   1              SCON |= RECV_ENABLE;    /* enable receive */
  61   1      }
  62          
  63          /* serial_write - transmit one byte by serial port
  64           * @byte: writing byte
  65           */
  66          static void serial_write(char byte)
  67          {
  68   1              SBUF = byte;    /* write to serial buffer */
  69   1              while (!TI)     /* wait until done */
  70   1                      ;
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 7   

  71   1              TI = 0; /* clean transmit done bit */
  72   1      }
  73          
  74          /* serial_read - read one byte from serial port
  75           * @ret: read byte
  76           */
  77          static char serial_read()
  78          {
  79   1              while (!RI)     /* wait until done */
  80   1                      ;
  81   1              RI = 0; /* clean receive bit */
  82   1              return SBUF;
  83   1      }
  84          
  85          /* wrappers for serial read/write interface */
  86          void putc(char c)
  87          {
  88   1              serial_write(c);
  89   1      }
  90          
  91          void puts(char *s)
  92          {
  93   1              while (*s)
  94   1                      serial_write(*s++);
  95   1      }
  96          
  97          char getc()
  98          {
  99   1              return serial_read();
 100   1      }
 101          
 102          /* int_print - convert an unsigned int to a string then print it
 103           * max int is 65535
 104           * @val: int for printing
 105           */
 106          void int_print(unsigned int val) reentrant
 107          {
 108   1              if (val / 10)
 109   1                      int_print(val / 10);
 110   1              putc((val % 10) + '0');
 111   1      }
 112          
C51 COMPILER V8.16   SERIAL                                                                02/25/2009 18:18:51 PAGE 8   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
serial_read. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
_serial_write. . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  byte?242 . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
_serial_init . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  baud?141 . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
RCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
getc . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
_putc. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  c?443. . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
P0_ALT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
_puts. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  s?544. . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
_?int_print. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0000H  2
_setup_baudrate. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  baud?040 . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    189    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

; ./eco_page.src generated from: .\eco_page.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe .\eco_page.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(../../Include) SRC(./eco_page.src)

$NOMOD51

NAME	ECO_PAGE

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?eco_page_init?ECO_PAGE               SEGMENT CODE 
?PR?eco_page_manager?ECO_PAGE            SEGMENT CODE 
?DT?eco_page_manager?ECO_PAGE            SEGMENT DATA OVERLAYABLE 
?DT?ECO_PAGE         SEGMENT DATA 
?ID?ECO_PAGE         SEGMENT IDATA 
	EXTRN	CODE (_eeprom_read)
	EXTRN	CODE (eeprom_init)
	PUBLIC	ECO_PAGE_TABLE_INDEX
	PUBLIC	ECO_PAGE_REGISTER7
	PUBLIC	ECO_PAGE_REGISTER6
	PUBLIC	ECO_PAGE_REGISTER5
	PUBLIC	ECO_PAGE_REGISTER4
	PUBLIC	ECO_PAGE_ADDR
	PUBLIC	ECO_PAGE_REGISTER3
	PUBLIC	ECO_PAGE_REGISTER2
	PUBLIC	ECO_PAGE_REGISTER1
	PUBLIC	ECO_PAGE_PREV_VID
	PUBLIC	ECO_PAGE_PREV_PID
	PUBLIC	ECO_PAGE_SPI_CONN
	PUBLIC	ECO_PAGE_TABLE
	PUBLIC	eco_page_manager
	PUBLIC	eco_page_init

	RSEG  ?DT?eco_page_manager?ECO_PAGE
?eco_page_manager?BYTE:
	ORG  4
        seg?140:   DS   2
	ORG  0
          i?141:   DS   2
	ORG  2
 page_index?142:   DS   2

	RSEG  ?DT?ECO_PAGE
 ECO_PAGE_TABLE:   DS   4
ECO_PAGE_SPI_CONN:   DS   1
ECO_PAGE_PREV_PID:   DS   1
ECO_PAGE_PREV_VID:   DS   1
  ECO_PAGE_ADDR:   DS   2
ECO_PAGE_TABLE_INDEX:   DS   1

	RSEG  ?ID?ECO_PAGE
ECO_PAGE_REGISTER1:   DS   1
ECO_PAGE_REGISTER2:   DS   1
ECO_PAGE_REGISTER3:   DS   1
ECO_PAGE_REGISTER4:   DS   1
ECO_PAGE_REGISTER5:   DS   1
ECO_PAGE_REGISTER6:   DS   1
ECO_PAGE_REGISTER7:   DS   1
; /*
;  * Author(s): Wei-Han Chen (Embedded Platform Lab, NTHU)
;  * Copyright (c) 2009 National Tsing Hua University (NTHU) 
;  * Permission to copy, modify, and distribute this program is granted 
;  * for noncommercial purposes, provided the author(s) and copyright
;  * notice are retained. All other uses require explicit written
;  * permission from NTHU. 
;  *
;  * Eco Paging Library 
;  *
;  * Wei-Han Chen <xwaynec@gmail.com> 
;  * 2009/2/13
;  */
; 
; #include "eco_page.h"
; #include "eeprom/eeprom.h"
; 
; //control page replacement policy is LRU or Round-Robin
; #define PAGE_REPLACEMENT 1
; 
; //#define ECO_PAGE_SIZE 256
; //#define ECO_PAGE_ADDR_OFFSET 11 
; 
; 
; //#define ECO_PAGE_SIZE 128
; //#define ECO_PAGE_ADDR_OFFSET 23
; 
; 
; 
; //#define ECO_PAGE_SIZE 64
; //#define ECO_PAGE_ADDR_OFFSET 47
; 
; 
; #define ECO_PAGE_SIZE 256
; #define ECO_PAGE_ADDR_OFFSET 14
; 
; 
; #if ECO_PAGE_SIZE == 64
; 	
; 	#define ECO_PAGE_ENTRY	(64-ECO_PAGE_ADDR_OFFSET)
; 	#define ECO_PAGE_SHIFT	6
; 	#define ECO_PAGE_MASK	0x003F
; 	#define ECO_PAGE_MOV_MASK	0xFFC0
; 
; 	unsigned int idata ECO_PAGE_TABLE[ECO_PAGE_ENTRY];
; 	//Eco page virtual address id
; 	unsigned int ECO_PAGE_PREV_VID;
; 	//Eco page physical address id 
; 	unsigned int ECO_PAGE_PREV_PID;
; 
; #elif ECO_PAGE_SIZE == 128
; 	
; 	#define ECO_PAGE_ENTRY (32-ECO_PAGE_ADDR_OFFSET)
; 	#define ECO_PAGE_SHIFT	7
; 	#define ECO_PAGE_MASK	0x007F
; 	#define ECO_PAGE_MOV_MASK	0xFF80
; 
; 	unsigned int idata ECO_PAGE_TABLE[ECO_PAGE_ENTRY];
; 	//Eco page virtual address id
; 	unsigned int ECO_PAGE_PREV_VID;
; 	//Eco page physical address id 
; 	unsigned int ECO_PAGE_PREV_PID;
; 
; #elif ECO_PAGE_SIZE == 256
; 	
; 	#define ECO_PAGE_ENTRY 	(16-ECO_PAGE_ADDR_OFFSET)
; 	#define ECO_PAGE_SHIFT	8	
; 	#define ECO_PAGE_MASK	0x00FF
; 	#define ECO_PAGE_MOV_MASK	0xFF00
; 
; 	unsigned int ECO_PAGE_TABLE[ECO_PAGE_ENTRY];
; 	//Eco page virtual address id
; 	unsigned char ECO_PAGE_PREV_VID;
; 	//Eco page physical address id 
; 	unsigned char ECO_PAGE_PREV_PID;
; 
; #endif
; 
; unsigned char ECO_PAGE_TABLE_INDEX;
; unsigned int ECO_PAGE_ADDR;
; unsigned char ECO_PAGE_SPI_CONN;
; 
; unsigned char idata ECO_PAGE_REGISTER1;
; unsigned char idata ECO_PAGE_REGISTER2;
; unsigned char idata ECO_PAGE_REGISTER3;
; unsigned char idata ECO_PAGE_REGISTER4;
; unsigned char idata ECO_PAGE_REGISTER5;
; unsigned char idata ECO_PAGE_REGISTER6;
; unsigned char idata ECO_PAGE_REGISTER7;
; 
; 
; void eco_page_init()

	RSEG  ?PR?eco_page_init?ECO_PAGE
eco_page_init:
			; SOURCE LINE # 92
; {
			; SOURCE LINE # 93
; 	//ECO_PAGE_TABLE_INDEX = ECO_PAGE_ENTRY - 1;
; 	ECO_PAGE_TABLE_INDEX = 0;	
			; SOURCE LINE # 95
	CLR  	A
	MOV  	ECO_PAGE_TABLE_INDEX,A
; 	ECO_PAGE_ADDR = 0;
			; SOURCE LINE # 96
	MOV  	ECO_PAGE_ADDR,A
	MOV  	ECO_PAGE_ADDR+01H,A
; 	ECO_PAGE_PREV_VID = 0;
			; SOURCE LINE # 97
	MOV  	ECO_PAGE_PREV_VID,A
; 	ECO_PAGE_PREV_PID = 0;
			; SOURCE LINE # 98
	MOV  	ECO_PAGE_PREV_PID,A
; }
			; SOURCE LINE # 99
	RET  	
; END OF eco_page_init

; 
; 
; #if PAGE_REPLACEMENT == 0 
; //LRU page replacement
; void eco_page_manager()
; {
; 	unsigned int i;
; 	unsigned int page_index = -1;
; 
; 	//if page id is the same with the last page id
; 	if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == ECO_PAGE_PREV_PID)
; 	{
; 		//virtual address id + function offset
; 		ECO_PAGE_ADDR = (ECO_PAGE_PREV_VID << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
; 		#pragma asm
; 		//eco_page_function_call
; 		#pragma endasm
; 		return ;
; 	}
; 
; 	//Check Table   
; 	for(i=0;i<ECO_PAGE_ENTRY;i++)
; 	{   
; 		if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == (ECO_PAGE_TABLE[i] & 0x7FFF))
; 		{
; 			page_index = i;
; 
; 			//set LRU bit is 1
; 			ECO_PAGE_TABLE[i] = ECO_PAGE_TABLE[i] | 0x8000;
; 			break;
; 		}
; 	}
; 
; 	if(page_index != -1)
; 	{
; 		//store function physical addres id 
; 		ECO_PAGE_PREV_PID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
; 	
; 		//memory page is in ram
; 		ECO_PAGE_ADDR = ((page_index + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
; 
; 		//cache the virtual address id
; 		ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
; 
; 
; 		
; 		#pragma asm
; 		//eco_page_function_call
; 		//MOV     DPH,ECO_PAGE_ADDR
; 		//MOV     DPL,ECO_PAGE_ADDR+01H
; 		//LCALL	?C?ICALL2
; 		#pragma endasm
; 	}	
; 	else
; 	{
; 		//page fault
; 		for(i=(ECO_PAGE_TABLE_INDEX+1)%ECO_PAGE_ENTRY; ;i=(i+1)%ECO_PAGE_ENTRY)
; 		{
; 			if((ECO_PAGE_TABLE[i] & 0x8000) == 0x8000)
; 			{
; 				//LRU bit is 1 and then set this bit is 0
; 				ECO_PAGE_TABLE[i] = ECO_PAGE_TABLE[i] & 0x7FFF;
; 			}
; 			else
; 			{
; 				unsigned char xdata *seg = (unsigned char xdata *)((i + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT);
; 				unsigned int j;
; 				
; 				//memory page is in ram
; 				eeprom_init();
; 
; 				//mov code from eeprom to external ram
; 				for(j=0;j<ECO_PAGE_SIZE;j++)
; 				{
; 					*(seg+j) = eeprom_read(ECO_ADDR_SHIFT(ECO_PAGE_ADDR & ECO_PAGE_MOV_MASK ) +j);
; 				}
; 				
; 				//update page table to connect this physical address id with virtual address id 
; 				ECO_PAGE_TABLE[i] = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
; 
; 				//store physical address id
; 				ECO_PAGE_PREV_PID = ECO_PAGE_TABLE[i];
; 
; 				//update page address e.g.  (page_id<<8) + page_offset
; 				ECO_PAGE_ADDR = ((i + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
; 
; 				//store virtual address id 
; 				ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;	
; 
; 				//mov to the next index
; 				ECO_PAGE_TABLE_INDEX = i;
; 
; 				//jump  to function address
; 				#pragma asm
; 				//eco_page_function_call
; 				//MOV     DPH,ECO_PAGE_ADDR
; 				//MOV     DPL,ECO_PAGE_ADDR+01H
; 				//LCALL        ?C?ICALL2               
; 				#pragma endasm
; 				
; 				return ;
; 				
; 			}
; 		}
; 			
; 	}
; 				
; }
; 
; #else
; 
; void eco_page_manager()

	RSEG  ?PR?eco_page_manager?ECO_PAGE
eco_page_manager:
	USING	0
			; SOURCE LINE # 211
; {
			; SOURCE LINE # 212
; 	unsigned int i;
; 	unsigned int page_index = -1; 
			; SOURCE LINE # 214
	MOV  	A,#0FFH
	MOV  	page_index?142,A
	MOV  	page_index?142+01H,A
; 
; 	//Check POP instruction 
; 	//for(i=0;i<10;i++)
; 	//{    
; 	//	blink_led();
; 	//	mdelay(200);
; 	//}    
; 	//mdelay(1000);
; 	
; 	//if page id is the same with the last page id
; 	if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == ECO_PAGE_PREV_PID)
			; SOURCE LINE # 225
	MOV  	A,ECO_PAGE_ADDR
	XRL  	A,ECO_PAGE_PREV_PID
	JNZ  	?C0013
	CLR  	A
?C0013:
	JNZ  	?C0002
; 	{
			; SOURCE LINE # 226
; 		//virtual address id + function offset
; 		ECO_PAGE_ADDR = (ECO_PAGE_PREV_VID << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
			; SOURCE LINE # 228
	MOV  	A,ECO_PAGE_PREV_VID
	MOV  	R6,A
	MOV  	R4,#00H
	CLR  	A
	ADD  	A,ECO_PAGE_ADDR+01H
	MOV  	ECO_PAGE_ADDR+01H,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	ECO_PAGE_ADDR,A
; 		#pragma asm
; 
	  
; 		MOV R0,#LOW (ECO_PAGE_REGISTER1)
	  MOV R0,#LOW (ECO_PAGE_REGISTER1)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER2)
	  MOV R0,#LOW (ECO_PAGE_REGISTER2)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER3)
	  MOV R0,#LOW (ECO_PAGE_REGISTER3)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER4)
	  MOV R0,#LOW (ECO_PAGE_REGISTER4)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER5)
	  MOV R0,#LOW (ECO_PAGE_REGISTER5)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER6)
	  MOV R0,#LOW (ECO_PAGE_REGISTER6)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER7)
	  MOV R0,#LOW (ECO_PAGE_REGISTER7)
;      	MOV A,@R0
	  MOV A,@R0
; 	
	  
; 		MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
	  MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
; 		MOV	DPH,ECO_PAGE_ADDR
	  MOV	DPH,ECO_PAGE_ADDR
; 		MOV	DPL,ECO_PAGE_ADDR+01H
	  MOV	DPL,ECO_PAGE_ADDR+01H
; 		
	  
; 		CLR	A
	  CLR	A
; 		JMP	@A+DPTR
	  JMP	@A+DPTR
; 
	  
; 
	  
; 		//eco_page_function_call
	  
; 		//MOV     DPH,ECO_PAGE_ADDR
	  
; 		//MOV     DPL,ECO_PAGE_ADDR+01H
	  
; 		//CLR	A
	  
; 		//LJMP	@A+DPTR
	  
; 		#pragma endasm
; 	}	
			; SOURCE LINE # 260
?C0002:
; 				
; 	//Check Table   
; 	for(i=0;i<ECO_PAGE_ENTRY;i++)
			; SOURCE LINE # 263
	CLR  	A
	MOV  	i?141,A
	MOV  	i?141+01H,A
?C0003:
; 	{   
			; SOURCE LINE # 264
; 		if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == ECO_PAGE_TABLE[i])
			; SOURCE LINE # 265
	MOV  	A,i?141+01H
	ADD  	A,ACC
	ADD  	A,#LOW (ECO_PAGE_TABLE)
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	MOV  	A,ECO_PAGE_ADDR
	CJNE 	A,AR5,?C0005
	CLR  	A
	CJNE 	A,AR4,?C0005
; 		{
			; SOURCE LINE # 266
; 			page_index = i;
			; SOURCE LINE # 267
	MOV  	page_index?142,i?141
	MOV  	page_index?142+01H,i?141+01H
; 			break;
			; SOURCE LINE # 268
	SJMP 	?C0004
; 		}
			; SOURCE LINE # 269
; 	}
			; SOURCE LINE # 270
?C0005:
	INC  	i?141+01H
	MOV  	A,i?141+01H
	JNZ  	?C0015
	INC  	i?141
?C0015:
	XRL  	A,#02H
	ORL  	A,i?141
	JNZ  	?C0003
?C0004:
; 
; 	if(page_index != -1) 
			; SOURCE LINE # 272
	MOV  	A,page_index?142+01H
	CPL  	A
	JNZ  	?C0016
	MOV  	A,page_index?142
	CPL  	A
?C0016:
	JZ   	?C0007
; 	{  
			; SOURCE LINE # 273
; 		//store function physical addres id 
; 		ECO_PAGE_PREV_PID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
			; SOURCE LINE # 275
	MOV  	A,ECO_PAGE_ADDR
	MOV  	ECO_PAGE_PREV_PID,A
; 	
; 		//memory page is in ram
; 		ECO_PAGE_ADDR = ((page_index + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
			; SOURCE LINE # 278
	MOV  	A,page_index?142+01H
	ADD  	A,#0EH
	MOV  	R7,A
	MOV  	A,R7
	MOV  	R6,A
	MOV  	R4,#00H
	CLR  	A
	ADD  	A,ECO_PAGE_ADDR+01H
	MOV  	ECO_PAGE_ADDR+01H,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	ECO_PAGE_ADDR,A
; 
; 		//cache the virtual address id
; 		ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
			; SOURCE LINE # 281
	MOV  	ECO_PAGE_PREV_VID,A
; 
; 		#pragma asm
; 		//eco_page_function_call
	  
; 		//MOV     DPH,ECO_PAGE_ADDR
	  
; 		//LJMP	@A + DPTR
	  
; 		//MOV     DPL,ECO_PAGE_ADDR+01H
	  
; 		//LCALL	?C?ICALL2
	  
; 		MOV R0,#LOW (ECO_PAGE_REGISTER1)
	  MOV R0,#LOW (ECO_PAGE_REGISTER1)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER2)
	  MOV R0,#LOW (ECO_PAGE_REGISTER2)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER3)
	  MOV R0,#LOW (ECO_PAGE_REGISTER3)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER4)
	  MOV R0,#LOW (ECO_PAGE_REGISTER4)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER5)
	  MOV R0,#LOW (ECO_PAGE_REGISTER5)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER6)
	  MOV R0,#LOW (ECO_PAGE_REGISTER6)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER7)
	  MOV R0,#LOW (ECO_PAGE_REGISTER7)
;      	MOV A,@R0
	  MOV A,@R0
; 	
	  
; 		MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
	  MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
; 		MOV	DPH,ECO_PAGE_ADDR
	  MOV	DPH,ECO_PAGE_ADDR
; 		MOV	DPL,ECO_PAGE_ADDR+01H
	  MOV	DPL,ECO_PAGE_ADDR+01H
; 		
	  
; 		CLR	A
	  CLR	A
; 		JMP	@A+DPTR
	  JMP	@A+DPTR
; 		#pragma endasm
; 	}   
			; SOURCE LINE # 311
	RET  	
?C0007:
; 	else
; 	{
			; SOURCE LINE # 313
; 		//page fault
; 		// Move Data from EEPROM to iRAM 
; 		unsigned char xdata *seg = (unsigned char xdata *)((ECO_PAGE_TABLE_INDEX + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT);
			; SOURCE LINE # 316
	MOV  	A,ECO_PAGE_TABLE_INDEX
	ADD  	A,#0EH
	MOV  	R7,A
	CLR  	A
	RLC  	A
	MOV  	A,R7
	MOV  	seg?140,A
	MOV  	seg?140+01H,#00H
; 		
; 		//memory page is in ram
; 		eeprom_init();
			; SOURCE LINE # 319
	LCALL	eeprom_init
; 
; 		//mov code from eeprom to external ram
; 		for(i=0;i<ECO_PAGE_SIZE;i++)
			; SOURCE LINE # 322
	CLR  	A
	MOV  	i?141,A
	MOV  	i?141+01H,A
?C0009:
; 		{
			; SOURCE LINE # 323
; 			*(seg+i) = eeprom_read(ECO_ADDR_SHIFT(ECO_PAGE_ADDR & ECO_PAGE_MOV_MASK) +i);
			; SOURCE LINE # 324
	CLR  	A
	ADD  	A,#03H
	MOV  	R7,A
	CLR  	A
	ADDC 	A,ECO_PAGE_ADDR
	XCH  	A,R7
	ADD  	A,i?141+01H
	XCH  	A,R7
	ADDC 	A,i?141
	MOV  	R6,A
	LCALL	_eeprom_read
	MOV  	A,seg?140+01H
	ADD  	A,i?141+01H
	MOV  	DPL,A
	MOV  	A,seg?140
	ADDC 	A,i?141
	MOV  	DPH,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		}
			; SOURCE LINE # 325
	INC  	i?141+01H
	MOV  	A,i?141+01H
	JNZ  	?C0017
	INC  	i?141
?C0017:
	CLR  	C
	MOV  	A,i?141
	SUBB 	A,#01H
	JC   	?C0009
?C0010:
; 		
; 		//update page table to connect this physical address id with virtual address id 
; 		ECO_PAGE_TABLE[ECO_PAGE_TABLE_INDEX] = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
			; SOURCE LINE # 328
	MOV  	A,ECO_PAGE_ADDR
	MOV  	R7,A
	MOV  	R6,#00H
	MOV  	A,ECO_PAGE_TABLE_INDEX
	ADD  	A,ACC
	ADD  	A,#LOW (ECO_PAGE_TABLE)
	MOV  	R0,A
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
; 
; 		//store physical address id
; 		//ECO_PAGE_PREV_PID = ECO_PAGE_TABLE[ECO_PAGE_TABLE_INDEX];
; 		ECO_PAGE_PREV_PID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
			; SOURCE LINE # 332
	MOV  	ECO_PAGE_PREV_PID,R7
; 
; 		//update page address
; 		ECO_PAGE_ADDR = ((ECO_PAGE_TABLE_INDEX + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK);
			; SOURCE LINE # 335
	MOV  	A,ECO_PAGE_TABLE_INDEX
	ADD  	A,#0EH
	MOV  	R7,A
	MOV  	A,R7
	MOV  	R6,A
	MOV  	R4,#00H
	CLR  	A
	ADD  	A,ECO_PAGE_ADDR+01H
	MOV  	ECO_PAGE_ADDR+01H,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	ECO_PAGE_ADDR,A
; 
; 		//store virtual address id 
; 		ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;	
			; SOURCE LINE # 338
	MOV  	ECO_PAGE_PREV_VID,A
; 
; 		//mov to the next index
; 		ECO_PAGE_TABLE_INDEX = (ECO_PAGE_TABLE_INDEX + 1) % ECO_PAGE_ENTRY;
			; SOURCE LINE # 341
	MOV  	A,ECO_PAGE_TABLE_INDEX
	INC  	A
	ANL  	A,#01H
	MOV  	ECO_PAGE_TABLE_INDEX,A
; 			
; 		//jump  to function address
; 		#pragma asm
; 
	  
; 		MOV R0,#LOW (ECO_PAGE_REGISTER1)
	  MOV R0,#LOW (ECO_PAGE_REGISTER1)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER2)
	  MOV R0,#LOW (ECO_PAGE_REGISTER2)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER3)
	  MOV R0,#LOW (ECO_PAGE_REGISTER3)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER4)
	  MOV R0,#LOW (ECO_PAGE_REGISTER4)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER5)
	  MOV R0,#LOW (ECO_PAGE_REGISTER5)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER6)
	  MOV R0,#LOW (ECO_PAGE_REGISTER6)
;      	MOV A,@R0
	  MOV A,@R0
; 		MOV R0,#LOW (ECO_PAGE_REGISTER7)
	  MOV R0,#LOW (ECO_PAGE_REGISTER7)
;      	MOV A,@R0
	  MOV A,@R0
; 	
	  
; 		MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
	  MOV	SPI_CTRL,ECO_PAGE_SPI_CONN
; 		MOV	DPH,ECO_PAGE_ADDR
	  MOV	DPH,ECO_PAGE_ADDR
; 		MOV	DPL,ECO_PAGE_ADDR+01H
	  MOV	DPL,ECO_PAGE_ADDR+01H
; 		
	  
; 		CLR	A
	  CLR	A
; 		JMP	@A+DPTR
	  JMP	@A+DPTR
; 
	  
; 		//eco_page_function_call
	  
; 		//MOV     DPH,ECO_PAGE_ADDR
	  
; 		//MOV     DPH,ECO_PAGE_ADDR
	  
; 		//MOV     DPL,ECO_PAGE_ADDR+01H
	  
; 		//LJMP	@A + DPTR
	  
; 		//MOV     DPL,ECO_PAGE_ADDR+01H
	  
; 		//LCALL        ?C?ICALL2               
	  
; 		#pragma endasm
; 
; 	}
			; SOURCE LINE # 377
; 
; }
			; SOURCE LINE # 379
?C0012:
	RET  	
; END OF eco_page_manager

	END

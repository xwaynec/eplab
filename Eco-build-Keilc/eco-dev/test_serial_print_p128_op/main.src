; ./main.src generated from: .\main.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(../../Include) SRC(./main.src)

$NOMOD51

NAME	MAIN

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?timer0?MAIN      SEGMENT CODE 
?PR?_log_2?MAIN      SEGMENT CODE 
?DT?_log_2?MAIN      SEGMENT DATA OVERLAYABLE 
?PR?delta_compress?MAIN                  SEGMENT CODE 
?DT?delta_compress?MAIN                  SEGMENT DATA OVERLAYABLE 
?PR?delta_compress_2?MAIN                  SEGMENT CODE 
?PR?main?MAIN        SEGMENT CODE 
?DT?main?MAIN        SEGMENT DATA OVERLAYABLE 
?CO?MAIN             SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?MAIN             SEGMENT DATA 
?ID?MAIN             SEGMENT IDATA 
?ID?delta_compress?MAIN                  SEGMENT IDATA OVERLAYABLE 
	EXTRN	CODE (_mdelay)
	EXTRN	CODE (_rf_configure)
	EXTRN	CODE (_serial_init)
	EXTRN	CODE (_log10)
	EXTRN	CODE (_adc_read)
	EXTRN	CODE (_adc_init)
	EXTRN	CODE (_puts)
	EXTRN	CODE (_?int_print)
	EXTRN	CODE (_rf_send)
	EXTRN	DATA (?_rf_send?BYTE)
	EXTRN	CODE (_store_cpu_rate)
	EXTRN	CODE (rf_init)
	EXTRN	CODE (?C?FCASTI)
	EXTRN	CODE (?C?LSTIDATA)
	EXTRN	CODE (?C?LLDIDATA)
	EXTRN	CODE (?C?CASTF)
	EXTRN	CODE (?C_STARTUP)

	EXTRN   CODE (eco_page_manager)
    EXTRN   DATA (ECO_PAGE_ADDR)
    EXTRN   DATA (ECO_PAGE_SPI_CONN)
    EXTRN   IDATA (ECO_PAGE_REGISTER1)
    EXTRN   IDATA (ECO_PAGE_REGISTER2)
    EXTRN   IDATA (ECO_PAGE_REGISTER3)
    EXTRN   IDATA (ECO_PAGE_REGISTER4)
    EXTRN   IDATA (ECO_PAGE_REGISTER5)
    EXTRN   IDATA (ECO_PAGE_REGISTER6)
    EXTRN   IDATA (ECO_PAGE_REGISTER7)

	PUBLIC	rf_data
	PUBLIC	dst_addr
	PUBLIC	msg
	PUBLIC	test_counter
	PUBLIC	flag
	PUBLIC	timer_counter
	PUBLIC	main
	PUBLIC	delta_compress
	PUBLIC	delta_compress_2
	PUBLIC	_log_2
	PUBLIC	timer0

	RSEG  ?DT?main?MAIN
?main?BYTE:
          i?346:   DS   2

	RSEG  ?DT?_log_2?MAIN
?_log_2?BYTE:
          x?140:   DS   2

	RSEG  ?DT?delta_compress?MAIN
?delta_compress?BYTE:
          i?241:   DS   2
	ORG  2
          j?242:   DS   2
	ORG  4
        now?244:   DS   2
	ORG  6
       prev?245:   DS   2

	RSEG  ?DT?MAIN
  timer_counter:   DS   2
           flag:   DS   2
   test_counter:   DS   2
       dst_addr:   DS   3
        rf_data:   DS   15

	RSEG  ?ID?MAIN
            msg:   DS   54

	RSEG  ?ID?delta_compress?MAIN
      delta?243:   DS   4

	RSEG  ?CO?MAIN
?SC_0:
	DB  't' ,'e' ,'s' ,'t' ,':' ,000H

?SC_6:
	DB  00DH,00AH,000H


	RSEG  ?C_INITSEG
	DB	00FH
	DB	rf_data
	DB	000H
	DB	0A0H
	DB	000H
	DB	000H
	DB	000H
	DB	000H
	DB	000H
	DB	0F2H
	DB	0F2H
	DB	0F2H
	DB	0F2H
	DB	0F2H
	DB	063H
	DB	06FH
	DB	0ECH

	DB	003H
	DB	dst_addr
	DB	0F1H
	DB	0F1H
	DB	0F1H

; #include "Eco/reg24e1.h"
; #include "Eco/eco_sys.h"
; #include "utils/utils.h"
; #include "serial/serial.h"
; #include "isr/isr_rf.h"
; #include "eeprom/eeprom.h"
; //#include "eco_page.h"
; #include "adc/adc.h"
; #include <math.h>
; 
; #define LEN 27
; struct rf_config rf_data = { {0x00}, /* data2 width */
;     {0xA0}, /* data1 width */ 
;     {0x00, 0x00, 0x00, 0x00, 0x00}, /* addr2 */
;     {0xF2, 0xF2, 0xF2, 0xF2, 0xF2}, /* addr1, host addr */
;     {0x63}, /* 24-bit address, 16-bit CRC */
;     {0x6f, 0xEC} };
; 
; //struct rf_config *cfg = &rf_data;
; char dst_addr[3] = { 0xF1, 0xF1, 0xF1 };
; char idata msg[54];
; 
; volatile unsigned int test_counter;
; volatile unsigned int flag;
; volatile unsigned int timer_counter;
; 
CSEG	AT	0000BH
	LJMP	timer0

; void timer0() interrupt 1

	RSEG  ?PR?timer0?MAIN
	USING	0
timer0:
	PUSH 	ACC
	PUSH 	PSW
			; SOURCE LINE # 27
; {
; 	if(timer_counter < 5000)
			; SOURCE LINE # 29
	CLR  	C
	MOV  	A,timer_counter+01H
	SUBB 	A,#088H
	MOV  	A,timer_counter
	SUBB 	A,#013H
	JNC  	?C0001
; 	{
			; SOURCE LINE # 30
; 		timer_counter++;
			; SOURCE LINE # 31
	INC  	timer_counter+01H
	MOV  	A,timer_counter+01H
	JNZ  	?C0003
	INC  	timer_counter
?C0026:
; 	}
			; SOURCE LINE # 32
	SJMP 	?C0003
?C0001:
; 	else
; 	{
			; SOURCE LINE # 34
; 		timer_counter = 0;
			; SOURCE LINE # 35
	MOV  	timer_counter,#00H
	MOV  	timer_counter+01H,#00H
; 		flag = 1;
			; SOURCE LINE # 36
	MOV  	flag,#00H
	MOV  	flag+01H,#01H
; 		EA = 0;
			; SOURCE LINE # 37
	CLR  	EA
; 	}	
			; SOURCE LINE # 38
; 	
; }
			; SOURCE LINE # 40
?C0003:
	POP  	PSW
	POP  	ACC
	RETI 	
; END OF timer0

; int log_2(int x)

	RSEG  ?PR?_log_2?MAIN
_log_2:
	USING	0
			; SOURCE LINE # 41
	MOV  	x?140,R6
	MOV  	x?140+01H,R7
; {
			; SOURCE LINE # 42
;     //EA = 0;   
;     if( x > 0)
			; SOURCE LINE # 44
	SETB 	C
	MOV  	A,x?140+01H
	SUBB 	A,#00H
	MOV  	A,x?140
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0004
;     {   
			; SOURCE LINE # 45
; 		if (x < 0) log10(x);
			; SOURCE LINE # 46
	MOV  	A,x?140
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0006
	MOV  	R4,x?140
	MOV  	R5,x?140+01H
	MOV  	A,R4
	LCALL	?C?FCASTI
	LCALL	_log10
?C0006:
;         while(x--)
			; SOURCE LINE # 47
	MOV  	A,x?140+01H
	DEC  	x?140+01H
	MOV  	R6,x?140
	JNZ  	?C0027
	DEC  	x?140
?C0027:
	ORL  	A,R6
	JNZ  	?C0006
;         ;
; 		return ;
;     }   
			; SOURCE LINE # 50
?C0004:
;     else if(x == 0)
			; SOURCE LINE # 51
;     {   
			; SOURCE LINE # 52
;         return ;
;     }   
			; SOURCE LINE # 54
;     else
;     {   
			; SOURCE LINE # 56
;         return ;    
;     }
			; SOURCE LINE # 58
; }
			; SOURCE LINE # 59
?C0008:
	RET  	
; END OF _log_2

; 
; void delta_compress()

	RSEG  ?PR?delta_compress?MAIN
delta_compress:
	USING	0
			; SOURCE LINE # 61
; {
			; SOURCE LINE # 62
;     int i,j;
;     float idata delta;
;     int now,prev;
;     test_counter++;
			; SOURCE LINE # 66
	INC  	test_counter+01H
	MOV  	A,test_counter+01H
	JNZ  	?C0028
	INC  	test_counter
?C0028:
;     now = prev = (msg[0]<<8) + msg[1];
			; SOURCE LINE # 67
	MOV  	R0,#LOW (msg)
	MOV  	A,@R0
	MOV  	R7,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	A,R7
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	R4,A
	CLR  	A
	ADD  	A,R5
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	prev?245,A
	MOV  	prev?245+01H,R7
	MOV  	now?244,A
	MOV  	now?244+01H,R7

	MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    MOV ECO_PAGE_ADDR,#HIGH (delta_compress_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (delta_compress_2)
    LCALL   eco_page_manager
    RET

    RSEG  ?PR?delta_compress_2?MAIN
delta_compress_2:
    USING   0
; 
;     for(i=2,j=2;i<54;i+=2,j++)
			; SOURCE LINE # 69
	MOV  	i?241,#00H
	MOV  	i?241+01H,#02H
	MOV  	j?242,#00H
	MOV  	j?242+01H,#02H
?C0012:
	CLR  	C
	MOV  	A,i?241+01H
	SUBB 	A,#036H
	MOV  	A,i?241
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0015
;     {
			; SOURCE LINE # 70
;         prev = now;
			; SOURCE LINE # 71
	MOV  	prev?245,now?244
	MOV  	prev?245+01H,now?244+01H
;         now = (msg[i]<<8) + msg[i+1];
			; SOURCE LINE # 72
	MOV  	R5,i?241+01H
	MOV  	A,#LOW (msg)
	ADD  	A,R5
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,R7
	MOV  	R6,A
	MOV  	A,#LOW (msg+01H)
	ADD  	A,R5
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R5,A
	RLC  	A
	SUBB 	A,ACC
	MOV  	R4,A
	CLR  	A
	ADD  	A,R5
	MOV  	now?244+01H,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	now?244,A
;         delta = now - prev;
			; SOURCE LINE # 73
	CLR  	C
	MOV  	A,now?244+01H
	SUBB 	A,prev?245+01H
	MOV  	R5,A
	MOV  	A,now?244
	SUBB 	A,prev?245
	MOV  	R4,A
	LCALL	?C?FCASTI
	MOV  	R0,#LOW (delta?243)
	LCALL	?C?LSTIDATA
;         log_2(delta);
			; SOURCE LINE # 74
	MOV  	R0,#LOW (delta?243)
	LCALL	?C?LLDIDATA
	LCALL	?C?CASTF
	LCALL	_log_2
    ;MOV     ECO_PAGE_SPI_CONN,SPI_CTRL
    ;MOV ECO_PAGE_ADDR,#HIGH (_log_2)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (_log_2)
    ;LCALL   eco_page_manager
;         msg[j] = now;
			; SOURCE LINE # 75
	MOV  	A,#LOW (msg)
	ADD  	A,j?242+01H
	MOV  	R0,A
	MOV  	@R0,now?244+01H
;     }
			; SOURCE LINE # 76
	MOV  	A,#02H
	ADD  	A,i?241+01H
	MOV  	i?241+01H,A
	CLR  	A
	ADDC 	A,i?241
	MOV  	i?241,A
	INC  	j?242+01H
	MOV  	A,j?242+01H
	JNZ  	?C0012
	INC  	j?242
?C0029:
	SJMP 	?C0012
; }
			; SOURCE LINE # 77
?C0015:
	RET  	
; END OF delta_compress

; 
; 
; int main()

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 80
; {
			; SOURCE LINE # 81
; 
; 	int i;
; 	int accx;
; 	store_cpu_rate(16);
			; SOURCE LINE # 85
	MOV  	R7,#010H
	MOV  	R6,#00H
	LCALL	_store_cpu_rate
    ;MOV     R0,#LOW (ECO_PAGE_REGISTER7)
    ;MOV     @R0,#010H
	;
    ;MOV     R0,#LOW (ECO_PAGE_REGISTER6)
    ;MOV     @R0,#00H

	;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    ;MOV ECO_PAGE_ADDR,#HIGH (_store_cpu_rate)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (_store_cpu_rate)
    ;LCALL   eco_page_manager

; 	/* init led */
; 	P0_DIR &= ~0x28;
			; SOURCE LINE # 87
	ANL  	P0_DIR,#0D7H
; 	P0_ALT &= ~0x28;
			; SOURCE LINE # 88
	ANL  	P0_ALT,#0D7H
; 
; 	//eco_page_init();
; 
; 	serial_init(19200);
			; SOURCE LINE # 92
	MOV  	R7,#00H
	MOV  	R6,#04BH
	LCALL	_serial_init

    ;MOV     R0,#LOW (ECO_PAGE_REGISTER7)
    ;MOV     @R0,#00H
	;
    ;MOV     R0,#LOW (ECO_PAGE_REGISTER6)
    ;MOV     @R0,#04BH


	;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    ;MOV ECO_PAGE_ADDR,#HIGH (_serial_init)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (_serial_init)
    ;LCALL   eco_page_manager


; 	puts("test:");
			; SOURCE LINE # 93
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_puts
; 	int_print(test_counter);
			; SOURCE LINE # 94
	MOV  	R6,test_counter
	MOV  	R7,test_counter+01H
	LCALL	_?int_print
;   	puts("\r\n");
			; SOURCE LINE # 95
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_6)
	MOV  	R1,#LOW (?SC_6)
	LCALL	_puts
; 
; 	for (i = 0; i < 6; i++) {
			; SOURCE LINE # 97
	CLR  	A
	MOV  	i?346,A
	MOV  	i?346+01H,A
?C0016:
; 		blink_led();
			; SOURCE LINE # 98
	XRL  	P0,#020H
; 		mdelay(400);
			; SOURCE LINE # 99
	MOV  	R7,#090H
	MOV  	R6,#01H
	LCALL	_mdelay
; 	}
			; SOURCE LINE # 100
	INC  	i?346+01H
	MOV  	A,i?346+01H
	JNZ  	?C0030
	INC  	i?346
?C0030:
	CLR  	C
	SUBB 	A,#06H
	MOV  	A,i?346
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0016
?C0017:
; 	/* init adc */
; 	adc_init(ADC_CLK_D8, ADC_RES_12, EXTREF);
			; SOURCE LINE # 102
	MOV  	R3,#010H
	MOV  	R5,#03H
	MOV  	R7,#020H
	LCALL	_adc_init
; 
; 	/* rf */
; 	rf_init();
			; SOURCE LINE # 105
	LCALL	rf_init


	;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    ;MOV ECO_PAGE_ADDR,#HIGH (rf_init)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (rf_init)
    ;LCALL   eco_page_manager



; 	rf_configure(&rf_data);
			; SOURCE LINE # 106
	MOV  	R3,#00H
	MOV  	R2,#HIGH (rf_data)
	MOV  	R1,#LOW (rf_data)
	LCALL	_rf_configure
; 
; 	//volatile value for calculating 
; 	test_counter = 0;
			; SOURCE LINE # 109
	CLR  	A
	MOV  	test_counter,A
	MOV  	test_counter+01H,A
; 	timer_counter = 0;
			; SOURCE LINE # 110
	MOV  	timer_counter,A
	MOV  	timer_counter+01H,A
; 	flag = 0;
			; SOURCE LINE # 111
	MOV  	flag,A
	MOV  	flag+01H,A
; 	/* init timer */
; 	// TMOD.1 TMOD.2 [1 0] 8-bit counter with auto-reload
; 	TMOD = 0x02;
			; SOURCE LINE # 114
	MOV  	TMOD,#02H
; 	TH0 = 0x00;
			; SOURCE LINE # 115
	MOV  	TH0,A
; 	//enable interrupt
; 	EA = 1;
			; SOURCE LINE # 117
	SETB 	EA
; 	//enable timer interrupt
; 	ET0 = 1;
			; SOURCE LINE # 119
	SETB 	ET0
; 	//set to 1 to enable counting on Timer 0.		
; 	TR0 = 1;	
			; SOURCE LINE # 121
	SETB 	TR0
?C0019:
; 
; 	while(1)
			; SOURCE LINE # 123
; 	{
			; SOURCE LINE # 124
; 		for(i=0;i<LEN*2;i+=2)
			; SOURCE LINE # 125
	CLR  	A
	MOV  	i?346,A
	MOV  	i?346+01H,A
?C0021:
	CLR  	C
	MOV  	A,i?346+01H
	SUBB 	A,#036H
	MOV  	A,i?346
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0022
; 		{
			; SOURCE LINE # 126
; 			accx = adc_read(X_AXIS);
			; SOURCE LINE # 127
	MOV  	R7,#03H
	LCALL	_adc_read
;---- Variable 'accx?347' assigned to Register 'R4/R5' ----
	MOV  	R5,AR7
	MOV  	R4,AR6
; 			msg[i] = (accx >> 8);
			; SOURCE LINE # 128
	MOV  	A,R4
	MOV  	R7,A
	MOV  	R6,i?346+01H
	MOV  	A,#LOW (msg)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	@R0,AR7
; 			msg[i+1] = accx & 0xff;
			; SOURCE LINE # 129
	MOV  	R7,AR5
	MOV  	A,#LOW (msg+01H)
	ADD  	A,R6
	MOV  	R0,A
	MOV  	@R0,AR7
; 		}
			; SOURCE LINE # 130
	MOV  	A,#02H
	ADD  	A,i?346+01H
	MOV  	i?346+01H,A
	CLR  	A
	ADDC 	A,i?346
	MOV  	i?346,A
	SJMP 	?C0021
?C0022:
; 
; 		delta_compress();
			; SOURCE LINE # 132
	LCALL	delta_compress
	
    ;MOV     ECO_PAGE_SPI_CONN,SPI_CTRL
    ;MOV ECO_PAGE_ADDR,#HIGH (delta_compress)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (delta_compress)
    ;LCALL   eco_page_manager
; 		
; 		if(flag == 1)
			; SOURCE LINE # 134
	MOV  	A,flag+01H
	XRL  	A,#01H
	ORL  	A,flag
	JNZ  	?C0024
; 		{
			; SOURCE LINE # 135
; 			flag = 0;
			; SOURCE LINE # 136
	MOV  	flag,A
	MOV  	flag+01H,A
; 			blink_led();
			; SOURCE LINE # 137
	XRL  	P0,#020H
; 			int_print(test_counter);
			; SOURCE LINE # 138
	MOV  	R6,test_counter
	MOV  	R7,test_counter+01H
	LCALL	_?int_print
; 		   	puts("\r\n");
			; SOURCE LINE # 139
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_6)
	MOV  	R1,#LOW (?SC_6)
	LCALL	_puts
; 			EA = 1;
			; SOURCE LINE # 140
	SETB 	EA
; 		}
			; SOURCE LINE # 141
?C0024:
; 		
; 		rf_send(dst_addr, 3, msg, 20);
			; SOURCE LINE # 143
	MOV  	?_rf_send?BYTE+04H,#00H
	MOV  	?_rf_send?BYTE+05H,#HIGH (msg)
	MOV  	?_rf_send?BYTE+06H,#LOW (msg)
	MOV  	?_rf_send?BYTE+07H,#014H
	;MOV  	R3,#00H
	;MOV  	R2,#HIGH (dst_addr)
	;MOV  	R1,#LOW (dst_addr)
	;MOV  	R5,#03H
	;LCALL	_rf_send
	MOV     R0,#LOW (ECO_PAGE_REGISTER3)
    MOV     @R0,#00H

    MOV     R0,#LOW (ECO_PAGE_REGISTER2)
    MOV     @R0,#HIGH (dst_addr)

    MOV     R0,#LOW (ECO_PAGE_REGISTER1)
    MOV     @R0,#LOW (dst_addr)

    MOV     R0,#LOW (ECO_PAGE_REGISTER5)
    MOV     @R0,#03H

    ;---------  LCALL   _rf_send start
    MOV     ECO_PAGE_SPI_CONN,SPI_CTRL
    MOV ECO_PAGE_ADDR,#HIGH (_rf_send)
    MOV ECO_PAGE_ADDR+01H,#LOW (_rf_send)
    LCALL   eco_page_manager
; 	}
			; SOURCE LINE # 144
	LJMP 	?C0019
; END OF main

	END

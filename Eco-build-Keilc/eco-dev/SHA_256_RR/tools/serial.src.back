; ./serial.src generated from: .\..\..\include\serial\serial.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe .\..\..\include\serial\serial.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT INCDIR(../../Include) SRC(./serial.src)

$NOMOD51

NAME	SERIAL

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?_setup_baudrate?SERIAL               SEGMENT CODE 
?PR?_serial_init?SERIAL                  SEGMENT CODE 
?PR?_serial_write?SERIAL                 SEGMENT CODE 
?PR?serial_read?SERIAL                   SEGMENT CODE 
?PR?_putc?SERIAL     SEGMENT CODE 
?PR?_puts?SERIAL     SEGMENT CODE 
?DT?_puts?SERIAL     SEGMENT DATA OVERLAYABLE 
?PR?getc?SERIAL      SEGMENT CODE 
?PR?_?int_print?SERIAL                   SEGMENT CODE 
	EXTRN	CODE (?C?ICASE)
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	DATA (?C_IBP)
	EXTRN	CODE (?C?UIDIV)
	PUBLIC	_?int_print
	PUBLIC	getc
	PUBLIC	_puts
	PUBLIC	_putc
	PUBLIC	_serial_init

	RSEG  ?DT?_puts?SERIAL
?_puts?BYTE:
          s?544:   DS   3
; /*
;  * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
;  * Copyright (c) 2008 National Tsing Hua University (NTHU) 
;  * Permission to copy, modify, and distribute this program is granted 
;  * for noncommercial purposes, provided the author(s) and copyright
;  * notice are retained. All other uses require explicit written
;  * permission from NTHU. 
;  *
;  * serial port driver
;  *
;  * Min-Hua Chen <orca.chen@gmail.com>
;  * 2007/8/2
;  */
; 
; #include "Eco/reg24e1.h"
; #include "serial.h"
; #include "timer/timer.h"
; 
; /* setup_baudrate - note that the CPU is 16M Hz
;  * @baud: baudrate
;  */
; static int setup_baudrate(unsigned int baud)

	RSEG  ?PR?_setup_baudrate?SERIAL
_setup_baudrate:
	USING	0
			; SOURCE LINE # 22
;---- Variable 'baud?040' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 23
; 	T2CON &= TIMER2_AUTO;	/* set auto-reload */
			; SOURCE LINE # 24
	ANL  	T2CON,#0FEH
; 	TCLK = 1;	/* set transmit clock */
			; SOURCE LINE # 25
	SETB 	TCLK
; 	RCLK = 1;	/* set receive clock */
			; SOURCE LINE # 26
	SETB 	RCLK
; 	C_T2 = 0;	/* select timer function */
			; SOURCE LINE # 27
	CLR  	C_T2
; 	T2CON |= TIMER2_ENABLE;	/* enable timer2 */
			; SOURCE LINE # 28
	ORL  	T2CON,#04H
; 
; 	P0 &= ~0x06;	/* clean [1:2] bits */
			; SOURCE LINE # 30
	ANL  	P0,#0F9H
; 	P0_ALT |= SERIAL_IO_PORT;	/* select serial I/O port */
			; SOURCE LINE # 31
	ORL  	P0_ALT,#06H
; 
; 	switch (baud) {
			; SOURCE LINE # 33
	MOV  	A,R7
	MOV  	B,R6
	LCALL	?C?ICASE
	DW   	?C0003
	DW   	04B00H
	DW   	?C0002
	DW   	0E100H
	DW   	00H
	DW   	?C0004
; 	case 57600:
			; SOURCE LINE # 34
?C0002:
; 		RCAP2H = 0xFF;
			; SOURCE LINE # 35
	MOV  	RCAP2H,#0FFH
; 		RCAP2L = 0xF7;
			; SOURCE LINE # 36
	MOV  	RCAP2L,#0F7H
; 		break;
			; SOURCE LINE # 37
	SJMP 	?C0001
; 	case 19200:
			; SOURCE LINE # 38
?C0003:
; 		RCAP2H = 0xFF;
			; SOURCE LINE # 39
	MOV  	RCAP2H,#0FFH
; 		RCAP2L = 0xE6;
			; SOURCE LINE # 40
	MOV  	RCAP2L,#0E6H
; 		break;
			; SOURCE LINE # 41
	SJMP 	?C0001
; 	default:
			; SOURCE LINE # 42
?C0004:
; 		/* baudrate not supported */
; 		return 0;
			; SOURCE LINE # 44
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
	RET  	
; 	}
			; SOURCE LINE # 45
?C0001:
; 	return 1;
			; SOURCE LINE # 46
	MOV  	R6,#00H
	MOV  	R7,#01H
; }
			; SOURCE LINE # 47
?C0005:
	RET  	
; END OF _setup_baudrate

; 
; /* serial_init - setup baudrate 
;  * NOTE: using timer 2 as baud generator @ CPU 16M Hz only 
;  * @baud: baud rate
;  */
; void serial_init(unsigned int baud)

	RSEG  ?PR?_serial_init?SERIAL
_serial_init:
	USING	0
			; SOURCE LINE # 53
;---- Variable 'baud?141' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 54
; 	/* SCON initial value: 0x00 */
; 	/* add more supported modes here */
; 
; 	setup_baudrate(baud);
			; SOURCE LINE # 58
	LCALL	_setup_baudrate
; 	SCON |= SERIAL_MODE1;	/* enable serial port mode 1 */
			; SOURCE LINE # 59
	ORL  	SCON,#040H
; 	SCON |= RECV_ENABLE;	/* enable receive */
			; SOURCE LINE # 60
	ORL  	SCON,#010H
; }
			; SOURCE LINE # 61
	RET  	
; END OF _serial_init

; 
; /* serial_write - transmit one byte by serial port
;  * @byte: writing byte
;  */
; static void serial_write(char byte)

	RSEG  ?PR?_serial_write?SERIAL
_serial_write:
			; SOURCE LINE # 66
;---- Variable 'byte?242' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 67
; 	SBUF = byte;	/* write to serial buffer */
			; SOURCE LINE # 68
	MOV  	SBUF,R7
?C0007:
; 	while (!TI)	/* wait until done */
			; SOURCE LINE # 69
	JNB  	TI,?C0007
?C0008:
; 		;
; 	TI = 0;	/* clean transmit done bit */
			; SOURCE LINE # 71
	CLR  	TI
; }
			; SOURCE LINE # 72
	RET  	
; END OF _serial_write

; 
; /* serial_read - read one byte from serial port
;  * @ret: read byte
;  */
; static char serial_read()

	RSEG  ?PR?serial_read?SERIAL
serial_read:
	USING	0
			; SOURCE LINE # 77
; {
			; SOURCE LINE # 78
?C0010:
; 	while (!RI)	/* wait until done */
			; SOURCE LINE # 79
	JNB  	RI,?C0010
?C0011:
; 		;
; 	RI = 0;	/* clean receive bit */
			; SOURCE LINE # 81
	CLR  	RI
; 	return SBUF;
			; SOURCE LINE # 82
	MOV  	R7,SBUF
; }
			; SOURCE LINE # 83
?C0012:
	RET  	
; END OF serial_read

; 
; /* wrappers for serial read/write interface */
; void putc(char c)

	RSEG  ?PR?_putc?SERIAL
_putc:
			; SOURCE LINE # 86
;---- Variable 'c?443' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 87
; 	serial_write(c);
			; SOURCE LINE # 88
	LJMP 	_serial_write
; END OF _putc

; }
; 
; void puts(char *s)

	RSEG  ?PR?_puts?SERIAL
_puts:
	USING	0
			; SOURCE LINE # 91
	MOV  	s?544,R3
	MOV  	s?544+01H,R2
	MOV  	s?544+02H,R1
; {
			; SOURCE LINE # 92
?C0014:
; 	while (*s)
			; SOURCE LINE # 93
	MOV  	R3,s?544
	MOV  	R2,s?544+01H
	MOV  	R1,s?544+02H
	LCALL	?C?CLDPTR
	JZ   	?C0016
; 		serial_write(*s++);
			; SOURCE LINE # 94
	INC  	s?544+02H
	MOV  	A,s?544+02H
	JNZ  	?C0020
	INC  	s?544+01H
?C0020:
	DEC  	A
	MOV  	R1,A
	LCALL	?C?CLDPTR
	MOV  	R7,A
	LCALL	_serial_write
	SJMP 	?C0014
; }
			; SOURCE LINE # 95
?C0016:
	RET  	
; END OF _puts

; 
; char getc()

	RSEG  ?PR?getc?SERIAL
getc:
	USING	0
			; SOURCE LINE # 97
; {
			; SOURCE LINE # 98
; 	return serial_read();
			; SOURCE LINE # 99
	LCALL	serial_read
; }
			; SOURCE LINE # 100
?C0017:
	RET  	
; END OF getc

; 
; /* int_print - convert an unsigned int to a string then print it
;  * max int is 65535
;  * @val: int for printing
;  */
; void int_print(unsigned int val) reentrant

	RSEG  ?PR?_?int_print?SERIAL
_?int_print:
	USING	0
			; SOURCE LINE # 106
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
; {
; 	if (val / 10)
			; SOURCE LINE # 108
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R4,#00H
	MOV  	R5,#0AH
	LCALL	?C?UIDIV
	MOV  	A,R7
	ORL  	A,R6
	JZ   	?C0018
; 		int_print(val / 10);
			; SOURCE LINE # 109
	LCALL	_?int_print
?C0018:
; 	putc((val % 10) + '0');
			; SOURCE LINE # 110
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R4,#00H
	MOV  	R5,#0AH
	LCALL	?C?UIDIV
	MOV  	A,R5
	ADD  	A,#030H
	MOV  	R7,A
	LCALL	_putc
; }
			; SOURCE LINE # 111
	INC  	?C_IBP
	INC  	?C_IBP
	RET  	
; END OF _?int_print

	END

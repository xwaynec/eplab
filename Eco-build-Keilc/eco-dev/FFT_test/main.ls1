AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     1


MACRO ASSEMBLER AX51 V3.06a
OBJECT MODULE PLACED IN .\main.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.exe .\main.src EP DEBUG SYMBOLS OJ(.\main.obj) PR(.\main.ls1) 

LOC    OBJ             LINE     SOURCE

                          1     ; ./main.src generated from: .\main.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT
                                ROM(LARGE) INCDIR(../../Include) SRC(./main.src)
                          4     
                          5     $nomod51 
                          6     
                          7     NAME    MAIN
                          8     
 00A0.7                   9     PWR_UP  BIT     0A0H.7
 0080                    10     P0      DATA    080H
 0090                    11     P1      DATA    090H
 00D0.6                  12     AC      BIT     0D0H.6
 0080.5                  13     T0      BIT     080H.5
 00B3                    14     SPI_CTRL        DATA    0B3H
 0080.6                  15     T1      BIT     080H.6
 00A8.7                  16     EA      BIT     0A8H.7
 0090.0                  17     T2      BIT     090H.0
 00A0.6                  18     CE      BIT     0A0H.6
 00BE                    19     DEV_OFFSET      DATA    0BEH
 00A0.1                  20     CLK1    BIT     0A0H.1
 0090.2                  21     DIN0    BIT     090H.2
 00A0.5                  22     CLK2    BIT     0A0H.5
 0090.0                  23     DIO0    BIT     090H.0
 0083                    24     DPH0    DATA    083H
 0090.1                  25     DIO1    BIT     090H.1
 00A8                    26     IE      DATA    0A8H
 0085                    27     DPH1    DATA    085H
 0080.0                  28     DIO2    BIT     080H.0
 0080.1                  29     DIO3    BIT     080H.1
 0080.0                  30     P0_0    BIT     080H.0
 0090.0                  31     P1_0    BIT     090H.0
 0080.2                  32     DIO4    BIT     080H.2
 0080.1                  33     P0_1    BIT     080H.1
 0082                    34     DPL0    DATA    082H
 0090.1                  35     P1_1    BIT     090H.1
 0080.3                  36     DIO5    BIT     080H.3
 0080.2                  37     P0_2    BIT     080H.2
 0084                    38     DPL1    DATA    084H
 0090.2                  39     P1_2    BIT     090H.2
 0080.4                  40     DIO6    BIT     080H.4
 0080.3                  41     P0_3    BIT     080H.3
 0080.5                  42     DIO7    BIT     080H.5
 0080.4                  43     P0_4    BIT     080H.4
 00A4                    44     ADCSTATIC       DATA    0A4H
 0080.6                  45     DIO8    BIT     080H.6
 0080.5                  46     P0_5    BIT     080H.5
 00C8.6                  47     EXF2    BIT     0C8H.6
 00A0.3                  48     CS      BIT     0A0H.3
 0080.7                  49     DIO9    BIT     080H.7
 0080.6                  50     P0_6    BIT     080H.6
 0080.7                  51     P0_7    BIT     080H.7
 00A8.4                  52     ES      BIT     0A8H.4
 00B8                    53     IP      DATA    0B8H
 00A0.0                  54     DATA?   BIT     0A0H.0
 0098.0                  55     RI      BIT     098H.0
 00D0.7                  56     CY      BIT     0D0H.7
 0098.1                  57     TI      BIT     098H.1
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     2

 00BC                    58     T1_1V2  DATA    0BCH
 008F                    59     SPC_FNC DATA    08FH
 00BD                    60     T2_1V2  DATA    0BDH
 00CB                    61     RCAP2H  DATA    0CBH
 00B8.4                  62     PS      BIT     0B8H.4
 0081                    63     SP      DATA    081H
 00D0.2                  64     OV      BIT     0D0H.2
 00B6                    65     CK_CTRL DATA    0B6H
 00CA                    66     RCAP2L  DATA    0CAH
 00B5                    67     TICK_DV DATA    0B5H
 00B1                    68     RSTREAS DATA    0B1H
 00C8.1                  69     C_T2    BIT     0C8H.1
 00E8.4                  70     EWDI    BIT     0E8H.4
 00A1                    71     ADCCON  DATA    0A1H
 00C8.5                  72     RCLK    BIT     0C8H.5
 00A2                    73     ADCDATAH        DATA    0A2H
 0091                    74     EXIF    DATA    091H
 00C8.4                  75     TCLK    BIT     0C8H.4
 00A0.6                  76     DR2_CE  BIT     0A0H.6
 00A3                    77     ADCDATAL        DATA    0A3H
 0099                    78     SBUF    DATA    099H
 0087                    79     PCON    DATA    087H
 0098                    80     SCON    DATA    098H
 00F8.4                  81     PWDI    BIT     0F8H.4
 0089                    82     TMOD    DATA    089H
 0088                    83     TCON    DATA    088H
 00D8.3                  84     WDTI    BIT     0D8H.3
 00AA                    85     PWMDUTY DATA    0AAH
 0088.1                  86     IE0     BIT     088H.1
 0088.3                  87     IE1     BIT     088H.3
 0094                    88     P0_DIR  DATA    094H
 00F0                    89     B       DATA    0F0H
 0096                    90     P1_DIR  DATA    096H
 0095                    91     P0_ALT  DATA    095H
 0097                    92     P1_ALT  DATA    097H
 00C8.0                  93     CP_RL2  BIT     0C8H.0
 00A0.2                  94     DR1     BIT     0A0H.2
 00E0                    95     ACC     DATA    0E0H
 00A0.6                  96     DR2     BIT     0A0H.6
 00B7                    97     TEST_MODE       DATA    0B7H
 00B4                    98     SPICLK  DATA    0B4H
 00C8.1                  99     CT2     BIT     0C8H.1
 00A8.1                 100     ET0     BIT     0A8H.1
 00A8.3                 101     ET1     BIT     0A8H.3
 0088.5                 102     TF0     BIT     088H.5
 0080.3                 103     INT0_N  BIT     080H.3
 00A8.5                 104     ET2     BIT     0A8H.5
 0088.7                 105     TF1     BIT     088H.7
 0080.4                 106     INT1_N  BIT     080H.4
 00C8.7                 107     TF2     BIT     0C8H.7
 0098.2                 108     RB8     BIT     098H.2
 008C                   109     TH0     DATA    08CH
 00A8.0                 110     EX0     BIT     0A8H.0
 0088.0                 111     IT0     BIT     088H.0
 008D                   112     TH1     DATA    08DH
 00A8.2                 113     EX1     BIT     0A8H.2
 0098.3                 114     TB8     BIT     098H.3
 0088.2                 115     IT1     BIT     088H.2
 00CD                   116     TH2     DATA    0CDH
 00AD                   117     REGX_CTRL       DATA    0ADH
 00E8.0                 118     EX2     BIT     0E8H.0
 00D0.0                 119     P       BIT     0D0H.0
 00E8.1                 120     EX3     BIT     0E8H.1
 0098.7                 121     SM0     BIT     098H.7
 008A                   122     TL0     DATA    08AH
 00E8.2                 123     EX4     BIT     0E8H.2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     3

 0098.6                 124     SM1     BIT     098H.6
 008B                   125     TL1     DATA    08BH
 00E8.3                 126     EX5     BIT     0E8H.3
 0098.5                 127     SM2     BIT     098H.5
 00CC                   128     TL2     DATA    0CCH
 00E8                   129     EIE     DATA    0E8H
 00B8.1                 130     PT0     BIT     0B8H.1
 00D0.3                 131     RS0     BIT     0D0H.3
 00B8.3                 132     PT1     BIT     0B8H.3
 00D0.4                 133     RS1     BIT     0D0H.4
 00B8.5                 134     PT2     BIT     0B8H.5
 0088.4                 135     TR0     BIT     088H.4
 00A9                   136     PWMCON  DATA    0A9H
 0088.6                 137     TR1     BIT     088H.6
 00C8.2                 138     TR2     BIT     0C8H.2
 00B8.0                 139     PX0     BIT     0B8H.0
 00B8.2                 140     PX1     BIT     0B8H.2
 00F8.0                 141     PX2     BIT     0F8H.0
 00F8.1                 142     PX3     BIT     0F8H.1
 00F8.2                 143     PX4     BIT     0F8H.2
 0083                   144     DPH     DATA    083H
 00F8.3                 145     PX5     BIT     0F8H.3
 00F8                   146     EIP     DATA    0F8H
 0082                   147     DPL     DATA    082H
 00C8.3                 148     EXEN2   BIT     0C8H.3
 00C8.0                 149     CPRL2   BIT     0C8H.0
 0098.4                 150     REN     BIT     098H.4
 00C8                   151     T2CON   DATA    0C8H
 0086                   152     DPS     DATA    086H
 00B2                   153     SPI_DATA        DATA    0B2H
 0092                   154     MPAGE   DATA    092H
 0080.1                 155     RXD     BIT     080H.1
 00A0.4                 156     DOUT2   BIT     0A0H.4
 00D8                   157     EICON   DATA    0D8H
 008E                   158     CKCON   DATA    08EH
 0080.2                 159     TXD     BIT     080H.2
 00A0                   160     RADIO   DATA    0A0H
 0080.7                 161     PWM     BIT     080H.7
 00D0.5                 162     F0      BIT     0D0H.5
 00D0.1                 163     F1      BIT     0D0H.1
 00AC                   164     REGX_LSB        DATA    0ACH
 00D0                   165     PSW     DATA    0D0H
 00AB                   166     REGX_MSB        DATA    0ABH
------                  167     ?PR?_bitrev?MAIN     SEGMENT CODE 
------                  168     ?DT?_bitrev?MAIN     SEGMENT DATA OVERLAYABLE 
------                  169     ?PR?_log_2?MAIN      SEGMENT CODE 
------                  170     ?PR?_compute_W?MAIN  SEGMENT CODE 
------                  171     ?DT?_compute_W?MAIN  SEGMENT DATA OVERLAYABLE 
------                  172     ?PR?_permute_bitrev?MAIN                 SEGMENT CODE 
------                  173     ?DT?_permute_bitrev?MAIN                 SEGMENT DATA OVERLAYABLE 
------                  174     ?PR?_fft?MAIN        SEGMENT CODE 
------                  175     ?DT?_fft?MAIN        SEGMENT DATA OVERLAYABLE 
------                  176     ?PR?main?MAIN        SEGMENT CODE 
------                  177     ?ID?_bitrev?MAIN     SEGMENT IDATA OVERLAYABLE 
------                  178     ?ID?_log_2?MAIN      SEGMENT IDATA OVERLAYABLE 
------                  179     ?ID?_compute_W?MAIN  SEGMENT IDATA OVERLAYABLE 
------                  180     ?ID?_permute_bitrev?MAIN                 SEGMENT IDATA OVERLAYABLE 
------                  181     ?ID?_fft?MAIN        SEGMENT IDATA OVERLAYABLE 
------                  182     ?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
                        183             EXTRN   CODE (_cos)
                        184             EXTRN   CODE (_sin)
                        185             EXTRN   CODE (_store_cpu_rate)
                        186             EXTRN   CODE (?C?SIDIV)
                        187             EXTRN   CODE (?C?IMUL)
                        188             EXTRN   CODE (?C?FCASTI)
                        189             EXTRN   CODE (?C?CASTF)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     4

                        190             EXTRN   CODE (?C?ISTOPTR)
                        191             EXTRN   CODE (?C?ILDOPTR)
                        192             EXTRN   CODE (?C_STARTUP)
                        193             PUBLIC  main
                        194             PUBLIC  ?_fft?BYTE
                        195             PUBLIC  _fft
                        196             PUBLIC  ?_permute_bitrev?BYTE
                        197             PUBLIC  _permute_bitrev
                        198             PUBLIC  ?_compute_W?BYTE
                        199             PUBLIC  _compute_W
                        200             PUBLIC  _log_2
                        201             PUBLIC  _bitrev
                        202     
------                  203             RSEG  ?DT?_bitrev?MAIN
000000                  204     ?_bitrev?BYTE:
000000                  205         numbits?041:   DS   2
                        206     
------                  207             RSEG  ?DT?_compute_W?MAIN
000000                  208     ?_compute_W?BYTE:
000000                  209               n?246:   DS   2
000002                  210             ORG  2
000002                  211            W_re?247:   DS   3
000005                  212             ORG  5
000005                  213            W_im?248:   DS   3
000008                  214             ORG  8
000008                  215           log2n?251:   DS   2
                        216     
------                  217             RSEG  ?DT?_fft?MAIN
000000                  218     ?_fft?BYTE:
000000                  219               n?460:   DS   2
000002                  220             ORG  2
000002                  221            A_re?461:   DS   3
000005                  222             ORG  5
000005                  223            A_im?462:   DS   3
000008                  224             ORG  8
000008                  225            W_re?463:   DS   3
00000B                  226             ORG  11
00000B                  227            W_im?464:   DS   3
                        228     
------                  229             RSEG  ?DT?_permute_bitrev?MAIN
000000                  230     ?_permute_bitrev?BYTE:
000000                  231               n?352:   DS   2
000002                  232             ORG  2
000002                  233            A_re?353:   DS   3
000005                  234             ORG  5
000005                  235            A_im?354:   DS   3
                        236     
------                  237             RSEG  ?ID?_bitrev?MAIN
000000                  238               i?042:   DS   2
                        239     
------                  240             RSEG  ?ID?_bitrev?MAIN
000002                  241             rev?043:   DS   2
                        242     
------                  243             RSEG  ?ID?_log_2?MAIN
000000                  244             res?145:   DS   2
                        245     
------                  246             RSEG  ?ID?_compute_W?MAIN
000000                  247               i?249:   DS   2
                        248     
------                  249             RSEG  ?ID?_compute_W?MAIN
000002                  250              br?250:   DS   2
                        251     
------                  252             RSEG  ?ID?_permute_bitrev?MAIN
000000                  253               i?355:   DS   2
                        254     
------                  255             RSEG  ?ID?_permute_bitrev?MAIN
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     5

000002                  256             bri?356:   DS   2
                        257     
------                  258             RSEG  ?ID?_permute_bitrev?MAIN
000004                  259           log2n?357:   DS   2
                        260     
------                  261             RSEG  ?ID?_permute_bitrev?MAIN
000006                  262            t_re?358:   DS   2
                        263     
------                  264             RSEG  ?ID?_permute_bitrev?MAIN
000008                  265            t_im?359:   DS   2
                        266     
------                  267             RSEG  ?ID?_fft?MAIN
000000                  268            w_re?465:   DS   2
                        269     
------                  270             RSEG  ?ID?_fft?MAIN
000002                  271            w_im?466:   DS   2
                        272     
------                  273             RSEG  ?ID?_fft?MAIN
000004                  274            u_re?467:   DS   2
                        275     
------                  276             RSEG  ?ID?_fft?MAIN
000006                  277            u_im?468:   DS   2
                        278     
------                  279             RSEG  ?ID?_fft?MAIN
000008                  280            t_re?469:   DS   2
                        281     
------                  282             RSEG  ?ID?_fft?MAIN
00000A                  283            t_im?470:   DS   2
                        284     
------                  285             RSEG  ?ID?_fft?MAIN
00000C                  286               m?471:   DS   2
                        287     
------                  288             RSEG  ?ID?_fft?MAIN
00000E                  289               g?472:   DS   2
                        290     
------                  291             RSEG  ?ID?_fft?MAIN
000010                  292               b?473:   DS   2
                        293     
------                  294             RSEG  ?ID?_fft?MAIN
000012                  295              mt?474:   DS   2
                        296     
------                  297             RSEG  ?ID?_fft?MAIN
000014                  298               k?475:   DS   2
                        299     
------                  300             RSEG  ?ID?main?MAIN
000000                  301               n?576:   DS   2
                        302     
------                  303             RSEG  ?ID?main?MAIN
000002                  304            A_re?577:   DS   32
                        305     
------                  306             RSEG  ?ID?main?MAIN
000022                  307            A_im?578:   DS   32
                        308     
------                  309             RSEG  ?ID?main?MAIN
000042                  310            W_re?579:   DS   16
                        311     
------                  312             RSEG  ?ID?main?MAIN
000052                  313            W_im?580:   DS   16
                        314     ; /* gets no. of points from the user, initialize the points and roots of unity lookup t
                               able 
                        315     ;  * and lets fft go. finally bit-reverses the results and outputs them into a file. 
                        316     ;  * n should be a power of 2. 
                        317     ;  */
                        318     ; #include "Eco/reg24e1.h"
                        319     ; #include "Eco/eco_sys.h"
                        320     ; #include "utils/utils.h"
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     6

                        321     ; #include "serial/serial.h"
                        322     ; #include "isr/isr_rf.h"
                        323     ; #include "eeprom/eeprom.h"
                        324     ; //#include "eco_page.h"
                        325     ; #include "adc/adc.h"
                        326     ; 
                        327     ; #include <math.h>
                        328     ; 
                        329     ; /* treats inp as a numbits number and bitreverses it. 
                        330     ;  * inp < 2^(numbits) for meaningful bit-reversal
                        331     ;  */ 
                        332     ; int bitrev(int idata inp, int idata numbits)
                        333     
------                  334             RSEG  ?PR?_bitrev?MAIN
000000                  335     _bitrev:
                        336             USING   0
                        337                             ; SOURCE LINE # 19
000000 8C00       F     338             MOV     numbits?041,R4
000002 8D00       F     339             MOV     numbits?041+01H,R5
                        340     ;---- Variable 'inp?040' assigned to Register 'R2/R3' ----
000004 AB07             341             MOV     R3,AR7
000006 AA06             342             MOV     R2,AR6
                        343     ; {
                        344                             ; SOURCE LINE # 20
                        345     ;       int idata i;
                        346     ;       int idata rev=0;
                        347                             ; SOURCE LINE # 22
000008 E4               348             CLR     A
000009 7800       F     349             MOV     R0,#LOW (rev?043)
00000B F6               350             MOV     @R0,A
00000C 08               351             INC     R0
00000D F6               352             MOV     @R0,A
                        353     ;       for (i=0; i < numbits; i++)
                        354                             ; SOURCE LINE # 23
00000E 7800       F     355             MOV     R0,#LOW (i?042)
000010 F6               356             MOV     @R0,A
000011 08               357             INC     R0
000012 F6               358             MOV     @R0,A
000013                  359     ?C0001:
000013 C3               360             CLR     C
000014 7800       F     361             MOV     R0,#LOW (i?042+01H)
000016 E6               362             MOV     A,@R0
000017 9500       F     363             SUBB    A,numbits?041+01H
000019 E500       F     364             MOV     A,numbits?041
00001B 6480             365             XRL     A,#080H
00001D F5F0             366             MOV     B,A
00001F 18               367             DEC     R0
000020 E6               368             MOV     A,@R0
000021 6480             369             XRL     A,#080H
000023 95F0             370             SUBB    A,B
000025 5026             371             JNC     ?C0002
                        372     ;       {
                        373                             ; SOURCE LINE # 24
                        374     ;               rev = (rev << 1) | (inp & 1);
                        375                             ; SOURCE LINE # 25
000027 7800       F     376             MOV     R0,#LOW (rev?043+01H)
000029 E6               377             MOV     A,@R0
00002A 25E0             378             ADD     A,ACC
00002C FF               379             MOV     R7,A
00002D 18               380             DEC     R0
00002E E6               381             MOV     A,@R0
00002F 33               382             RLC     A
000030 FE               383             MOV     R6,A
000031 EB               384             MOV     A,R3
000032 5401             385             ANL     A,#01H
000034 FD               386             MOV     R5,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     7

000035 EE               387             MOV     A,R6
000036 F6               388             MOV     @R0,A
000037 EF               389             MOV     A,R7
000038 4D               390             ORL     A,R5
000039 08               391             INC     R0
00003A F6               392             MOV     @R0,A
                        393     ;               inp >>= 1;
                        394                             ; SOURCE LINE # 26
00003B EA               395             MOV     A,R2
00003C A2E7             396             MOV     C,ACC.7
00003E 13               397             RRC     A
00003F FA               398             MOV     R2,A
000040 EB               399             MOV     A,R3
000041 13               400             RRC     A
000042 FB               401             MOV     R3,A
                        402     ;       }
                        403                             ; SOURCE LINE # 27
000043 7800       F     404             MOV     R0,#LOW (i?042+01H)
000045 06               405             INC     @R0
000046 E6               406             MOV     A,@R0
000047 18               407             DEC     R0
000048 70C9             408             JNZ     ?C0001
00004A 06               409             INC     @R0
00004B                  410     ?C0031:
00004B 80C6             411             SJMP    ?C0001
00004D                  412     ?C0002:
                        413     ;       return rev;
                        414                             ; SOURCE LINE # 28
00004D 7800       F     415             MOV     R0,#LOW (rev?043)
00004F E6               416             MOV     A,@R0
000050 FE               417             MOV     R6,A
000051 08               418             INC     R0
000052 E6               419             MOV     A,@R0
000053 FF               420             MOV     R7,A
                        421     ; }
                        422                             ; SOURCE LINE # 29
000054                  423     ?C0004:
000054 22               424             RET     
                        425     ; END OF _bitrev
                        426     
                        427     ; 
                        428     ; 
                        429     ; /* returns log n (to the base 2), if n is positive and power of 2 */ 
                        430     ; int log_2(int idata n) 
                        431     
------                  432             RSEG  ?PR?_log_2?MAIN
000000                  433     _log_2:
                        434             USING   0
                        435                             ; SOURCE LINE # 33
                        436     ;---- Variable 'n?144' assigned to Register 'R6/R7' ----
                        437     ; {
                        438                             ; SOURCE LINE # 34
                        439     ;       int idata res; 
                        440     ;       for (res=0; n >= 2; res++) 
                        441                             ; SOURCE LINE # 36
000000 E4               442             CLR     A
000001 7800       F     443             MOV     R0,#LOW (res?145)
000003 F6               444             MOV     @R0,A
000004 08               445             INC     R0
000005 F6               446             MOV     @R0,A
000006                  447     ?C0005:
000006 C3               448             CLR     C
000007 EF               449             MOV     A,R7
000008 9402             450             SUBB    A,#02H
00000A EE               451             MOV     A,R6
00000B 6480             452             XRL     A,#080H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     8

00000D 9480             453             SUBB    A,#080H
00000F 4012             454             JC      ?C0006
                        455     ;               n = n >> 1; 
                        456                             ; SOURCE LINE # 37
000011 EE               457             MOV     A,R6
000012 A2E7             458             MOV     C,ACC.7
000014 13               459             RRC     A
000015 FE               460             MOV     R6,A
000016 EF               461             MOV     A,R7
000017 13               462             RRC     A
000018 FF               463             MOV     R7,A
000019 7800       F     464             MOV     R0,#LOW (res?145+01H)
00001B 06               465             INC     @R0
00001C E6               466             MOV     A,@R0
00001D 18               467             DEC     R0
00001E 70E6             468             JNZ     ?C0005
000020 06               469             INC     @R0
000021                  470     ?C0032:
000021 80E3             471             SJMP    ?C0005
000023                  472     ?C0006:
                        473     ;       return res; 
                        474                             ; SOURCE LINE # 38
000023 7800       F     475             MOV     R0,#LOW (res?145)
000025 E6               476             MOV     A,@R0
000026 FE               477             MOV     R6,A
000027 08               478             INC     R0
000028 E6               479             MOV     A,@R0
000029 FF               480             MOV     R7,A
                        481     ; }
                        482                             ; SOURCE LINE # 39
00002A                  483     ?C0008:
00002A 22               484             RET     
                        485     ; END OF _log_2
                        486     
                        487     ; 
                        488     ; 
                        489     ; 
                        490     ; /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
                        491     ;  * n should be a power of 2
                        492     ;  * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
                        493     ;  *       see that function for more details on why we treat 'i' as a (log2n-1) bit num
                               ber.
                        494     ;  */
                        495     ; void compute_W(int n, int W_re[], int W_im[])
                        496     
------                  497             RSEG  ?PR?_compute_W?MAIN
000000                  498     _compute_W:
                        499             USING   0
                        500                             ; SOURCE LINE # 48
000000 8E00       F     501             MOV     n?246,R6
000002 8F00       F     502             MOV     n?246+01H,R7
000004 8B00       F     503             MOV     W_re?247,R3
000006 8A00       F     504             MOV     W_re?247+01H,R2
000008 8900       F     505             MOV     W_re?247+02H,R1
                        506     ; {
                        507                             ; SOURCE LINE # 49
                        508     ;       int idata i;
                        509     ;       int idata br;
                        510     ;       int log2n = log_2(n);
                        511                             ; SOURCE LINE # 52
00000A 120000     F     512             LCALL   _log_2
00000D 8E00       F     513             MOV     log2n?251,R6
00000F 8F00       F     514             MOV     log2n?251+01H,R7
                        515     ; 
                        516     ;       for (i=0; i<(n/2); i++)
                        517                             ; SOURCE LINE # 54
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE     9

000011 E4               518             CLR     A
000012 7800       F     519             MOV     R0,#LOW (i?249)
000014 F6               520             MOV     @R0,A
000015 08               521             INC     R0
000016 F6               522             MOV     @R0,A
000017                  523     ?C0009:
000017 AE00       F     524             MOV     R6,n?246
000019 AF00       F     525             MOV     R7,n?246+01H
00001B 7C00             526             MOV     R4,#00H
00001D 7D02             527             MOV     R5,#02H
00001F 120000     E     528             LCALL   ?C?SIDIV
000022 AC06             529             MOV     R4,AR6
000024 AD07             530             MOV     R5,AR7
000026 7800       F     531             MOV     R0,#LOW (i?249)
000028 E6               532             MOV     A,@R0
000029 FE               533             MOV     R6,A
00002A 08               534             INC     R0
00002B E6               535             MOV     A,@R0
00002C FF               536             MOV     R7,A
00002D C3               537             CLR     C
00002E 9D               538             SUBB    A,R5
00002F EC               539             MOV     A,R4
000030 6480             540             XRL     A,#080H
000032 F8               541             MOV     R0,A
000033 EE               542             MOV     A,R6
000034 6480             543             XRL     A,#080H
000036 98               544             SUBB    A,R0
000037 4003             545             JC      $ + 5H
000039 020000     F     546             LJMP    ?C0012
                        547     ;       {
                        548                             ; SOURCE LINE # 55
                        549     ;               br = bitrev(i,log2n-1); 
                        550                             ; SOURCE LINE # 56
00003C E500       F     551             MOV     A,log2n?251+01H
00003E 24FF             552             ADD     A,#0FFH
000040 FD               553             MOV     R5,A
000041 E500       F     554             MOV     A,log2n?251
000043 34FF             555             ADDC    A,#0FFH
000045 FC               556             MOV     R4,A
000046 120000     F     557             LCALL   _bitrev
000049 7800       F     558             MOV     R0,#LOW (br?250)
00004B A606             559             MOV     @R0,AR6
00004D 08               560             INC     R0
00004E A607             561             MOV     @R0,AR7
                        562     ;               W_re[br] = cos((i*2*3)/(n));  
                        563                             ; SOURCE LINE # 57
000050 7800       F     564             MOV     R0,#LOW (i?249)
000052 E6               565             MOV     A,@R0
000053 FE               566             MOV     R6,A
000054 08               567             INC     R0
000055 E6               568             MOV     A,@R0
000056 FF               569             MOV     R7,A
000057 7C00             570             MOV     R4,#00H
000059 7D06             571             MOV     R5,#06H
00005B 120000     E     572             LCALL   ?C?IMUL
00005E AC00       F     573             MOV     R4,n?246
000060 AD00       F     574             MOV     R5,n?246+01H
000062 120000     E     575             LCALL   ?C?SIDIV
000065 AC06             576             MOV     R4,AR6
000067 AD07             577             MOV     R5,AR7
000069 EC               578             MOV     A,R4
00006A 120000     E     579             LCALL   ?C?FCASTI
00006D 120000     E     580             LCALL   _cos
000070 120000     E     581             LCALL   ?C?CASTF
000073 AD07             582             MOV     R5,AR7
000075 7800       F     583             MOV     R0,#LOW (br?250+01H)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    10

000077 E6               584             MOV     A,@R0
000078 25E0             585             ADD     A,ACC
00007A FF               586             MOV     R7,A
00007B 18               587             DEC     R0
00007C E6               588             MOV     A,@R0
00007D 33               589             RLC     A
00007E AB00       F     590             MOV     R3,W_re?247
000080 AA00       F     591             MOV     R2,W_re?247+01H
000082 A900       F     592             MOV     R1,W_re?247+02H
000084 8F82             593             MOV     DPL,R7
000086 F583             594             MOV     DPH,A
000088 EE               595             MOV     A,R6
000089 8DF0             596             MOV     B,R5
00008B 120000     E     597             LCALL   ?C?ISTOPTR
                        598     ;               W_im[br] = sin((i*2*3)/(n));  
                        599                             ; SOURCE LINE # 58
00008E 7800       F     600             MOV     R0,#LOW (i?249)
000090 E6               601             MOV     A,@R0
000091 FE               602             MOV     R6,A
000092 08               603             INC     R0
000093 E6               604             MOV     A,@R0
000094 FF               605             MOV     R7,A
000095 7C00             606             MOV     R4,#00H
000097 7D06             607             MOV     R5,#06H
000099 120000     E     608             LCALL   ?C?IMUL
00009C AC00       F     609             MOV     R4,n?246
00009E AD00       F     610             MOV     R5,n?246+01H
0000A0 120000     E     611             LCALL   ?C?SIDIV
0000A3 AC06             612             MOV     R4,AR6
0000A5 AD07             613             MOV     R5,AR7
0000A7 EC               614             MOV     A,R4
0000A8 120000     E     615             LCALL   ?C?FCASTI
0000AB 120000     E     616             LCALL   _sin
0000AE 120000     E     617             LCALL   ?C?CASTF
0000B1 AD07             618             MOV     R5,AR7
0000B3 7800       F     619             MOV     R0,#LOW (br?250+01H)
0000B5 E6               620             MOV     A,@R0
0000B6 25E0             621             ADD     A,ACC
0000B8 FF               622             MOV     R7,A
0000B9 18               623             DEC     R0
0000BA E6               624             MOV     A,@R0
0000BB 33               625             RLC     A
0000BC AB00       F     626             MOV     R3,W_im?248
0000BE AA00       F     627             MOV     R2,W_im?248+01H
0000C0 A900       F     628             MOV     R1,W_im?248+02H
0000C2 8F82             629             MOV     DPL,R7
0000C4 F583             630             MOV     DPH,A
0000C6 EE               631             MOV     A,R6
0000C7 8DF0             632             MOV     B,R5
0000C9 120000     E     633             LCALL   ?C?ISTOPTR
                        634     ;       }
                        635                             ; SOURCE LINE # 59
0000CC 7800       F     636             MOV     R0,#LOW (i?249+01H)
0000CE 06               637             INC     @R0
0000CF E6               638             MOV     A,@R0
0000D0 18               639             DEC     R0
0000D1 6003             640             JZ      $ + 5H
0000D3 020000     F     641             LJMP    ?C0009
0000D6 06               642             INC     @R0
0000D7                  643     ?C0033:
0000D7 020000     F     644             LJMP    ?C0009
                        645     ; #ifdef COMMENT_ONLY 
                        646     ;       for (i=0;i<(n/2);i++)
                        647     ;       { 
                        648     ;               br = i; //bitrev(i,log2n-1); 
                        649     ;               printf("(%g\t%g)\n", W_re[br], W_im[br]);
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    11

                        650     ;       }  
                        651     ; #endif 
                        652     ; }
                        653                             ; SOURCE LINE # 67
0000DA                  654     ?C0012:
0000DA 22               655             RET     
                        656     ; END OF _compute_W
                        657     
                        658     ; 
                        659     ; 
                        660     ; /* permutes the array using a bit-reversal permutation */ 
                        661     ; void permute_bitrev(int n, int *A_re, int *A_im) 
                        662     
------                  663             RSEG  ?PR?_permute_bitrev?MAIN
000000                  664     _permute_bitrev:
                        665             USING   0
                        666                             ; SOURCE LINE # 71
000000 8E00       F     667             MOV     n?352,R6
000002 8F00       F     668             MOV     n?352+01H,R7
000004 8B00       F     669             MOV     A_re?353,R3
000006 8A00       F     670             MOV     A_re?353+01H,R2
000008 8900       F     671             MOV     A_re?353+02H,R1
                        672     ; { 
                        673                             ; SOURCE LINE # 72
                        674     ;       int idata i;
                        675     ;       int idata bri;
                        676     ;       int idata log2n;
                        677     ;       int idata t_re;
                        678     ;       int idata t_im;
                        679     ; 
                        680     ;       log2n = log_2(n); 
                        681                             ; SOURCE LINE # 79
00000A 120000     F     682             LCALL   _log_2
00000D 7800       F     683             MOV     R0,#LOW (log2n?357)
00000F A606             684             MOV     @R0,AR6
000011 08               685             INC     R0
000012 A607             686             MOV     @R0,AR7
                        687     ; 
                        688     ;       for (i=0; i<n; i++)
                        689                             ; SOURCE LINE # 81
000014 E4               690             CLR     A
000015 7800       F     691             MOV     R0,#LOW (i?355)
000017 F6               692             MOV     @R0,A
000018 08               693             INC     R0
000019 F6               694             MOV     @R0,A
00001A                  695     ?C0013:
00001A 7800       F     696             MOV     R0,#LOW (i?355)
00001C E6               697             MOV     A,@R0
00001D FE               698             MOV     R6,A
00001E 08               699             INC     R0
00001F E6               700             MOV     A,@R0
000020 FF               701             MOV     R7,A
000021 C3               702             CLR     C
000022 9500       F     703             SUBB    A,n?352+01H
000024 E500       F     704             MOV     A,n?352
000026 6480             705             XRL     A,#080H
000028 F8               706             MOV     R0,A
000029 EE               707             MOV     A,R6
00002A 6480             708             XRL     A,#080H
00002C 98               709             SUBB    A,R0
00002D 4003             710             JC      $ + 5H
00002F 020000     F     711             LJMP    ?C0017
                        712     ;       {
                        713                             ; SOURCE LINE # 82
                        714     ;               bri = bitrev(i, log2n);
                        715                             ; SOURCE LINE # 83
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    12

000032 7800       F     716             MOV     R0,#LOW (log2n?357)
000034 E6               717             MOV     A,@R0
000035 FC               718             MOV     R4,A
000036 08               719             INC     R0
000037 E6               720             MOV     A,@R0
000038 FD               721             MOV     R5,A
000039 120000     F     722             LCALL   _bitrev
00003C 7800       F     723             MOV     R0,#LOW (bri?356)
00003E EE               724             MOV     A,R6
00003F F6               725             MOV     @R0,A
000040 08               726             INC     R0
000041 EF               727             MOV     A,R7
000042 F6               728             MOV     @R0,A
                        729     ; 
                        730     ;               /* skip already swapped elements */
                        731     ;               if (bri <= i) continue;
                        732                             ; SOURCE LINE # 86
000043 7800       F     733             MOV     R0,#LOW (i?355)
000045 E6               734             MOV     A,@R0
000046 FC               735             MOV     R4,A
000047 08               736             INC     R0
000048 E6               737             MOV     A,@R0
000049 FD               738             MOV     R5,A
00004A D3               739             SETB    C
00004B EF               740             MOV     A,R7
00004C 9D               741             SUBB    A,R5
00004D EC               742             MOV     A,R4
00004E 6480             743             XRL     A,#080H
000050 F8               744             MOV     R0,A
000051 EE               745             MOV     A,R6
000052 6480             746             XRL     A,#080H
000054 98               747             SUBB    A,R0
000055 5003             748             JNC     $ + 5H
000057 020000     F     749             LJMP    ?C0015
00005A                  750     ?C0016:
                        751     ; 
                        752     ;               t_re = A_re[i];
                        753                             ; SOURCE LINE # 88
00005A 7800       F     754             MOV     R0,#LOW (i?355+01H)
00005C E6               755             MOV     A,@R0
00005D 25E0             756             ADD     A,ACC
00005F FF               757             MOV     R7,A
000060 18               758             DEC     R0
000061 E6               759             MOV     A,@R0
000062 33               760             RLC     A
000063 FE               761             MOV     R6,A
000064 AB00       F     762             MOV     R3,A_re?353
000066 AA00       F     763             MOV     R2,A_re?353+01H
000068 A900       F     764             MOV     R1,A_re?353+02H
00006A 8F82             765             MOV     DPL,R7
00006C F583             766             MOV     DPH,A
00006E 120000     E     767             LCALL   ?C?ILDOPTR
000071 7800       F     768             MOV     R0,#LOW (t_re?358)
000073 A6F0             769             MOV     @R0,B
000075 08               770             INC     R0
000076 F6               771             MOV     @R0,A
                        772     ;               t_im = A_im[i];
                        773                             ; SOURCE LINE # 89
000077 AB00       F     774             MOV     R3,A_im?354
000079 AA00       F     775             MOV     R2,A_im?354+01H
00007B A900       F     776             MOV     R1,A_im?354+02H
00007D 8F82             777             MOV     DPL,R7
00007F 8E83             778             MOV     DPH,R6
000081 120000     E     779             LCALL   ?C?ILDOPTR
000084 7800       F     780             MOV     R0,#LOW (t_im?359)
000086 A6F0             781             MOV     @R0,B
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    13

000088 08               782             INC     R0
000089 F6               783             MOV     @R0,A
                        784     ;               A_re[i]= A_re[bri];
                        785                             ; SOURCE LINE # 90
00008A 7800       F     786             MOV     R0,#LOW (bri?356+01H)
00008C E6               787             MOV     A,@R0
00008D 25E0             788             ADD     A,ACC
00008F FF               789             MOV     R7,A
000090 18               790             DEC     R0
000091 E6               791             MOV     A,@R0
000092 33               792             RLC     A
000093 AB00       F     793             MOV     R3,A_re?353
000095 AA00       F     794             MOV     R2,A_re?353+01H
000097 A900       F     795             MOV     R1,A_re?353+02H
000099 8F82             796             MOV     DPL,R7
00009B F583             797             MOV     DPH,A
00009D 120000     E     798             LCALL   ?C?ILDOPTR
0000A0 FD               799             MOV     R5,A
0000A1 7800       F     800             MOV     R0,#LOW (i?355+01H)
0000A3 E6               801             MOV     A,@R0
0000A4 25E0             802             ADD     A,ACC
0000A6 FF               803             MOV     R7,A
0000A7 18               804             DEC     R0
0000A8 E6               805             MOV     A,@R0
0000A9 33               806             RLC     A
0000AA 8F82             807             MOV     DPL,R7
0000AC F583             808             MOV     DPH,A
0000AE E5F0             809             MOV     A,B
0000B0 8DF0             810             MOV     B,R5
0000B2 120000     E     811             LCALL   ?C?ISTOPTR
                        812     ;               A_im[i]= A_im[bri];
                        813                             ; SOURCE LINE # 91
0000B5 7800       F     814             MOV     R0,#LOW (bri?356+01H)
0000B7 E6               815             MOV     A,@R0
0000B8 25E0             816             ADD     A,ACC
0000BA FF               817             MOV     R7,A
0000BB 18               818             DEC     R0
0000BC E6               819             MOV     A,@R0
0000BD 33               820             RLC     A
0000BE AB00       F     821             MOV     R3,A_im?354
0000C0 AA00       F     822             MOV     R2,A_im?354+01H
0000C2 A900       F     823             MOV     R1,A_im?354+02H
0000C4 8F82             824             MOV     DPL,R7
0000C6 F583             825             MOV     DPH,A
0000C8 120000     E     826             LCALL   ?C?ILDOPTR
0000CB FD               827             MOV     R5,A
0000CC 7800       F     828             MOV     R0,#LOW (i?355+01H)
0000CE E6               829             MOV     A,@R0
0000CF 25E0             830             ADD     A,ACC
0000D1 FF               831             MOV     R7,A
0000D2 18               832             DEC     R0
0000D3 E6               833             MOV     A,@R0
0000D4 33               834             RLC     A
0000D5 8F82             835             MOV     DPL,R7
0000D7 F583             836             MOV     DPH,A
0000D9 E5F0             837             MOV     A,B
0000DB 8DF0             838             MOV     B,R5
0000DD 120000     E     839             LCALL   ?C?ISTOPTR
                        840     ;               A_re[bri]= t_re;
                        841                             ; SOURCE LINE # 92
0000E0 7800       F     842             MOV     R0,#LOW (t_re?358)
0000E2 E6               843             MOV     A,@R0
0000E3 FC               844             MOV     R4,A
0000E4 08               845             INC     R0
0000E5 E6               846             MOV     A,@R0
0000E6 FD               847             MOV     R5,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    14

0000E7 7800       F     848             MOV     R0,#LOW (bri?356+01H)
0000E9 E6               849             MOV     A,@R0
0000EA 25E0             850             ADD     A,ACC
0000EC FF               851             MOV     R7,A
0000ED 18               852             DEC     R0
0000EE E6               853             MOV     A,@R0
0000EF 33               854             RLC     A
0000F0 FE               855             MOV     R6,A
0000F1 AB00       F     856             MOV     R3,A_re?353
0000F3 AA00       F     857             MOV     R2,A_re?353+01H
0000F5 A900       F     858             MOV     R1,A_re?353+02H
0000F7 8F82             859             MOV     DPL,R7
0000F9 F583             860             MOV     DPH,A
0000FB EC               861             MOV     A,R4
0000FC 8DF0             862             MOV     B,R5
0000FE 120000     E     863             LCALL   ?C?ISTOPTR
                        864     ;               A_im[bri]= t_im;
                        865                             ; SOURCE LINE # 93
000101 7800       F     866             MOV     R0,#LOW (t_im?359)
000103 E6               867             MOV     A,@R0
000104 FD               868             MOV     R5,A
000105 08               869             INC     R0
000106 E6               870             MOV     A,@R0
000107 AB00       F     871             MOV     R3,A_im?354
000109 AA00       F     872             MOV     R2,A_im?354+01H
00010B A900       F     873             MOV     R1,A_im?354+02H
00010D 8F82             874             MOV     DPL,R7
00010F 8E83             875             MOV     DPH,R6
000111 CD               876             XCH     A,R5
000112 8DF0             877             MOV     B,R5
000114 120000     E     878             LCALL   ?C?ISTOPTR
                        879     ;       }  
                        880                             ; SOURCE LINE # 94
000117                  881     ?C0015:
000117 7800       F     882             MOV     R0,#LOW (i?355+01H)
000119 06               883             INC     @R0
00011A E6               884             MOV     A,@R0
00011B 18               885             DEC     R0
00011C 6003             886             JZ      $ + 5H
00011E 020000     F     887             LJMP    ?C0013
000121 06               888             INC     @R0
000122                  889     ?C0034:
000122 020000     F     890             LJMP    ?C0013
                        891     ; } 
                        892                             ; SOURCE LINE # 95
000125                  893     ?C0017:
000125 22               894             RET     
                        895     ; END OF _permute_bitrev
                        896     
                        897     ; 
                        898     ; 
                        899     ; /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-uni
                               ty lookup table
                        900     ;  * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth root
                               s of unity stored
                        901     ;  * in a permuted bitreversal order.
                        902     ;  *
                        903     ;  * FFT - Decimation In Time FFT with input array in correct order and output array in 
                               bit-reversed order.
                        904     ;  *
                        905     ;  * REQ: n should be a power of 2 to work. 
                        906     ;  *
                        907     ;  * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other deta
                               ils about VHALF section of the algo
                        908     ;  *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
                        909     ;  *       - See the foll. CS267 website for details of the Decimation In Time FFT imple
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    15

                               mented here.
                        910     ;  *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
                        911     ;  *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" boo
                               k for another variant of Iterative-FFT
                        912     ;  */
                        913     ; 
                        914     ; //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
                        915     ; void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 
                        916     
------                  917             RSEG  ?PR?_fft?MAIN
000000                  918     _fft:
                        919             USING   0
                        920                             ; SOURCE LINE # 114
000000 8E00       F     921             MOV     n?460,R6
000002 8F00       F     922             MOV     n?460+01H,R7
000004 8B00       F     923             MOV     A_re?461,R3
000006 8A00       F     924             MOV     A_re?461+01H,R2
000008 8900       F     925             MOV     A_re?461+02H,R1
                        926     ; {
                        927                             ; SOURCE LINE # 115
                        928     ;       int idata w_re, w_im, u_re, u_im, t_re, t_im;
                        929     ;       int idata m, g, b;
                        930     ;       //int i;
                        931     ;       int idata mt, k;
                        932     ; 
                        933     ;       /* for each stage */  
                        934     ;       for (m=n; m>=2; m=m>>1) 
                        935                             ; SOURCE LINE # 122
00000A 7800       F     936             MOV     R0,#LOW (m?471)
00000C A600       F     937             MOV     @R0,n?460
00000E 08               938             INC     R0
00000F A600       F     939             MOV     @R0,n?460+01H
000011                  940     ?C0018:
000011 7800       F     941             MOV     R0,#LOW (m?471)
000013 E6               942             MOV     A,@R0
000014 FE               943             MOV     R6,A
000015 08               944             INC     R0
000016 E6               945             MOV     A,@R0
000017 FF               946             MOV     R7,A
000018 C3               947             CLR     C
000019 9402             948             SUBB    A,#02H
00001B EE               949             MOV     A,R6
00001C 6480             950             XRL     A,#080H
00001E 9480             951             SUBB    A,#080H
000020 5003             952             JNC     $ + 5H
000022 020000     F     953             LJMP    ?C0027
                        954     ;       {
                        955                             ; SOURCE LINE # 123
                        956     ;               /* m = n/2^s; mt = m/2; */
                        957     ;               mt = m >> 1;
                        958                             ; SOURCE LINE # 125
000025 EE               959             MOV     A,R6
000026 A2E7             960             MOV     C,ACC.7
000028 13               961             RRC     A
000029 7900       F     962             MOV     R1,#LOW (mt?474)
00002B F7               963             MOV     @R1,A
00002C EF               964             MOV     A,R7
00002D 13               965             RRC     A
00002E 09               966             INC     R1
00002F F7               967             MOV     @R1,A
                        968     ; 
                        969     ;               /* for each group of butterfly */ 
                        970     ;               for (g=0,k=0; g<n; g+=m,k++) 
                        971                             ; SOURCE LINE # 128
000030 E4               972             CLR     A
000031 08               973             INC     R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    16

000032 F6               974             MOV     @R0,A
000033 08               975             INC     R0
000034 F6               976             MOV     @R0,A
000035 7800       F     977             MOV     R0,#LOW (k?475)
000037 F6               978             MOV     @R0,A
000038 08               979             INC     R0
000039 F6               980             MOV     @R0,A
00003A                  981     ?C0021:
00003A C3               982             CLR     C
00003B 7800       F     983             MOV     R0,#LOW (g?472+01H)
00003D E6               984             MOV     A,@R0
00003E 9500       F     985             SUBB    A,n?460+01H
000040 E500       F     986             MOV     A,n?460
000042 6480             987             XRL     A,#080H
000044 F5F0             988             MOV     B,A
000046 18               989             DEC     R0
000047 E6               990             MOV     A,@R0
000048 6480             991             XRL     A,#080H
00004A 95F0             992             SUBB    A,B
00004C 4003             993             JC      $ + 5H
00004E 020000     F     994             LJMP    ?C0020
                        995     ;               {
                        996                             ; SOURCE LINE # 129
                        997     ;                       /* each butterfly group uses only one root of unity. actually, i
                               t is the bitrev of this group's number k.
                        998     ;                        * BUT 'bitrev' it as a log2n-1 bit number because we are using 
                               a lookup array of nth root of unity and
                        999     ;                        * using cancellation lemma to scale nth root to n/2, n/4,... th
                                root.
                       1000     ;                        *
                       1001     ;                        * It turns out like the foll.
                       1002     ;                        *   w.re = W[bitrev(k, log2n-1)].re;
                       1003     ;                        *   w.im = W[bitrev(k, log2n-1)].im;
                       1004     ;                        * Still, we just use k, because the lookup array itself is bit-
                               reversal permuted. 
                       1005     ;                        */
                       1006     ;                       w_re = W_re[k];
                       1007                             ; SOURCE LINE # 139
000051 7800       F    1008             MOV     R0,#LOW (k?475+01H)
000053 E6              1009             MOV     A,@R0
000054 25E0            1010             ADD     A,ACC
000056 FF              1011             MOV     R7,A
000057 18              1012             DEC     R0
000058 E6              1013             MOV     A,@R0
000059 33              1014             RLC     A
00005A FE              1015             MOV     R6,A
00005B AB00       F    1016             MOV     R3,W_re?463
00005D AA00       F    1017             MOV     R2,W_re?463+01H
00005F A900       F    1018             MOV     R1,W_re?463+02H
000061 8F82            1019             MOV     DPL,R7
000063 F583            1020             MOV     DPH,A
000065 120000     E    1021             LCALL   ?C?ILDOPTR
000068 7800       F    1022             MOV     R0,#LOW (w_re?465)
00006A A6F0            1023             MOV     @R0,B
00006C 08              1024             INC     R0
00006D F6              1025             MOV     @R0,A
                       1026     ;                       w_im = W_im[k];
                       1027                             ; SOURCE LINE # 140
00006E AB00       F    1028             MOV     R3,W_im?464
000070 AA00       F    1029             MOV     R2,W_im?464+01H
000072 A900       F    1030             MOV     R1,W_im?464+02H
000074 8F82            1031             MOV     DPL,R7
000076 8E83            1032             MOV     DPH,R6
000078 120000     E    1033             LCALL   ?C?ILDOPTR
00007B 7800       F    1034             MOV     R0,#LOW (w_im?466)
00007D A6F0            1035             MOV     @R0,B
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    17

00007F 08              1036             INC     R0
000080 F6              1037             MOV     @R0,A
                       1038     ; 
                       1039     ;                       /* for each butterfly */ 
                       1040     ;                       for (b=g; b<(g+mt); b++) 
                       1041                             ; SOURCE LINE # 143
000081 7800       F    1042             MOV     R0,#LOW (g?472)
000083 E6              1043             MOV     A,@R0
000084 FE              1044             MOV     R6,A
000085 08              1045             INC     R0
000086 E6              1046             MOV     A,@R0
000087 FF              1047             MOV     R7,A
000088 08              1048             INC     R0
000089 A606            1049             MOV     @R0,AR6
00008B 08              1050             INC     R0
00008C A607            1051             MOV     @R0,AR7
00008E                 1052     ?C0024:
00008E 7900       F    1053             MOV     R1,#LOW (g?472+01H)
000090 E7              1054             MOV     A,@R1
000091 7800       F    1055             MOV     R0,#LOW (mt?474+01H)
000093 26              1056             ADD     A,@R0
000094 FF              1057             MOV     R7,A
000095 19              1058             DEC     R1
000096 E7              1059             MOV     A,@R1
000097 18              1060             DEC     R0
000098 36              1061             ADDC    A,@R0
000099 FE              1062             MOV     R6,A
00009A C3              1063             CLR     C
00009B 18              1064             DEC     R0
00009C E6              1065             MOV     A,@R0
00009D 9F              1066             SUBB    A,R7
00009E EE              1067             MOV     A,R6
00009F 6480            1068             XRL     A,#080H
0000A1 F5F0            1069             MOV     B,A
0000A3 18              1070             DEC     R0
0000A4 E6              1071             MOV     A,@R0
0000A5 6480            1072             XRL     A,#080H
0000A7 95F0            1073             SUBB    A,B
0000A9 4003            1074             JC      $ + 5H
0000AB 020000     F    1075             LJMP    ?C0023
                       1076     ;                       {
                       1077                             ; SOURCE LINE # 144
                       1078     ;                               /* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b],
                                A_im[b], A_re[b+mt], A_im[b+mt]);
                       1079     ;                                */ 
                       1080     ;                               //printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1081     ; 
                       1082     ;                               /* t = w * A[b+mt] */
                       1083     ;                               t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
                       1084                             ; SOURCE LINE # 150
0000AE 7900       F    1085             MOV     R1,#LOW (b?473+01H)
0000B0 E7              1086             MOV     A,@R1
0000B1 7800       F    1087             MOV     R0,#LOW (mt?474+01H)
0000B3 26              1088             ADD     A,@R0
0000B4 FF              1089             MOV     R7,A
0000B5 19              1090             DEC     R1
0000B6 E7              1091             MOV     A,@R1
0000B7 18              1092             DEC     R0
0000B8 36              1093             ADDC    A,@R0
0000B9 FE              1094             MOV     R6,A
0000BA EF              1095             MOV     A,R7
0000BB 25E0            1096             ADD     A,ACC
0000BD FF              1097             MOV     R7,A
0000BE EE              1098             MOV     A,R6
0000BF 33              1099             RLC     A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    18

0000C0 AB00       F    1100             MOV     R3,A_im?462
0000C2 AA00       F    1101             MOV     R2,A_im?462+01H
0000C4 A900       F    1102             MOV     R1,A_im?462+02H
0000C6 8F82            1103             MOV     DPL,R7
0000C8 F583            1104             MOV     DPH,A
0000CA 120000     E    1105             LCALL   ?C?ILDOPTR
0000CD FD              1106             MOV     R5,A
0000CE ACF0            1107             MOV     R4,B
0000D0 7800       F    1108             MOV     R0,#LOW (w_im?466)
0000D2 E6              1109             MOV     A,@R0
0000D3 FE              1110             MOV     R6,A
0000D4 08              1111             INC     R0
0000D5 E6              1112             MOV     A,@R0
0000D6 FF              1113             MOV     R7,A
0000D7 120000     E    1114             LCALL   ?C?IMUL
0000DA C006            1115             PUSH    AR6
0000DC C007            1116             PUSH    AR7
0000DE 7900       F    1117             MOV     R1,#LOW (b?473+01H)
0000E0 E7              1118             MOV     A,@R1
0000E1 7800       F    1119             MOV     R0,#LOW (mt?474+01H)
0000E3 26              1120             ADD     A,@R0
0000E4 FF              1121             MOV     R7,A
0000E5 19              1122             DEC     R1
0000E6 E7              1123             MOV     A,@R1
0000E7 18              1124             DEC     R0
0000E8 36              1125             ADDC    A,@R0
0000E9 FE              1126             MOV     R6,A
0000EA EF              1127             MOV     A,R7
0000EB 25E0            1128             ADD     A,ACC
0000ED FF              1129             MOV     R7,A
0000EE EE              1130             MOV     A,R6
0000EF 33              1131             RLC     A
0000F0 AB00       F    1132             MOV     R3,A_re?461
0000F2 AA00       F    1133             MOV     R2,A_re?461+01H
0000F4 A900       F    1134             MOV     R1,A_re?461+02H
0000F6 8F82            1135             MOV     DPL,R7
0000F8 F583            1136             MOV     DPH,A
0000FA 120000     E    1137             LCALL   ?C?ILDOPTR
0000FD FB              1138             MOV     R3,A
0000FE AAF0            1139             MOV     R2,B
000100 7800       F    1140             MOV     R0,#LOW (w_re?465)
000102 E6              1141             MOV     A,@R0
000103 FE              1142             MOV     R6,A
000104 08              1143             INC     R0
000105 E6              1144             MOV     A,@R0
000106 FF              1145             MOV     R7,A
000107 AD03            1146             MOV     R5,AR3
000109 AC02            1147             MOV     R4,AR2
00010B 120000     E    1148             LCALL   ?C?IMUL
00010E AC06            1149             MOV     R4,AR6
000110 AD07            1150             MOV     R5,AR7
000112 D007            1151             POP     AR7
000114 D006            1152             POP     AR6
000116 C3              1153             CLR     C
000117 ED              1154             MOV     A,R5
000118 9F              1155             SUBB    A,R7
000119 7800       F    1156             MOV     R0,#LOW (t_re?469+01H)
00011B F6              1157             MOV     @R0,A
00011C EC              1158             MOV     A,R4
00011D 9E              1159             SUBB    A,R6
00011E 18              1160             DEC     R0
00011F F6              1161             MOV     @R0,A
                       1162     ;                               t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
                       1163                             ; SOURCE LINE # 151
000120 7800       F    1164             MOV     R0,#LOW (w_im?466)
000122 E6              1165             MOV     A,@R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    19

000123 FE              1166             MOV     R6,A
000124 08              1167             INC     R0
000125 E6              1168             MOV     A,@R0
000126 FF              1169             MOV     R7,A
000127 AD03            1170             MOV     R5,AR3
000129 AC02            1171             MOV     R4,AR2
00012B 120000     E    1172             LCALL   ?C?IMUL
00012E C006            1173             PUSH    AR6
000130 C007            1174             PUSH    AR7
000132 7900       F    1175             MOV     R1,#LOW (b?473+01H)
000134 E7              1176             MOV     A,@R1
000135 7800       F    1177             MOV     R0,#LOW (mt?474+01H)
000137 26              1178             ADD     A,@R0
000138 FF              1179             MOV     R7,A
000139 19              1180             DEC     R1
00013A E7              1181             MOV     A,@R1
00013B 18              1182             DEC     R0
00013C 36              1183             ADDC    A,@R0
00013D FE              1184             MOV     R6,A
00013E EF              1185             MOV     A,R7
00013F 25E0            1186             ADD     A,ACC
000141 FF              1187             MOV     R7,A
000142 EE              1188             MOV     A,R6
000143 33              1189             RLC     A
000144 AB00       F    1190             MOV     R3,A_im?462
000146 AA00       F    1191             MOV     R2,A_im?462+01H
000148 A900       F    1192             MOV     R1,A_im?462+02H
00014A 8F82            1193             MOV     DPL,R7
00014C F583            1194             MOV     DPH,A
00014E 120000     E    1195             LCALL   ?C?ILDOPTR
000151 FD              1196             MOV     R5,A
000152 ACF0            1197             MOV     R4,B
000154 7800       F    1198             MOV     R0,#LOW (w_re?465)
000156 E6              1199             MOV     A,@R0
000157 FE              1200             MOV     R6,A
000158 08              1201             INC     R0
000159 E6              1202             MOV     A,@R0
00015A FF              1203             MOV     R7,A
00015B 120000     E    1204             LCALL   ?C?IMUL
00015E D0E0            1205             POP     ACC
000160 2F              1206             ADD     A,R7
000161 7800       F    1207             MOV     R0,#LOW (t_im?470+01H)
000163 F6              1208             MOV     @R0,A
000164 D0E0            1209             POP     ACC
000166 3E              1210             ADDC    A,R6
000167 18              1211             DEC     R0
000168 F6              1212             MOV     @R0,A
                       1213     ; 
                       1214     ;                               /* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
                       1215     ;                               u_re = A_re[b];
                       1216                             ; SOURCE LINE # 154
000169 7800       F    1217             MOV     R0,#LOW (b?473+01H)
00016B E6              1218             MOV     A,@R0
00016C 25E0            1219             ADD     A,ACC
00016E FF              1220             MOV     R7,A
00016F 18              1221             DEC     R0
000170 E6              1222             MOV     A,@R0
000171 33              1223             RLC     A
000172 FE              1224             MOV     R6,A
000173 AB00       F    1225             MOV     R3,A_re?461
000175 AA00       F    1226             MOV     R2,A_re?461+01H
000177 A900       F    1227             MOV     R1,A_re?461+02H
000179 8F82            1228             MOV     DPL,R7
00017B F583            1229             MOV     DPH,A
00017D 120000     E    1230             LCALL   ?C?ILDOPTR
000180 7800       F    1231             MOV     R0,#LOW (u_re?467)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    20

000182 A6F0            1232             MOV     @R0,B
000184 08              1233             INC     R0
000185 F6              1234             MOV     @R0,A
                       1235     ;                               u_im = A_im[b];
                       1236                             ; SOURCE LINE # 155
000186 AB00       F    1237             MOV     R3,A_im?462
000188 AA00       F    1238             MOV     R2,A_im?462+01H
00018A A900       F    1239             MOV     R1,A_im?462+02H
00018C 8F82            1240             MOV     DPL,R7
00018E 8E83            1241             MOV     DPH,R6
000190 120000     E    1242             LCALL   ?C?ILDOPTR
000193 7800       F    1243             MOV     R0,#LOW (u_im?468)
000195 A6F0            1244             MOV     @R0,B
000197 08              1245             INC     R0
000198 F6              1246             MOV     @R0,A
                       1247     ;                               A_re[b] = u_re + t_re;
                       1248                             ; SOURCE LINE # 156
000199 7900       F    1249             MOV     R1,#LOW (u_re?467+01H)
00019B E7              1250             MOV     A,@R1
00019C 7800       F    1251             MOV     R0,#LOW (t_re?469+01H)
00019E 26              1252             ADD     A,@R0
00019F FD              1253             MOV     R5,A
0001A0 19              1254             DEC     R1
0001A1 E7              1255             MOV     A,@R1
0001A2 18              1256             DEC     R0
0001A3 36              1257             ADDC    A,@R0
0001A4 FC              1258             MOV     R4,A
0001A5 7800       F    1259             MOV     R0,#LOW (b?473+01H)
0001A7 E6              1260             MOV     A,@R0
0001A8 25E0            1261             ADD     A,ACC
0001AA FF              1262             MOV     R7,A
0001AB 18              1263             DEC     R0
0001AC E6              1264             MOV     A,@R0
0001AD 33              1265             RLC     A
0001AE AB00       F    1266             MOV     R3,A_re?461
0001B0 AA00       F    1267             MOV     R2,A_re?461+01H
0001B2 A900       F    1268             MOV     R1,A_re?461+02H
0001B4 8F82            1269             MOV     DPL,R7
0001B6 F583            1270             MOV     DPH,A
0001B8 EC              1271             MOV     A,R4
0001B9 8DF0            1272             MOV     B,R5
0001BB 120000     E    1273             LCALL   ?C?ISTOPTR
                       1274     ;                               A_im[b] = u_im + t_im;
                       1275                             ; SOURCE LINE # 157
0001BE 7900       F    1276             MOV     R1,#LOW (u_im?468+01H)
0001C0 E7              1277             MOV     A,@R1
0001C1 7800       F    1278             MOV     R0,#LOW (t_im?470+01H)
0001C3 26              1279             ADD     A,@R0
0001C4 FD              1280             MOV     R5,A
0001C5 19              1281             DEC     R1
0001C6 E7              1282             MOV     A,@R1
0001C7 18              1283             DEC     R0
0001C8 36              1284             ADDC    A,@R0
0001C9 FC              1285             MOV     R4,A
0001CA 7800       F    1286             MOV     R0,#LOW (b?473+01H)
0001CC E6              1287             MOV     A,@R0
0001CD 25E0            1288             ADD     A,ACC
0001CF FF              1289             MOV     R7,A
0001D0 18              1290             DEC     R0
0001D1 E6              1291             MOV     A,@R0
0001D2 33              1292             RLC     A
0001D3 AB00       F    1293             MOV     R3,A_im?462
0001D5 AA00       F    1294             MOV     R2,A_im?462+01H
0001D7 A900       F    1295             MOV     R1,A_im?462+02H
0001D9 8F82            1296             MOV     DPL,R7
0001DB F583            1297             MOV     DPH,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    21

0001DD EC              1298             MOV     A,R4
0001DE 8DF0            1299             MOV     B,R5
0001E0 120000     E    1300             LCALL   ?C?ISTOPTR
                       1301     ;                               A_re[b+mt] = u_re - t_re;
                       1302                             ; SOURCE LINE # 158
0001E3 C3              1303             CLR     C
0001E4 7900       F    1304             MOV     R1,#LOW (u_re?467+01H)
0001E6 E7              1305             MOV     A,@R1
0001E7 7800       F    1306             MOV     R0,#LOW (t_re?469+01H)
0001E9 96              1307             SUBB    A,@R0
0001EA FD              1308             MOV     R5,A
0001EB 19              1309             DEC     R1
0001EC E7              1310             MOV     A,@R1
0001ED 18              1311             DEC     R0
0001EE 96              1312             SUBB    A,@R0
0001EF FC              1313             MOV     R4,A
0001F0 7900       F    1314             MOV     R1,#LOW (b?473+01H)
0001F2 E7              1315             MOV     A,@R1
0001F3 7800       F    1316             MOV     R0,#LOW (mt?474+01H)
0001F5 26              1317             ADD     A,@R0
0001F6 FF              1318             MOV     R7,A
0001F7 19              1319             DEC     R1
0001F8 E7              1320             MOV     A,@R1
0001F9 18              1321             DEC     R0
0001FA 36              1322             ADDC    A,@R0
0001FB FE              1323             MOV     R6,A
0001FC EF              1324             MOV     A,R7
0001FD 25E0            1325             ADD     A,ACC
0001FF FF              1326             MOV     R7,A
000200 EE              1327             MOV     A,R6
000201 33              1328             RLC     A
000202 AB00       F    1329             MOV     R3,A_re?461
000204 AA00       F    1330             MOV     R2,A_re?461+01H
000206 A900       F    1331             MOV     R1,A_re?461+02H
000208 8F82            1332             MOV     DPL,R7
00020A F583            1333             MOV     DPH,A
00020C EC              1334             MOV     A,R4
00020D 8DF0            1335             MOV     B,R5
00020F 120000     E    1336             LCALL   ?C?ISTOPTR
                       1337     ;                               A_im[b+mt] = u_im - t_im;
                       1338                             ; SOURCE LINE # 159
000212 C3              1339             CLR     C
000213 7900       F    1340             MOV     R1,#LOW (u_im?468+01H)
000215 E7              1341             MOV     A,@R1
000216 7800       F    1342             MOV     R0,#LOW (t_im?470+01H)
000218 96              1343             SUBB    A,@R0
000219 FD              1344             MOV     R5,A
00021A 19              1345             DEC     R1
00021B E7              1346             MOV     A,@R1
00021C 18              1347             DEC     R0
00021D 96              1348             SUBB    A,@R0
00021E FC              1349             MOV     R4,A
00021F 7900       F    1350             MOV     R1,#LOW (b?473+01H)
000221 E7              1351             MOV     A,@R1
000222 7800       F    1352             MOV     R0,#LOW (mt?474+01H)
000224 26              1353             ADD     A,@R0
000225 FF              1354             MOV     R7,A
000226 19              1355             DEC     R1
000227 E7              1356             MOV     A,@R1
000228 18              1357             DEC     R0
000229 36              1358             ADDC    A,@R0
00022A FE              1359             MOV     R6,A
00022B EF              1360             MOV     A,R7
00022C 25E0            1361             ADD     A,ACC
00022E FF              1362             MOV     R7,A
00022F EE              1363             MOV     A,R6
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    22

000230 33              1364             RLC     A
000231 AB00       F    1365             MOV     R3,A_im?462
000233 AA00       F    1366             MOV     R2,A_im?462+01H
000235 A900       F    1367             MOV     R1,A_im?462+02H
000237 8F82            1368             MOV     DPL,R7
000239 F583            1369             MOV     DPH,A
00023B EC              1370             MOV     A,R4
00023C 8DF0            1371             MOV     B,R5
00023E 120000     E    1372             LCALL   ?C?ISTOPTR
                       1373     ; 
                       1374     ;                               /*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b]
                               , A_im[b], A_re[b+mt], A_im[b+mt]);
                       1375     ;                                */         
                       1376     ;                               //printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1377     ;                       }
                       1378                             ; SOURCE LINE # 164
000241 7800       F    1379             MOV     R0,#LOW (b?473+01H)
000243 06              1380             INC     @R0
000244 E6              1381             MOV     A,@R0
000245 18              1382             DEC     R0
000246 7001            1383             JNZ     ?C0035
000248 06              1384             INC     @R0
000249                 1385     ?C0035:
000249 020000     F    1386             LJMP    ?C0024
                       1387     ;               }
                       1388                             ; SOURCE LINE # 165
00024C                 1389     ?C0023:
00024C 7800       F    1390             MOV     R0,#LOW (m?471)
00024E E6              1391             MOV     A,@R0
00024F FE              1392             MOV     R6,A
000250 08              1393             INC     R0
000251 E6              1394             MOV     A,@R0
000252 7800       F    1395             MOV     R0,#LOW (g?472+01H)
000254 26              1396             ADD     A,@R0
000255 F6              1397             MOV     @R0,A
000256 18              1398             DEC     R0
000257 EE              1399             MOV     A,R6
000258 36              1400             ADDC    A,@R0
000259 F6              1401             MOV     @R0,A
00025A 7800       F    1402             MOV     R0,#LOW (k?475+01H)
00025C 06              1403             INC     @R0
00025D E6              1404             MOV     A,@R0
00025E 18              1405             DEC     R0
00025F 6003            1406             JZ      $ + 5H
000261 020000     F    1407             LJMP    ?C0021
000264 06              1408             INC     @R0
000265                 1409     ?C0036:
000265 020000     F    1410             LJMP    ?C0021
                       1411     ;       }
                       1412                             ; SOURCE LINE # 166
000268                 1413     ?C0020:
000268 7800       F    1414             MOV     R0,#LOW (m?471)
00026A E6              1415             MOV     A,@R0
00026B A2E7            1416             MOV     C,ACC.7
00026D 13              1417             RRC     A
00026E 7900       F    1418             MOV     R1,#LOW (m?471)
000270 F7              1419             MOV     @R1,A
000271 08              1420             INC     R0
000272 E6              1421             MOV     A,@R0
000273 13              1422             RRC     A
000274 09              1423             INC     R1
000275 F7              1424             MOV     @R1,A
000276 020000     F    1425             LJMP    ?C0018
                       1426     ; }
                       1427                             ; SOURCE LINE # 167
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    23

000279                 1428     ?C0027:
000279 22              1429             RET     
                       1430     ; END OF _fft
                       1431     
                       1432     ; 
                       1433     ; int main()
                       1434     
------                 1435             RSEG  ?PR?main?MAIN
000000                 1436     main:
                       1437             USING   0
                       1438                             ; SOURCE LINE # 169
                       1439     ; {
                       1440                             ; SOURCE LINE # 170
                       1441     ;       int idata n;
                       1442     ;       //int idata i;
                       1443     ;       //int idata A_re[8];
                       1444     ;       //int idata A_im[8];
                       1445     ;       //int idata W_re[4];
                       1446     ;       //int idata W_im[4]; 
                       1447     ;       int idata A_re[16];
                       1448     ;       int idata A_im[16];
                       1449     ;       int idata W_re[8];
                       1450     ;       int idata W_im[8]; 
                       1451     ; 
                       1452     ;       n = 16;
                       1453                             ; SOURCE LINE # 182
000000 7800       F    1454             MOV     R0,#LOW (n?576)
000002 7600            1455             MOV     @R0,#00H
000004 08              1456             INC     R0
000005 7610            1457             MOV     @R0,#010H
                       1458     ;       
                       1459     ;       store_cpu_rate(16);
                       1460                             ; SOURCE LINE # 184
000007 7F10            1461             MOV     R7,#010H
000009 7E00            1462             MOV     R6,#00H
00000B 120000     E    1463             LCALL   _store_cpu_rate
                       1464     ; 
                       1465     ;       P0_DIR &= ~0x28;
                       1466                             ; SOURCE LINE # 186
00000E 5394D7          1467             ANL     P0_DIR,#0D7H
                       1468     ;       P0_ALT &= ~0x28;
                       1469                             ; SOURCE LINE # 187
000011 5395D7          1470             ANL     P0_ALT,#0D7H
000014                 1471     ?C0028:
                       1472     ; 
                       1473     ;       //A_re = (double*)malloc(sizeof(double)*n); 
                       1474     ;       //A_im = (double*)malloc(sizeof(double)*n); 
                       1475     ;       //W_re = (double*)malloc(sizeof(double)*n/2); 
                       1476     ;       //W_im = (double*)malloc(sizeof(double)*n/2); 
                       1477     ;       //assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
                       1478     ;       
                       1479     ;       while(1)
                       1480                             ; SOURCE LINE # 195
                       1481     ;       {
                       1482                             ; SOURCE LINE # 196
                       1483     ;       //for (i=0; i<3; i++) {
                       1484     ;               //init_array(n, A_re, A_im); 
                       1485     ;               compute_W(n, W_re, W_im); 
                       1486                             ; SOURCE LINE # 199
000014 7800       F    1487             MOV     R0,#LOW (n?576)
000016 E6              1488             MOV     A,@R0
000017 FE              1489             MOV     R6,A
000018 08              1490             INC     R0
000019 E6              1491             MOV     A,@R0
00001A FF              1492             MOV     R7,A
00001B 750000     F    1493             MOV     ?_compute_W?BYTE+05H,#00H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    24

00001E 750000     F    1494             MOV     ?_compute_W?BYTE+06H,#HIGH (W_im?580)
000021 750000     F    1495             MOV     ?_compute_W?BYTE+07H,#LOW (W_im?580)
000024 7B00            1496             MOV     R3,#00H
000026 7A00       F    1497             MOV     R2,#HIGH (W_re?579)
000028 7900       F    1498             MOV     R1,#LOW (W_re?579)
00002A 120000     F    1499             LCALL   _compute_W
                       1500     ;               fft(n, A_re, A_im, W_re, W_im);
                       1501                             ; SOURCE LINE # 200
00002D 7800       F    1502             MOV     R0,#LOW (n?576)
00002F E6              1503             MOV     A,@R0
000030 FE              1504             MOV     R6,A
000031 08              1505             INC     R0
000032 E6              1506             MOV     A,@R0
000033 FF              1507             MOV     R7,A
000034 750000     F    1508             MOV     ?_fft?BYTE+05H,#00H
000037 750000     F    1509             MOV     ?_fft?BYTE+06H,#HIGH (A_im?578)
00003A 750000     F    1510             MOV     ?_fft?BYTE+07H,#LOW (A_im?578)
00003D 750000     F    1511             MOV     ?_fft?BYTE+08H,#00H
000040 750000     F    1512             MOV     ?_fft?BYTE+09H,#HIGH (W_re?579)
000043 750000     F    1513             MOV     ?_fft?BYTE+0AH,#LOW (W_re?579)
000046 750000     F    1514             MOV     ?_fft?BYTE+0BH,#00H
000049 750000     F    1515             MOV     ?_fft?BYTE+0CH,#HIGH (W_im?580)
00004C 750000     F    1516             MOV     ?_fft?BYTE+0DH,#LOW (W_im?580)
00004F 7B00            1517             MOV     R3,#00H
000051 7A00       F    1518             MOV     R2,#HIGH (A_re?577)
000053 7900       F    1519             MOV     R1,#LOW (A_re?577)
000055 120000     F    1520             LCALL   _fft
                       1521     ;               permute_bitrev(n, A_re, A_im);        
                       1522                             ; SOURCE LINE # 201
000058 7800       F    1523             MOV     R0,#LOW (n?576)
00005A E6              1524             MOV     A,@R0
00005B FE              1525             MOV     R6,A
00005C 08              1526             INC     R0
00005D E6              1527             MOV     A,@R0
00005E FF              1528             MOV     R7,A
00005F 750000     F    1529             MOV     ?_permute_bitrev?BYTE+05H,#00H
000062 750000     F    1530             MOV     ?_permute_bitrev?BYTE+06H,#HIGH (A_im?578)
000065 750000     F    1531             MOV     ?_permute_bitrev?BYTE+07H,#LOW (A_im?578)
000068 7B00            1532             MOV     R3,#00H
00006A 7A00       F    1533             MOV     R2,#HIGH (A_re?577)
00006C 7900       F    1534             MOV     R1,#LOW (A_re?577)
00006E 120000     F    1535             LCALL   _permute_bitrev
                       1536     ;               //output_array(n, A_re, A_im, argv[2]);  
                       1537     ;               //print_string("done");
                       1538     ;       //}
                       1539     ;       }
                       1540                             ; SOURCE LINE # 205
000071 80A1            1541             SJMP    ?C0028
                       1542     ; END OF main
                       1543     
                       1544             END
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    25

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                   T Y P E  V A L U E     ATTRIBUTES

?_BITREV?BYTE. . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
?_COMPUTE_W?BYTE . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
?_FFT?BYTE . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
?_PERMUTE_BITREV?BYTE. . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
?C0001 . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?_BITREV?MAIN
?C0002 . . . . . . . . . . . . . . . .    C  ADDR  004DH     R   SEG=?PR?_BITREV?MAIN
?C0004 . . . . . . . . . . . . . . . .    C  ADDR  0054H     R   SEG=?PR?_BITREV?MAIN
?C0005 . . . . . . . . . . . . . . . .    C  ADDR  0006H     R   SEG=?PR?_LOG_2?MAIN
?C0006 . . . . . . . . . . . . . . . .    C  ADDR  0023H     R   SEG=?PR?_LOG_2?MAIN
?C0008 . . . . . . . . . . . . . . . .    C  ADDR  002AH     R   SEG=?PR?_LOG_2?MAIN
?C0009 . . . . . . . . . . . . . . . .    C  ADDR  0017H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0012 . . . . . . . . . . . . . . . .    C  ADDR  00DAH     R   SEG=?PR?_COMPUTE_W?MAIN
?C0013 . . . . . . . . . . . . . . . .    C  ADDR  001AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0015 . . . . . . . . . . . . . . . .    C  ADDR  0117H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0016 . . . . . . . . . . . . . . . .    C  ADDR  005AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0017 . . . . . . . . . . . . . . . .    C  ADDR  0125H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0018 . . . . . . . . . . . . . . . .    C  ADDR  0011H     R   SEG=?PR?_FFT?MAIN
?C0020 . . . . . . . . . . . . . . . .    C  ADDR  0268H     R   SEG=?PR?_FFT?MAIN
?C0021 . . . . . . . . . . . . . . . .    C  ADDR  003AH     R   SEG=?PR?_FFT?MAIN
?C0023 . . . . . . . . . . . . . . . .    C  ADDR  024CH     R   SEG=?PR?_FFT?MAIN
?C0024 . . . . . . . . . . . . . . . .    C  ADDR  008EH     R   SEG=?PR?_FFT?MAIN
?C0027 . . . . . . . . . . . . . . . .    C  ADDR  0279H     R   SEG=?PR?_FFT?MAIN
?C0028 . . . . . . . . . . . . . . . .    C  ADDR  0014H     R   SEG=?PR?MAIN?MAIN
?C0031 . . . . . . . . . . . . . . . .    C  ADDR  004BH     R   SEG=?PR?_BITREV?MAIN
?C0032 . . . . . . . . . . . . . . . .    C  ADDR  0021H     R   SEG=?PR?_LOG_2?MAIN
?C0033 . . . . . . . . . . . . . . . .    C  ADDR  00D7H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0034 . . . . . . . . . . . . . . . .    C  ADDR  0122H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0035 . . . . . . . . . . . . . . . .    C  ADDR  0249H     R   SEG=?PR?_FFT?MAIN
?C0036 . . . . . . . . . . . . . . . .    C  ADDR  0265H     R   SEG=?PR?_FFT?MAIN
?C?CASTF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?FCASTI. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDOPTR . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IMUL. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTOPTR . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?SIDIV . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C_STARTUP . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?DT?_BITREV?MAIN . . . . . . . . . . .    D  SEG   000002H       REL=UNIT, ALN=BYTE
?DT?_COMPUTE_W?MAIN. . . . . . . . . .    D  SEG   00000AH       REL=UNIT, ALN=BYTE
?DT?_FFT?MAIN. . . . . . . . . . . . .    D  SEG   00000EH       REL=UNIT, ALN=BYTE
?DT?_PERMUTE_BITREV?MAIN . . . . . . .    D  SEG   000008H       REL=UNIT, ALN=BYTE
?ID?_BITREV?MAIN . . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_COMPUTE_W?MAIN. . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_FFT?MAIN. . . . . . . . . . . . .    I  SEG   000016H       REL=UNIT, ALN=BYTE
?ID?_LOG_2?MAIN. . . . . . . . . . . .    I  SEG   000002H       REL=UNIT, ALN=BYTE
?ID?_PERMUTE_BITREV?MAIN . . . . . . .    I  SEG   00000AH       REL=UNIT, ALN=BYTE
?ID?MAIN?MAIN. . . . . . . . . . . . .    I  SEG   000062H       REL=UNIT, ALN=BYTE
?PR?_BITREV?MAIN . . . . . . . . . . .    C  SEG   000055H       REL=UNIT, ALN=BYTE
?PR?_COMPUTE_W?MAIN. . . . . . . . . .    C  SEG   0000DBH       REL=UNIT, ALN=BYTE
?PR?_FFT?MAIN. . . . . . . . . . . . .    C  SEG   00027AH       REL=UNIT, ALN=BYTE
?PR?_LOG_2?MAIN. . . . . . . . . . . .    C  SEG   00002BH       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV?MAIN . . . . . . .    C  SEG   000126H       REL=UNIT, ALN=BYTE
?PR?MAIN?MAIN. . . . . . . . . . . . .    C  SEG   000073H       REL=UNIT, ALN=BYTE
_BITREV. . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_BITREV?MAIN
_COMPUTE_W . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_COMPUTE_W?MAIN
_COS . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_FFT . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT?MAIN
_LOG_2 . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_LOG_2?MAIN
_PERMUTE_BITREV. . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
_SIN . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_STORE_CPU_RATE. . . . . . . . . . . .    C  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    26

A_IM?354 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_IM?462 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_FFT?MAIN
A_IM?578 . . . . . . . . . . . . . . .    I  ADDR  0022H     R   SEG=?ID?MAIN?MAIN
A_RE?353 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_RE?461 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_FFT?MAIN
A_RE?577 . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?MAIN?MAIN
AC . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC. . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ADCCON . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
ADCDATAH . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
ADCDATAL . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
ADCSTATIC. . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
AR2. . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3. . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR6. . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7. . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
B. . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
B?473. . . . . . . . . . . . . . . . .    I  ADDR  0010H     R   SEG=?ID?_FFT?MAIN
BR?250 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_COMPUTE_W?MAIN
BRI?356. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
C_T2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CE . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
CK_CTRL. . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
CKCON. . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CLK1 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
CLK2 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
CP_RL2 . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CPRL2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CS . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
CT2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DATA?. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
DEV_OFFSET . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
DIN0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
DIO0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
DIO1 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
DIO2 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
DIO3 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
DIO4 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
DIO5 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
DIO6 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
DIO7 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
DIO8 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
DIO9 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
DOUT2. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
DPH. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0 . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1 . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0 . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1 . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS. . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DR1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
DR2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
DR2_CE . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
EA . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EICON. . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
EIE. . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIP. . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
ES . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ET0. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EX0. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    27

EX2. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EX3. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EX4. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EX5. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EXEN2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
EXIF . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
F0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
G?472. . . . . . . . . . . . . . . . .    I  ADDR  000EH     R   SEG=?ID?_FFT?MAIN
I?042. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_BITREV?MAIN
I?249. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_COMPUTE_W?MAIN
I?355. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
IE . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0_N . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
INT1_N . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
IP . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
K?475. . . . . . . . . . . . . . . . .    I  ADDR  0014H     R   SEG=?ID?_FFT?MAIN
LOG2N?251. . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_COMPUTE_W?MAIN
LOG2N?357. . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
M?471. . . . . . . . . . . . . . . . .    I  ADDR  000CH     R   SEG=?ID?_FFT?MAIN
MAIN . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?MAIN?MAIN
MPAGE. . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
MT?474 . . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?_FFT?MAIN
N?246. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
N?352. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
N?460. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
N?576. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?MAIN?MAIN
NUMBITS?041. . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
OV . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
P. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0 . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P0_ALT . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
P0_DIR . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
P1 . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_ALT . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
P1_DIR . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
PCON . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PS . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PSW. . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PWM. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
PWMCON . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
PWMDUTY. . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
PWR_UP . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
PX0. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
PX2. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    28

PX3. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PX4. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PX5. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
RADIO. . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
RB8. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RCAP2H . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RCAP2L . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RCLK . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
REGX_CTRL. . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
REGX_LSB . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
REGX_MSB . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
REN. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
RES?145. . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_LOG_2?MAIN
REV?043. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_BITREV?MAIN
RI . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RS0. . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1. . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RSTREAS. . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
RXD. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
SBUF . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SCON . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SM0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM1. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM2. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SP . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPC_FNC. . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
SPI_CTRL . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
SPI_DATA . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
SPICLK . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
T0 . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
T1 . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
T1_1V2 . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
T2 . . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
T2_1V2 . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
T2CON. . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T_IM?359 . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_IM?470 . . . . . . . . . . . . . . .    I  ADDR  000AH     R   SEG=?ID?_FFT?MAIN
T_RE?358 . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_RE?469 . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_FFT?MAIN
TB8. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TCLK . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TEST_MODE. . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
TF0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0. . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1. . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2. . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TICK_DV. . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
TL0. . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1. . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2. . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
U_IM?468 . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_FFT?MAIN
U_RE?467 . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_FFT?MAIN
W_IM?248 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_COMPUTE_W?MAIN
W_IM?464 . . . . . . . . . . . . . . .    D  ADDR  000BH     R   SEG=?DT?_FFT?MAIN
W_IM?466 . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_FFT?MAIN
W_IM?580 . . . . . . . . . . . . . . .    I  ADDR  0052H     R   SEG=?ID?MAIN?MAIN
W_RE?247 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_COMPUTE_W?MAIN
AX51 MACRO ASSEMBLER  MAIN                                                                  05/04/09 23:25:02 PAGE    29

W_RE?463 . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_FFT?MAIN
W_RE?465 . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_FFT?MAIN
W_RE?579 . . . . . . . . . . . . . . .    I  ADDR  0042H     R   SEG=?ID?MAIN?MAIN
WDTI . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

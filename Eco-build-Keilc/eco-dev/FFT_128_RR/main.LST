C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(.
                    -./../Include) SRC(./main.src)

line level    source

   1          /* gets no. of points from the user, initialize the points and roots of unity lookup table 
   2           * and lets fft go. finally bit-reverses the results and outputs them into a file. 
   3           * n should be a power of 2. 
   4           */
   5          #include "Eco/reg24e1.h"
   1      =1  #ifndef REGnRF24E1_H
   2      =1  #define REGnRF24E1_H
   3      =1  
   4      =1  /*  BYTE Registers  */
   5      =1  sfr P0                  = 0x80 ;
   6      =1  sfr SP                  = 0x81 ;
   7      =1  sfr DPL                 = 0x82 ;
   8      =1  sfr DPL0                = 0x82 ;
   9      =1  sfr DPH                 = 0x83 ;
  10      =1  sfr DPH0                = 0x83 ;
  11      =1  sfr DPL1                = 0x84 ;
  12      =1  sfr DPH1                = 0x85 ;
  13      =1  sfr DPS                 = 0x86 ;
  14      =1  sfr PCON                = 0x87 ;
  15      =1  sfr TCON                = 0x88 ;
  16      =1  sfr TMOD                = 0x89 ;
  17      =1  sfr TL0                 = 0x8A ;
  18      =1  sfr TL1                 = 0x8B ;
  19      =1  sfr TH0                 = 0x8C ;
  20      =1  sfr TH1                 = 0x8D ;
  21      =1  sfr CKCON               = 0x8E ;
  22      =1  sfr SPC_FNC             = 0x8F ;
  23      =1  sfr P1          = 0x90 ;
  24      =1  sfr EXIF                = 0x91 ;
  25      =1  sfr MPAGE               = 0x92 ;
  26      =1  sfr P0_DIR              = 0x94 ;
  27      =1  sfr P0_ALT              = 0x95 ;
  28      =1  sfr P1_DIR              = 0x96 ;
  29      =1  sfr P1_ALT              = 0x97 ;
  30      =1  sfr SCON                = 0x98 ;
  31      =1  sfr SBUF                = 0x99 ;
  32      =1  sfr RADIO               = 0xA0 ;
  33      =1  sfr ADCCON              = 0xA1 ;
  34      =1  sfr ADCDATAH    = 0xA2 ;
  35      =1  sfr ADCDATAL    = 0xA3 ;
  36      =1  sfr ADCSTATIC   = 0xA4 ;
  37      =1  sfr IE                  = 0xA8 ;
  38      =1  sfr PWMCON              = 0xA9 ;
  39      =1  sfr PWMDUTY             = 0xAA ;
  40      =1  sfr REGX_MSB    = 0xAB ;
  41      =1  sfr REGX_LSB    = 0xAC ;
  42      =1  sfr REGX_CTRL   = 0xAD ;
  43      =1  sfr RSTREAS             = 0xB1 ;
  44      =1  sfr SPI_DATA    = 0xB2 ;
  45      =1  sfr SPI_CTRL    = 0xB3 ;
  46      =1  sfr SPICLK              = 0xB4 ;
  47      =1  sfr TICK_DV             = 0xB5 ;
  48      =1  sfr CK_CTRL             = 0xB6 ;
  49      =1  sfr TEST_MODE   = 0xB7 ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 2   

  50      =1  sfr IP                  = 0xB8 ;
  51      =1  sfr T1_1V2              = 0xBC ;
  52      =1  sfr T2_1V2              = 0xBD ;
  53      =1  sfr DEV_OFFSET  = 0xBE ;
  54      =1  sfr T2CON               = 0xC8 ;
  55      =1  sfr RCAP2L              = 0xCA ;
  56      =1  sfr RCAP2H              = 0xCB ;
  57      =1  sfr TL2                 = 0xCC ;
  58      =1  sfr TH2                 = 0xCD ;
  59      =1  sfr PSW                 = 0xD0 ;
  60      =1  sfr EICON               = 0xD8 ;
  61      =1  sfr ACC                 = 0xE0 ;
  62      =1  sfr EIE                 = 0xE8 ;
  63      =1  sfr B                   = 0xF0 ;
  64      =1  sfr EIP                 = 0xF8 ;
  65      =1  
  66      =1  
  67      =1  /*  BIT Registers  */
  68      =1  /* P0 */
  69      =1  sbit P0_0       = 0x80  ;
  70      =1  sbit DIO2       = 0x80  ;
  71      =1  sbit P0_1       = 0x81  ;
  72      =1  sbit RXD        = 0x81  ;
  73      =1  sbit DIO3       = 0x81  ;
  74      =1  sbit P0_2       = 0x82  ;
  75      =1  sbit TXD        = 0x82  ;
  76      =1  sbit DIO4       = 0x82  ;
  77      =1  sbit P0_3       = 0x83  ;
  78      =1  sbit INT0_N     = 0x83  ;
  79      =1  sbit DIO5       = 0x83  ;
  80      =1  sbit P0_4       = 0x84  ;
  81      =1  sbit INT1_N     = 0x84  ;
  82      =1  sbit DIO6       = 0x84  ;
  83      =1  sbit P0_5       = 0x85  ;
  84      =1  sbit T0         = 0x85  ;
  85      =1  sbit DIO7       = 0x85  ;
  86      =1  sbit P0_6       = 0x86  ;
  87      =1  sbit T1         = 0x86  ;
  88      =1  sbit DIO8       = 0x86  ;
  89      =1  sbit P0_7       = 0x87  ;
  90      =1  sbit PWM        = 0x87  ;
  91      =1  sbit DIO9       = 0x87  ;
  92      =1  
  93      =1  /*  TCON  */
  94      =1  sbit IT0        = 0x88 ;
  95      =1  sbit IE0        = 0x89 ;
  96      =1  sbit IT1        = 0x8A ;
  97      =1  sbit IE1        = 0x8B ;
  98      =1  sbit TR0        = 0x8C ;
  99      =1  sbit TF0        = 0x8D ;
 100      =1  sbit TR1        = 0x8E ;
 101      =1  sbit TF1        = 0x8F ;
 102      =1  
 103      =1  /* P1 */
 104      =1  sbit P1_0       = 0x90 ;
 105      =1  sbit T2         = 0x90 ;
 106      =1  sbit DIO0       = 0x90 ;
 107      =1  sbit P1_1       = 0x91 ;
 108      =1  sbit DIO1       = 0x91 ;
 109      =1  sbit P1_2       = 0x92 ;
 110      =1  sbit DIN0       = 0x92 ;
 111      =1  
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 3   

 112      =1  /*  SCON  */
 113      =1  sbit RI         = 0x98 ;
 114      =1  sbit TI         = 0x99 ;
 115      =1  sbit RB8        = 0x9A ;
 116      =1  sbit TB8        = 0x9B ;
 117      =1  sbit REN        = 0x9C ;
 118      =1  sbit SM2        = 0x9D ;
 119      =1  sbit SM1        = 0x9E ;
 120      =1  sbit SM0        = 0x9F ;
 121      =1  
 122      =1  /* P2 */
 123      =1  sbit DATA       = 0xA0 ;
 124      =1  sbit CLK1       = 0xA1 ;
 125      =1  sbit DR1        = 0xA2 ;
 126      =1  sbit CS         = 0xA3 ;
 127      =1  sbit DOUT2      = 0xA4 ;
 128      =1  sbit CLK2       = 0xA5 ;
 129      =1  sbit DR2_CE     = 0xA6 ;
 130      =1  sbit DR2        = 0xA6 ;
 131      =1  sbit CE         = 0xA6 ;
 132      =1  sbit PWR_UP     = 0xA7 ;
 133      =1  
 134      =1  /*  IE   */
 135      =1  sbit EX0        = 0xA8 ;
 136      =1  sbit ET0        = 0xA9 ;
 137      =1  sbit EX1        = 0xAA ;
 138      =1  sbit ET1        = 0xAB ;
 139      =1  sbit ES         = 0xAC ;
 140      =1  sbit ET2        = 0xAD ;
 141      =1  sbit EA         = 0xAF ;
 142      =1  
 143      =1  /*  IP   */
 144      =1  sbit PX0        = 0xB8 ;
 145      =1  sbit PT0        = 0xB9 ;
 146      =1  sbit PX1        = 0xBA ;
 147      =1  sbit PT1        = 0xBB ;
 148      =1  sbit PS         = 0xBC ;
 149      =1  sbit PT2        = 0xBD ;
 150      =1  
 151      =1  /*  T2CON  */
 152      =1  sbit CP_RL2     = 0xC8 ;
 153      =1  sbit CPRL2      = 0xC8 ;
 154      =1  sbit C_T2       = 0xC9 ;
 155      =1  sbit CT2        = 0xC9 ;
 156      =1  sbit TR2        = 0xCA ;
 157      =1  sbit EXEN2      = 0xCB ;
 158      =1  sbit TCLK       = 0xCC ;
 159      =1  sbit RCLK       = 0xCD ;
 160      =1  sbit EXF2       = 0xCE ;
 161      =1  sbit TF2        = 0xCF ;
 162      =1  
 163      =1  /*  PSW   */
 164      =1  sbit P          = 0xD0 ;
 165      =1  sbit F1         = 0xD1 ;
 166      =1  sbit OV         = 0xD2 ;
 167      =1  sbit RS0        = 0xD3 ;
 168      =1  sbit RS1        = 0xD4 ;
 169      =1  sbit F0         = 0xD5 ;
 170      =1  sbit AC         = 0xD6 ;
 171      =1  sbit CY         = 0xD7 ;
 172      =1  
 173      =1  /*  EICON  */
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 4   

 174      =1  sbit WDTI       = 0xDB ;
 175      =1  
 176      =1  /*  EIE  */
 177      =1  sbit EX2        = 0xE8 ;
 178      =1  sbit EX3        = 0xE9 ;
 179      =1  sbit EX4        = 0xEA ;
 180      =1  sbit EX5        = 0xEB ;
 181      =1  sbit EWDI       = 0xEC ;
 182      =1  
 183      =1  /*  EIP  */
 184      =1  sbit PX2        = 0xF8 ;
 185      =1  sbit PX3        = 0xF9 ;
 186      =1  sbit PX4        = 0xFA ;
 187      =1  sbit PX5        = 0xFB ;
 188      =1  sbit PWDI       = 0xFC ;
 189      =1  
 190      =1  
 191      =1  /* BIT definitions for bits that are not directly accessible */
 192      =1  /* PCON bits */
 193      =1  #define IDL             0x01
 194      =1  #define PD              0x02
 195      =1  #define GF0             0x04
 196      =1  #define GF1             0x08
 197      =1  #define SMOD            0x80
 198      =1  
 199      =1  /* TMOD bits */
 200      =1  #define T0_M0           0x01
 201      =1  #define T0_M1           0x02
 202      =1  #define T0_CT           0x04
 203      =1  #define T0_GATE         0x08
 204      =1  #define T1_M0           0x10
 205      =1  #define T1_M1           0x20
 206      =1  #define T1_CT           0x40
 207      =1  #define T1_GATE         0x80
 208      =1  
 209      =1  #define T0_MASK         0x0F
 210      =1  #define T1_MASK         0xF0
 211      =1  
 212      =1  /* Interrupt numbers: address = (number * 8) + 3 */
 213      =1  #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
 214      =1  #define TF0_VECTOR      1       /* 0x0b timer 0 */
 215      =1  #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
 216      =1  #define TF1_VECTOR      3       /* 0x1b timer 1 */
 217      =1  #define SI0_VECTOR      4       /* 0x23 serial port 0 */
 218      =1  
 219      =1  #endif
   6          #include "Eco/eco_sys.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * Min-Hua Chen <orca.chen@gmail.com> 
  10      =1   */
  11      =1  #ifndef _ECO_SYS_H_
  12      =1  #define _ECO_SYS_H_
  13      =1  
  14      =1  #include <Eco/reg24e1.h>
   1      =2  #ifndef REGnRF24E1_H
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 5   

           =2 #define REGnRF24E1_H
           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0                  = 0x80 ;
           =2 sfr SP                  = 0x81 ;
           =2 sfr DPL                 = 0x82 ;
           =2 sfr DPL0                = 0x82 ;
           =2 sfr DPH                 = 0x83 ;
           =2 sfr DPH0                = 0x83 ;
           =2 sfr DPL1                = 0x84 ;
           =2 sfr DPH1                = 0x85 ;
           =2 sfr DPS                 = 0x86 ;
           =2 sfr PCON                = 0x87 ;
           =2 sfr TCON                = 0x88 ;
           =2 sfr TMOD                = 0x89 ;
           =2 sfr TL0                 = 0x8A ;
           =2 sfr TL1                 = 0x8B ;
           =2 sfr TH0                 = 0x8C ;
           =2 sfr TH1                 = 0x8D ;
           =2 sfr CKCON               = 0x8E ;
           =2 sfr SPC_FNC             = 0x8F ;
           =2 sfr P1          = 0x90 ;
           =2 sfr EXIF                = 0x91 ;
           =2 sfr MPAGE               = 0x92 ;
           =2 sfr P0_DIR              = 0x94 ;
           =2 sfr P0_ALT              = 0x95 ;
           =2 sfr P1_DIR              = 0x96 ;
           =2 sfr P1_ALT              = 0x97 ;
           =2 sfr SCON                = 0x98 ;
           =2 sfr SBUF                = 0x99 ;
           =2 sfr RADIO               = 0xA0 ;
           =2 sfr ADCCON              = 0xA1 ;
           =2 sfr ADCDATAH    = 0xA2 ;
           =2 sfr ADCDATAL    = 0xA3 ;
           =2 sfr ADCSTATIC   = 0xA4 ;
           =2 sfr IE                  = 0xA8 ;
           =2 sfr PWMCON              = 0xA9 ;
           =2 sfr PWMDUTY             = 0xAA ;
           =2 sfr REGX_MSB    = 0xAB ;
           =2 sfr REGX_LSB    = 0xAC ;
           =2 sfr REGX_CTRL   = 0xAD ;
           =2 sfr RSTREAS             = 0xB1 ;
           =2 sfr SPI_DATA    = 0xB2 ;
           =2 sfr SPI_CTRL    = 0xB3 ;
           =2 sfr SPICLK              = 0xB4 ;
           =2 sfr TICK_DV             = 0xB5 ;
           =2 sfr CK_CTRL             = 0xB6 ;
           =2 sfr TEST_MODE   = 0xB7 ;
           =2 sfr IP                  = 0xB8 ;
           =2 sfr T1_1V2              = 0xBC ;
           =2 sfr T2_1V2              = 0xBD ;
           =2 sfr DEV_OFFSET  = 0xBE ;
           =2 sfr T2CON               = 0xC8 ;
           =2 sfr RCAP2L              = 0xCA ;
           =2 sfr RCAP2H              = 0xCB ;
           =2 sfr TL2                 = 0xCC ;
           =2 sfr TH2                 = 0xCD ;
           =2 sfr PSW                 = 0xD0 ;
           =2 sfr EICON               = 0xD8 ;
           =2 sfr ACC                 = 0xE0 ;
           =2 sfr EIE                 = 0xE8 ;
           =2 sfr B                   = 0xF0 ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 6   

           =2 sfr EIP                 = 0xF8 ;
           =2 
           =2 
           =2 /*  BIT Registers  */
           =2 /* P0 */
           =2 sbit P0_0       = 0x80  ;
           =2 sbit DIO2       = 0x80  ;
           =2 sbit P0_1       = 0x81  ;
           =2 sbit RXD        = 0x81  ;
           =2 sbit DIO3       = 0x81  ;
           =2 sbit P0_2       = 0x82  ;
           =2 sbit TXD        = 0x82  ;
           =2 sbit DIO4       = 0x82  ;
           =2 sbit P0_3       = 0x83  ;
           =2 sbit INT0_N     = 0x83  ;
           =2 sbit DIO5       = 0x83  ;
           =2 sbit P0_4       = 0x84  ;
           =2 sbit INT1_N     = 0x84  ;
           =2 sbit DIO6       = 0x84  ;
           =2 sbit P0_5       = 0x85  ;
           =2 sbit T0         = 0x85  ;
           =2 sbit DIO7       = 0x85  ;
           =2 sbit P0_6       = 0x86  ;
           =2 sbit T1         = 0x86  ;
           =2 sbit DIO8       = 0x86  ;
           =2 sbit P0_7       = 0x87  ;
           =2 sbit PWM        = 0x87  ;
           =2 sbit DIO9       = 0x87  ;
           =2 
           =2 /*  TCON  */
           =2 sbit IT0        = 0x88 ;
           =2 sbit IE0        = 0x89 ;
           =2 sbit IT1        = 0x8A ;
           =2 sbit IE1        = 0x8B ;
           =2 sbit TR0        = 0x8C ;
           =2 sbit TF0        = 0x8D ;
           =2 sbit TR1        = 0x8E ;
           =2 sbit TF1        = 0x8F ;
           =2 
           =2 /* P1 */
           =2 sbit P1_0       = 0x90 ;
           =2 sbit T2         = 0x90 ;
           =2 sbit DIO0       = 0x90 ;
           =2 sbit P1_1       = 0x91 ;
           =2 sbit DIO1       = 0x91 ;
           =2 sbit P1_2       = 0x92 ;
           =2 sbit DIN0       = 0x92 ;
           =2 
           =2 /*  SCON  */
           =2 sbit RI         = 0x98 ;
           =2 sbit TI         = 0x99 ;
           =2 sbit RB8        = 0x9A ;
           =2 sbit TB8        = 0x9B ;
           =2 sbit REN        = 0x9C ;
           =2 sbit SM2        = 0x9D ;
           =2 sbit SM1        = 0x9E ;
           =2 sbit SM0        = 0x9F ;
           =2 
           =2 /* P2 */
           =2 sbit DATA       = 0xA0 ;
           =2 sbit CLK1       = 0xA1 ;
           =2 sbit DR1        = 0xA2 ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 7   

           =2 sbit CS         = 0xA3 ;
           =2 sbit DOUT2      = 0xA4 ;
           =2 sbit CLK2       = 0xA5 ;
           =2 sbit DR2_CE     = 0xA6 ;
           =2 sbit DR2        = 0xA6 ;
           =2 sbit CE         = 0xA6 ;
           =2 sbit PWR_UP     = 0xA7 ;
           =2 
           =2 /*  IE   */
           =2 sbit EX0        = 0xA8 ;
           =2 sbit ET0        = 0xA9 ;
           =2 sbit EX1        = 0xAA ;
           =2 sbit ET1        = 0xAB ;
           =2 sbit ES         = 0xAC ;
           =2 sbit ET2        = 0xAD ;
           =2 sbit EA         = 0xAF ;
           =2 
           =2 /*  IP   */
           =2 sbit PX0        = 0xB8 ;
           =2 sbit PT0        = 0xB9 ;
           =2 sbit PX1        = 0xBA ;
           =2 sbit PT1        = 0xBB ;
           =2 sbit PS         = 0xBC ;
           =2 sbit PT2        = 0xBD ;
           =2 
           =2 /*  T2CON  */
           =2 sbit CP_RL2     = 0xC8 ;
           =2 sbit CPRL2      = 0xC8 ;
           =2 sbit C_T2       = 0xC9 ;
           =2 sbit CT2        = 0xC9 ;
           =2 sbit TR2        = 0xCA ;
           =2 sbit EXEN2      = 0xCB ;
           =2 sbit TCLK       = 0xCC ;
           =2 sbit RCLK       = 0xCD ;
           =2 sbit EXF2       = 0xCE ;
           =2 sbit TF2        = 0xCF ;
           =2 
           =2 /*  PSW   */
           =2 sbit P          = 0xD0 ;
           =2 sbit F1         = 0xD1 ;
           =2 sbit OV         = 0xD2 ;
           =2 sbit RS0        = 0xD3 ;
           =2 sbit RS1        = 0xD4 ;
           =2 sbit F0         = 0xD5 ;
           =2 sbit AC         = 0xD6 ;
           =2 sbit CY         = 0xD7 ;
           =2 
           =2 /*  EICON  */
           =2 sbit WDTI       = 0xDB ;
           =2 
           =2 /*  EIE  */
           =2 sbit EX2        = 0xE8 ;
           =2 sbit EX3        = 0xE9 ;
           =2 sbit EX4        = 0xEA ;
           =2 sbit EX5        = 0xEB ;
           =2 sbit EWDI       = 0xEC ;
           =2 
           =2 /*  EIP  */
           =2 sbit PX2        = 0xF8 ;
           =2 sbit PX3        = 0xF9 ;
           =2 sbit PX4        = 0xFA ;
           =2 sbit PX5        = 0xFB ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 8   

           =2 sbit PWDI       = 0xFC ;
           =2 
           =2 
           =2 /* BIT definitions for bits that are not directly accessible */
           =2 /* PCON bits */
           =2 #define IDL             0x01
           =2 #define PD              0x02
           =2 #define GF0             0x04
           =2 #define GF1             0x08
           =2 #define SMOD            0x80
           =2 
           =2 /* TMOD bits */
           =2 #define T0_M0           0x01
           =2 #define T0_M1           0x02
           =2 #define T0_CT           0x04
           =2 #define T0_GATE         0x08
           =2 #define T1_M0           0x10
           =2 #define T1_M1           0x20
           =2 #define T1_CT           0x40
           =2 #define T1_GATE         0x80
           =2 
           =2 #define T0_MASK         0x0F
           =2 #define T1_MASK         0xF0
           =2 
           =2 /* Interrupt numbers: address = (number * 8) + 3 */
           =2 #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
           =2 #define TF0_VECTOR      1       /* 0x0b timer 0 */
           =2 #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
           =2 #define TF1_VECTOR      3       /* 0x1b timer 1 */
           =2 #define SI0_VECTOR      4       /* 0x23 serial port 0 */
           =2 
           =2 #endif
  15      =1  
  16      =1  #define blink_led() P0 ^= 0x20
  17      =1  
  18      =1  #define eco_dev_blink_led() P0 ^= 0x08
  19      =1  
  20      =1  #endif 
   7          #include "utils/utils.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * utils.h
  10      =1   * utility functions
  11      =1   * Min-Hua Chen <orca.chen@gmail.com> 
  12      =1   * 2007/11/20
  13      =1   */
  14      =1  
  15      =1  void store_cpu_rate(int mhz);
  16      =1  void mdelay(unsigned int msec);
  17      =1  void wdt_load(unsigned int cnt);
  18      =1  void strncpy(char *src, char *dst, int n);
   8          #include "serial/serial.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 9   

   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _SERIAL_H_
  10      =1  #define _SERIAL_H_
  11      =1  
  12      =1  /* for SCON register */
  13      =1  #define SERIAL_MODE0    0x00    /* sync mode */
  14      =1  #define SERIAL_MODE1    (1 << 6)        /* async, full duplex mode */
  15      =1  #define SERIAL_MODE2    (2 << 6)        /* async, full duplex mode */ 
  16      =1  #define SERIAL_MODE3    (3 << 6)        /* async, full duplex mode */ 
  17      =1  
  18      =1  #define SERIAL_CLK_D4           (1 << 5)
  19      =1  
  20      =1  #define SERIAL_IO_PORT  (3 << 1)
  21      =1  #define RECV_ENABLE     (1 << 4)
  22      =1  #define TRAN_DONE       (1 << 1)
  23      =1  #define RECV_DONE       1
  24      =1  
  25      =1  /* for PCON register */
  26      =1  #define BAUD_DOUBLE     (1 << 7)
  27      =1  
  28      =1  void serial_init(unsigned int baud);
  29      =1  void putc(char c);
  30      =1  void puts(char *s);
  31      =1  char getc();
  32      =1  void int_print(unsigned int val) reentrant;
  33      =1  
  34      =1  #endif
   9          #include "isr/isr_rf.h"
   1      =1  /* 
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _RADIO_H_
  10      =1  #define _RADIO_H_
  11      =1  
  12      =1  #define RF_BUF_LEN      23      /* default rf buffer size */
  13      =1  
  14      =1  /* RF configuration descriptor */
  15      =1  struct rf_config {
  16      =1          /* data width (in bits) */
  17      =1          unsigned char data2_width;
  18      =1          unsigned char data1_width;
  19      =1          /* address for two channels ,for only one channel, use addr1 */
  20      =1          char addr2[5];
  21      =1          char addr1[5];
  22      =1          /* [7:2] is address width (in bits), [1:0] is for CRC control */
  23      =1          char addr_and_crc;
  24      =1          char rf_prog[2];        /* rf programming */
  25      =1  };
  26      =1  
  27      =1  /* RF buffer */
  28      =1  struct radio_buffer {
  29      =1          unsigned char ready;
  30      =1          unsigned char buffer[RF_BUF_LEN];
  31      =1  };
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 10  

  32      =1  
  33      =1  void rf_init();
  34      =1  void rf_configure(struct rf_config *cfg);
  35      =1  void rf_send(char *addr, unsigned char addr_len,
  36      =1                  char *payload, unsigned char pl_len);
  37      =1  void rf_wait_msg();
  38      =1  //void rf_ch1_recv() interrupt 10;
  39      =1  extern struct radio_buffer rf_buf;
  40      =1  
  41      =1  #endif 
  10          #include "eeprom/eeprom.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _EEPROM_H_
  10      =1  #define _EEPROM_H_
  11      =1  
  12      =1  /* instruction for eeprom AT25320A */
  13      =1  #define EE_WREN         0x06
  14      =1  #define EE_WRDI         0x04
  15      =1  #define EE_RDSR         0x05
  16      =1  #define EE_WRSR         0x01
  17      =1  #define EE_READ         0x03
  18      =1  #define EE_WRITE        0x02
  19      =1  #define ERASE_ALL       0x62    /* erase all page for flash memory */
  20      =1  /* the eeprom chip select is connected to P0_0, and
  21      =1   * the eeprom is active when CS is set low */
  22      =1  #define EE_CS           P0_0
  23      =1  
  24      =1  void eeprom_init();
  25      =1  void eeprom_write(unsigned int addr, char byte);
  26      =1  char eeprom_read(unsigned int addr);
  27      =1  char eeprom_status();
  28      =1  
  29      =1  #endif 
  11          #include "eco_page.h"
   1      =1  /*
   2      =1   * Author(s): Wei-Han Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2009 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * Eco Paging Library
  10      =1   *
  11      =1   * Wei-Han Chen <xwaynec@gmail.com> 
  12      =1   * 2009/2/13
  13      =1   */
  14      =1  
  15      =1  #ifndef __ECO_PAGE_H
  16      =1  #define __ECO_PAGE_H
  17      =1  
  18      =1  
  19      =1  #include "Eco/reg24e1.h"
   1      =2  #ifndef REGnRF24E1_H
           =2 #define REGnRF24E1_H
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 11  

           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0                  = 0x80 ;
           =2 sfr SP                  = 0x81 ;
           =2 sfr DPL                 = 0x82 ;
           =2 sfr DPL0                = 0x82 ;
           =2 sfr DPH                 = 0x83 ;
           =2 sfr DPH0                = 0x83 ;
           =2 sfr DPL1                = 0x84 ;
           =2 sfr DPH1                = 0x85 ;
           =2 sfr DPS                 = 0x86 ;
           =2 sfr PCON                = 0x87 ;
           =2 sfr TCON                = 0x88 ;
           =2 sfr TMOD                = 0x89 ;
           =2 sfr TL0                 = 0x8A ;
           =2 sfr TL1                 = 0x8B ;
           =2 sfr TH0                 = 0x8C ;
           =2 sfr TH1                 = 0x8D ;
           =2 sfr CKCON               = 0x8E ;
           =2 sfr SPC_FNC             = 0x8F ;
           =2 sfr P1          = 0x90 ;
           =2 sfr EXIF                = 0x91 ;
           =2 sfr MPAGE               = 0x92 ;
           =2 sfr P0_DIR              = 0x94 ;
           =2 sfr P0_ALT              = 0x95 ;
           =2 sfr P1_DIR              = 0x96 ;
           =2 sfr P1_ALT              = 0x97 ;
           =2 sfr SCON                = 0x98 ;
           =2 sfr SBUF                = 0x99 ;
           =2 sfr RADIO               = 0xA0 ;
           =2 sfr ADCCON              = 0xA1 ;
           =2 sfr ADCDATAH    = 0xA2 ;
           =2 sfr ADCDATAL    = 0xA3 ;
           =2 sfr ADCSTATIC   = 0xA4 ;
           =2 sfr IE                  = 0xA8 ;
           =2 sfr PWMCON              = 0xA9 ;
           =2 sfr PWMDUTY             = 0xAA ;
           =2 sfr REGX_MSB    = 0xAB ;
           =2 sfr REGX_LSB    = 0xAC ;
           =2 sfr REGX_CTRL   = 0xAD ;
           =2 sfr RSTREAS             = 0xB1 ;
           =2 sfr SPI_DATA    = 0xB2 ;
           =2 sfr SPI_CTRL    = 0xB3 ;
           =2 sfr SPICLK              = 0xB4 ;
           =2 sfr TICK_DV             = 0xB5 ;
           =2 sfr CK_CTRL             = 0xB6 ;
           =2 sfr TEST_MODE   = 0xB7 ;
           =2 sfr IP                  = 0xB8 ;
           =2 sfr T1_1V2              = 0xBC ;
           =2 sfr T2_1V2              = 0xBD ;
           =2 sfr DEV_OFFSET  = 0xBE ;
           =2 sfr T2CON               = 0xC8 ;
           =2 sfr RCAP2L              = 0xCA ;
           =2 sfr RCAP2H              = 0xCB ;
           =2 sfr TL2                 = 0xCC ;
           =2 sfr TH2                 = 0xCD ;
           =2 sfr PSW                 = 0xD0 ;
           =2 sfr EICON               = 0xD8 ;
           =2 sfr ACC                 = 0xE0 ;
           =2 sfr EIE                 = 0xE8 ;
           =2 sfr B                   = 0xF0 ;
           =2 sfr EIP                 = 0xF8 ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 12  

           =2 
           =2 
           =2 /*  BIT Registers  */
           =2 /* P0 */
           =2 sbit P0_0       = 0x80  ;
           =2 sbit DIO2       = 0x80  ;
           =2 sbit P0_1       = 0x81  ;
           =2 sbit RXD        = 0x81  ;
           =2 sbit DIO3       = 0x81  ;
           =2 sbit P0_2       = 0x82  ;
           =2 sbit TXD        = 0x82  ;
           =2 sbit DIO4       = 0x82  ;
           =2 sbit P0_3       = 0x83  ;
           =2 sbit INT0_N     = 0x83  ;
           =2 sbit DIO5       = 0x83  ;
           =2 sbit P0_4       = 0x84  ;
           =2 sbit INT1_N     = 0x84  ;
           =2 sbit DIO6       = 0x84  ;
           =2 sbit P0_5       = 0x85  ;
           =2 sbit T0         = 0x85  ;
           =2 sbit DIO7       = 0x85  ;
           =2 sbit P0_6       = 0x86  ;
           =2 sbit T1         = 0x86  ;
           =2 sbit DIO8       = 0x86  ;
           =2 sbit P0_7       = 0x87  ;
           =2 sbit PWM        = 0x87  ;
           =2 sbit DIO9       = 0x87  ;
           =2 
           =2 /*  TCON  */
           =2 sbit IT0        = 0x88 ;
           =2 sbit IE0        = 0x89 ;
           =2 sbit IT1        = 0x8A ;
           =2 sbit IE1        = 0x8B ;
           =2 sbit TR0        = 0x8C ;
           =2 sbit TF0        = 0x8D ;
           =2 sbit TR1        = 0x8E ;
           =2 sbit TF1        = 0x8F ;
           =2 
           =2 /* P1 */
           =2 sbit P1_0       = 0x90 ;
           =2 sbit T2         = 0x90 ;
           =2 sbit DIO0       = 0x90 ;
           =2 sbit P1_1       = 0x91 ;
           =2 sbit DIO1       = 0x91 ;
           =2 sbit P1_2       = 0x92 ;
           =2 sbit DIN0       = 0x92 ;
           =2 
           =2 /*  SCON  */
           =2 sbit RI         = 0x98 ;
           =2 sbit TI         = 0x99 ;
           =2 sbit RB8        = 0x9A ;
           =2 sbit TB8        = 0x9B ;
           =2 sbit REN        = 0x9C ;
           =2 sbit SM2        = 0x9D ;
           =2 sbit SM1        = 0x9E ;
           =2 sbit SM0        = 0x9F ;
           =2 
           =2 /* P2 */
           =2 sbit DATA       = 0xA0 ;
           =2 sbit CLK1       = 0xA1 ;
           =2 sbit DR1        = 0xA2 ;
           =2 sbit CS         = 0xA3 ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 13  

           =2 sbit DOUT2      = 0xA4 ;
           =2 sbit CLK2       = 0xA5 ;
           =2 sbit DR2_CE     = 0xA6 ;
           =2 sbit DR2        = 0xA6 ;
           =2 sbit CE         = 0xA6 ;
           =2 sbit PWR_UP     = 0xA7 ;
           =2 
           =2 /*  IE   */
           =2 sbit EX0        = 0xA8 ;
           =2 sbit ET0        = 0xA9 ;
           =2 sbit EX1        = 0xAA ;
           =2 sbit ET1        = 0xAB ;
           =2 sbit ES         = 0xAC ;
           =2 sbit ET2        = 0xAD ;
           =2 sbit EA         = 0xAF ;
           =2 
           =2 /*  IP   */
           =2 sbit PX0        = 0xB8 ;
           =2 sbit PT0        = 0xB9 ;
           =2 sbit PX1        = 0xBA ;
           =2 sbit PT1        = 0xBB ;
           =2 sbit PS         = 0xBC ;
           =2 sbit PT2        = 0xBD ;
           =2 
           =2 /*  T2CON  */
           =2 sbit CP_RL2     = 0xC8 ;
           =2 sbit CPRL2      = 0xC8 ;
           =2 sbit C_T2       = 0xC9 ;
           =2 sbit CT2        = 0xC9 ;
           =2 sbit TR2        = 0xCA ;
           =2 sbit EXEN2      = 0xCB ;
           =2 sbit TCLK       = 0xCC ;
           =2 sbit RCLK       = 0xCD ;
           =2 sbit EXF2       = 0xCE ;
           =2 sbit TF2        = 0xCF ;
           =2 
           =2 /*  PSW   */
           =2 sbit P          = 0xD0 ;
           =2 sbit F1         = 0xD1 ;
           =2 sbit OV         = 0xD2 ;
           =2 sbit RS0        = 0xD3 ;
           =2 sbit RS1        = 0xD4 ;
           =2 sbit F0         = 0xD5 ;
           =2 sbit AC         = 0xD6 ;
           =2 sbit CY         = 0xD7 ;
           =2 
           =2 /*  EICON  */
           =2 sbit WDTI       = 0xDB ;
           =2 
           =2 /*  EIE  */
           =2 sbit EX2        = 0xE8 ;
           =2 sbit EX3        = 0xE9 ;
           =2 sbit EX4        = 0xEA ;
           =2 sbit EX5        = 0xEB ;
           =2 sbit EWDI       = 0xEC ;
           =2 
           =2 /*  EIP  */
           =2 sbit PX2        = 0xF8 ;
           =2 sbit PX3        = 0xF9 ;
           =2 sbit PX4        = 0xFA ;
           =2 sbit PX5        = 0xFB ;
           =2 sbit PWDI       = 0xFC ;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 14  

           =2 
           =2 
           =2 /* BIT definitions for bits that are not directly accessible */
           =2 /* PCON bits */
           =2 #define IDL             0x01
           =2 #define PD              0x02
           =2 #define GF0             0x04
           =2 #define GF1             0x08
           =2 #define SMOD            0x80
           =2 
           =2 /* TMOD bits */
           =2 #define T0_M0           0x01
           =2 #define T0_M1           0x02
           =2 #define T0_CT           0x04
           =2 #define T0_GATE         0x08
           =2 #define T1_M0           0x10
           =2 #define T1_M1           0x20
           =2 #define T1_CT           0x40
           =2 #define T1_GATE         0x80
           =2 
           =2 #define T0_MASK         0x0F
           =2 #define T1_MASK         0xF0
           =2 
           =2 /* Interrupt numbers: address = (number * 8) + 3 */
           =2 #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
           =2 #define TF0_VECTOR      1       /* 0x0b timer 0 */
           =2 #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
           =2 #define TF1_VECTOR      3       /* 0x1b timer 1 */
           =2 #define SI0_VECTOR      4       /* 0x23 serial port 0 */
           =2 
           =2 #endif
  20      =1  #include "Eco/eco_sys.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  10      =2   */
  11      =2  #ifndef _ECO_SYS_H_
           =2 #define _ECO_SYS_H_
           =2 
           =2 #include <Eco/reg24e1.h>
           =2 
           =2 #define blink_led() P0 ^= 0x20
           =2 
           =2 #define eco_dev_blink_led() P0 ^= 0x08
           =2 
           =2 #endif 
  21      =1  #include "utils/utils.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * utils.h
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 15  

  10      =2   * utility functions
  11      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  12      =2   * 2007/11/20
  13      =2   */
  14      =2  
  15      =2  void store_cpu_rate(int mhz);
  16      =2  void mdelay(unsigned int msec);
  17      =2  void wdt_load(unsigned int cnt);
  18      =2  void strncpy(char *src, char *dst, int n);
  22      =1  #include "eeprom/eeprom.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   */
   9      =2  #ifndef _EEPROM_H_
           =2 #define _EEPROM_H_
           =2 
           =2 /* instruction for eeprom AT25320A */
           =2 #define EE_WREN         0x06
           =2 #define EE_WRDI         0x04
           =2 #define EE_RDSR         0x05
           =2 #define EE_WRSR         0x01
           =2 #define EE_READ         0x03
           =2 #define EE_WRITE        0x02
           =2 #define ERASE_ALL       0x62    /* erase all page for flash memory */
           =2 /* the eeprom chip select is connected to P0_0, and
           =2  * the eeprom is active when CS is set low */
           =2 #define EE_CS           P0_0
           =2 
           =2 void eeprom_init();
           =2 void eeprom_write(unsigned int addr, char byte);
           =2 char eeprom_read(unsigned int addr);
           =2 char eeprom_status();
           =2 
           =2 #endif 
  23      =1  
  24      =1  #define EEPROM_HEADER 3
  25      =1  #define ECO_ADDR_SHIFT(x)       ((unsigned int)(x) + 3)
  26      =1  
  27      =1  
  28      =1  /*
  29      =1  static unsigned char ECO_PAGE_TABLE[10];
  30      =1  
  31      =1  static unsigned int ECO_PAGE_ADDR;
  32      =1  
  33      =1  static unsigned int ECO_PAGE_TABLE_INDEX;
  34      =1  */
  35      =1  
  36      =1  void eco_page_init();
  37      =1  void eco_page_manager();
  38      =1  
  39      =1  
  40      =1  #endif
  12          #include "adc/adc.h"
   1      =1  /* 
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 16  

   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * adc.h
  10      =1   */
  11      =1  
  12      =1  #ifndef _ADC_H_
  13      =1  #define _ADC_H_
  14      =1  
  15      =1  /* ADCCON register */
  16      =1  #define ADC_PWR_ON      (1 << 5)
  17      =1  #define EXTREF          (1 << 4)
  18      =1  
  19      =1  /* ADCSTATIC register */
  20      =1  #define ADC_CLK_D32     (0 << 5)
  21      =1  #define ADC_CLK_D8      (1 << 5)
  22      =1  #define ADC_RES_6       0x00
  23      =1  #define ADC_RES_8       0x01
  24      =1  #define ADC_RES_10      0x02
  25      =1  #define ADC_RES_12      0x03
  26      =1  
  27      =1  /* the default value of ADCCON is 0x80, hence the H -> L -> H
  28      =1   * sequence to start the ADC has L -> H left
  29      =1   */
  30      =1  #define ADC_START()                     \
  31      =1          do {                            \
  32      =1                  ADCCON &= ~0x80;        \
  33      =1                  ADCCON |= 0x80;         \
  34      =1          } while (0)
  35      =1  
  36      =1  #define ADC_EOC         (1 << 4)
  37      =1  
  38      =1  /* pins connected to the accelerometer */
  39      =1  #define X_AXIS          3
  40      =1  #define Y_AXIS          4
  41      =1  #define Z_AXIS          6
  42      =1  
  43      =1  void adc_init(char clk, char resol, char extref);
  44      =1  int adc_read(char in_pin);
  45      =1  
  46      =1  #endif
  13          
  14          #include <math.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __MATH_H__
  10      =1  #define __MATH_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern char  cabs  (char  val);
  15      =1  extern int    abs  (int   val);
  16      =1  extern long  labs  (long  val);
  17      =1  extern float fabs  (float val);
  18      =1  extern float sqrt  (float val);
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 17  

  19      =1  extern float exp   (float val);
  20      =1  extern float log   (float val);
  21      =1  extern float log10 (float val);
  22      =1  extern float sin   (float val);
  23      =1  extern float cos   (float val);
  24      =1  extern float tan   (float val);
  25      =1  extern float asin  (float val);
  26      =1  extern float acos  (float val);
  27      =1  extern float atan  (float val);
  28      =1  extern float sinh  (float val);
  29      =1  extern float cosh  (float val);
  30      =1  extern float tanh  (float val);
  31      =1  extern float atan2 (float y, float x);
  32      =1  
  33      =1  extern float ceil  (float val);
  34      =1  extern float floor (float val);
  35      =1  extern float modf  (float val, float *n);
  36      =1  extern float fmod  (float x, float y);
  37      =1  extern float pow   (float x, float y);
  38      =1  
  39      =1  #pragma RESTORE
  40      =1  
  41      =1  #endif
  15          
  16          volatile unsigned int test_counter;
  17          /* treats inp as a numbits number and bitreverses it. 
  18           * inp < 2^(numbits) for meaningful bit-reversal
  19           */ 
  20          int bitrev(int idata inp, int idata numbits)
  21          {
  22   1              int idata i;
  23   1              int idata rev=0;
  24   1              for (i=0; i < numbits; i++)
  25   1              {
  26   2                      rev = (rev << 1) | (inp & 1);
  27   2                      inp >>= 1;
  28   2              }
  29   1              return rev;
  30   1      }
  31          
  32          
  33          /* returns log n (to the base 2), if n is positive and power of 2 */ 
  34          int log_2(int idata n) 
  35          {
  36   1              int idata res; 
  37   1              for (res=0; n >= 2; res++) 
  38   1                      n = n >> 1; 
  39   1              return res; 
  40   1      }
  41          
  42          
  43          
  44          /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
  45           * n should be a power of 2
  46           * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
  47           *       see that function for more details on why we treat 'i' as a (log2n-1) bit number.
  48           */
  49          void compute_W(int idata n, int idata W_re[], int idata W_im[])
  50          {
  51   1              int idata i;
  52   1              int idata br;
  53   1              int log2n = log_2(n);
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 18  

  54   1      
  55   1              for (i=0; i<(n/2); i++)
  56   1              {
  57   2                      br = bitrev(i,log2n-1); 
  58   2                      W_re[br] = cos((i*2*3)/(n));  
  59   2                      W_im[br] = sin((i*2*3)/(n));  
  60   2              }
  61   1      //#ifdef COMMENT_ONLY 
  62   1      //      for (i=0;i<(n/2);i++)
  63   1      //      { 
  64   1      //              br = i; //bitrev(i,log2n-1); 
  65   1      //              printf("(%g\t%g)\n", W_re[br], W_im[br]);
  66   1      //      }  
  67   1      //#endif 
  68   1      }
  69          
  70          
  71          /* permutes the array using a bit-reversal permutation */ 
  72          void permute_bitrev(int n, int *A_re, int *A_im) 
  73          { 
  74   1              int idata i;
  75   1              int idata bri;
  76   1              int idata log2n;
  77   1              int idata t_re;
  78   1              int idata t_im;
  79   1      
  80   1              log2n = log_2(n); 
  81   1      
  82   1              for (i=0; i<n; i++)
  83   1              {
  84   2                      bri  = bitrev(i, log2n);
  85   2      
  86   2                      /* skip already swapped elements */
  87   2                      if (bri <= i) continue;
  88   2      
  89   2                      t_re = A_re[i];
  90   2                      t_im = A_im[i];
  91   2                      A_re[i]= A_re[bri];
  92   2                      A_im[i]= A_im[bri];
  93   2                      A_re[bri]= t_re;
  94   2                      A_im[bri]= t_im;
  95   2              }  
  96   1      } 
  97          
  98          
  99          /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-unity lookup table
 100           * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth roots of unity stored
 101           * in a permuted bitreversal order.
 102           *
 103           * FFT - Decimation In Time FFT with input array in correct order and output array in bit-reversed order.
 104           *
 105           * REQ: n should be a power of 2 to work. 
 106           *
 107           * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other details about VHALF sect
             -ion of the algo
 108           *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
 109           *       - See the foll. CS267 website for details of the Decimation In Time FFT implemented here.
 110           *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
 111           *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" book for another varian
             -t of Iterative-FFT
 112           */
 113          
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 19  

 114          //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
 115          void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 
 116          {
 117   1              int idata w_re, w_im, u_re, u_im, t_re, t_im;
 118   1              int idata m, g, b;
 119   1              //int i;
 120   1              int idata mt, k;
 121   1      
 122   1              /* for each stage */  
 123   1              for (m=n; m>=2; m=m>>1) 
 124   1              {
 125   2                      /* m = n/2^s; mt = m/2; */
 126   2                      mt = m >> 1;
 127   2      
 128   2                      /* for each group of butterfly */ 
 129   2                      for (g=0,k=0; g<n; g+=m,k++) 
 130   2                      {
 131   3                              /* each butterfly group uses only one root of unity. actually, it is the bitrev of this group's number 
             -k.
 132   3                               * BUT 'bitrev' it as a log2n-1 bit number because we are using a lookup array of nth root of unity and
 133   3                               * using cancellation lemma to scale nth root to n/2, n/4,... th root.
 134   3                               *
 135   3                               * It turns out like the foll.
 136   3                               *   w.re = W[bitrev(k, log2n-1)].re;
 137   3                               *   w.im = W[bitrev(k, log2n-1)].im;
 138   3                               * Still, we just use k, because the lookup array itself is bit-reversal permuted. 
 139   3                               */
 140   3                              w_re = W_re[k];
 141   3                              w_im = W_im[k];
 142   3      
 143   3                              /* for each butterfly */ 
 144   3                              for (b=g; b<(g+mt); b++) 
 145   3                              {
 146   4                                      /* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt]);
 147   4                                       */ 
 148   4                                      //printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt
             -], w_re, w_im);
 149   4      
 150   4                                      /* t = w * A[b+mt] */
 151   4                                      t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
 152   4                                      t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
 153   4      
 154   4                                      /* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
 155   4                                      u_re = A_re[b];
 156   4                                      u_im = A_im[b];
 157   4                                      A_re[b] = u_re + t_re;
 158   4                                      A_im[b] = u_im + t_im;
 159   4                                      A_re[b+mt] = u_re - t_re;
 160   4                                      A_im[b+mt] = u_im - t_im;
 161   4      
 162   4                                      /*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt]);
 163   4                                       */         
 164   4                                      //printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt
             -], w_re, w_im);
 165   4                              }
 166   3                      }
 167   2              }
 168   1      }
 169          
 170          int main()
 171          {
 172   1              int idata n;
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 20  

 173   1              //int idata i;
 174   1              int idata A_re[8];
 175   1              int idata A_im[8];
 176   1              int idata W_re[4];
 177   1              int idata W_im[4]; 
 178   1              //int idata A_re[16];
 179   1              //int idata A_im[16];
 180   1              //int idata W_re[8];
 181   1              //int idata W_im[8]; 
 182   1      
 183   1              store_cpu_rate(16);
 184   1      
 185   1              P0_DIR &= ~0x28;
 186   1              P0_ALT &= ~0x28;
 187   1      
 188   1              test_counter = 0;       
 189   1      
 190   1              serial_init(19200);
 191   1              int_print(test_counter);
 192   1              puts("\r\n");   
 193   1              for(n=0;n<6;n++)
 194   1              {
 195   2                      blink_led();
 196   2                      mdelay(400);
 197   2              }
 198   1              //A_re = (double*)malloc(sizeof(double)*n); 
 199   1              //A_im = (double*)malloc(sizeof(double)*n); 
 200   1              //W_re = (double*)malloc(sizeof(double)*n/2); 
 201   1              //W_im = (double*)malloc(sizeof(double)*n/2); 
 202   1              //assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
 203   1              
 204   1              while(1)
 205   1              {
 206   2              //for (i=0; i<3; i++) {
 207   2                      //init_array(n, A_re, A_im); 
 208   2                      n = 8;
 209   2      
 210   2                      compute_W(n, W_re, W_im); 
 211   2                      fft(n, A_re, A_im, W_re, W_im);
 212   2                      permute_bitrev(n, A_re, A_im);
 213   2      
 214   2                      blink_led();
 215   2                      mdelay(100);
 216   2      
 217   2                      test_counter++;
 218   2      
 219   2                      int_print(test_counter);
 220   2                      puts("\r\n");
 221   2              //}
 222   2              }
 223   1              //free(A_re); 
 224   1              //free(A_im); 
 225   1              //free(W_re); 
 226   1              //free(W_im); 
 227   1              //exit(0);
 228   1              return 0;
 229   1      }
 230          
 231          
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_mdelay. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
_bitrev. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  inp?040. . . . . . . . . . . . . . .  * REG *  DATA   INT      0002H  2
  numbits?041. . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  i?042. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
  rev?043. . . . . . . . . . . . . . .  AUTO     IDATA  INT      0002H  2
_serial_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n?576. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
  A_re?577 . . . . . . . . . . . . . .  AUTO     IDATA  ARRAY    0002H  16
  A_im?578 . . . . . . . . . . . . . .  AUTO     IDATA  ARRAY    0012H  16
  W_re?579 . . . . . . . . . . . . . .  AUTO     IDATA  ARRAY    0022H  8
  W_im?580 . . . . . . . . . . . . . .  AUTO     IDATA  ARRAY    002AH  8
test_counter . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0000H  2
rf_config. . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  15
  data2_width. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  data1_width. . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  addr2. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0002H  5
  addr1. . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0007H  5
  addr_and_crc . . . . . . . . . . . .  MEMBER   -----  CHAR     000CH  1
  rf_prog. . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    000DH  2
_compute_W . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n?246. . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  W_re?247 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0002H  3
  W_im?248 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0005H  3
  i?249. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
  br?250 . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0002H  2
  log2n?251. . . . . . . . . . . . . .  AUTO     DATA   INT      0008H  2
P0_DIR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
_fft . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n?460. . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  A_re?461 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0002H  3
  A_im?462 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0005H  3
  W_re?463 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0008H  3
  W_im?464 . . . . . . . . . . . . . .  AUTO     DATA   PTR      000BH  3
  w_re?465 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
  w_im?466 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0002H  2
  u_re?467 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0004H  2
  u_im?468 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0006H  2
  t_re?469 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0008H  2
  t_im?470 . . . . . . . . . . . . . .  AUTO     IDATA  INT      000AH  2
  m?471. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      000CH  2
  g?472. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      000EH  2
  b?473. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0010H  2
  mt?474 . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0012H  2
  k?475. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0014H  2
P0_ALT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
_cos . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_sin . . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_puts. . . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_log_2 . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n?144. . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  res?145. . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
_?int_print. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_store_cpu_rate. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
radio_buffer . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  24
C51 COMPILER V8.16   MAIN                                                                  05/10/2009 15:23:02 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


  ready. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  buffer . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0001H  23
_permute_bitrev. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  n?352. . . . . . . . . . . . . . . .  AUTO     DATA   INT      0000H  2
  A_re?353 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0002H  3
  A_im?354 . . . . . . . . . . . . . .  AUTO     DATA   PTR      0005H  3
  i?355. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0000H  2
  bri?356. . . . . . . . . . . . . . .  AUTO     IDATA  INT      0002H  2
  log2n?357. . . . . . . . . . . . . .  AUTO     IDATA  INT      0004H  2
  t_re?358 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0006H  2
  t_im?359 . . . . . . . . . . . . . .  AUTO     IDATA  INT      0008H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1487    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      34
   IDATA SIZE       =   ----      92
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

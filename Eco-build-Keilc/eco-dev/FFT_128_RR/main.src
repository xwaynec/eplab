; ./main.src generated from: .\main.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(../../Include) SRC(./main.src)

$NOMOD51

NAME	MAIN

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?_bitrev?MAIN     SEGMENT CODE 
?DT?_bitrev?MAIN     SEGMENT DATA OVERLAYABLE 
?PR?_log_2?MAIN      SEGMENT CODE 
?PR?_compute_W?MAIN  SEGMENT CODE 
?DT?_compute_W?MAIN  SEGMENT DATA OVERLAYABLE 
?PR?_compute_W_2?MAIN  SEGMENT CODE 
?PR?_permute_bitrev?MAIN                 SEGMENT CODE 
?DT?_permute_bitrev?MAIN                 SEGMENT DATA OVERLAYABLE 
?PR?_permute_bitrev_1?MAIN                 SEGMENT CODE 
?PR?_permute_bitrev_2?MAIN                 SEGMENT CODE 
?PR?_permute_bitrev_3?MAIN                 SEGMENT CODE 
?PR?_fft?MAIN        SEGMENT CODE 
?DT?_fft?MAIN        SEGMENT DATA OVERLAYABLE 
?PR?_fft_1?MAIN        SEGMENT CODE 
?PR?_fft_2?MAIN        SEGMENT CODE 
?PR?_fft_3?MAIN        SEGMENT CODE 
?PR?_fft_4?MAIN        SEGMENT CODE 
?PR?_fft_5?MAIN        SEGMENT CODE 
?PR?_fft_6?MAIN        SEGMENT CODE 
?PR?main?MAIN        SEGMENT CODE 
?CO?MAIN             SEGMENT CODE 
?DT?MAIN             SEGMENT DATA 
?ID?_bitrev?MAIN     SEGMENT IDATA OVERLAYABLE 
?ID?_log_2?MAIN      SEGMENT IDATA OVERLAYABLE 
?ID?_compute_W?MAIN  SEGMENT IDATA OVERLAYABLE 
?ID?_permute_bitrev?MAIN                 SEGMENT IDATA OVERLAYABLE 
?ID?_fft?MAIN        SEGMENT IDATA OVERLAYABLE 
?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
	EXTRN	CODE (_mdelay)
	EXTRN	CODE (_serial_init)
	EXTRN	CODE (_cos)
	EXTRN	CODE (_sin)
	EXTRN	CODE (_puts)
	EXTRN	CODE (_?int_print)
	EXTRN	CODE (_store_cpu_rate)
	EXTRN	CODE (?C?SIDIV)
	EXTRN	CODE (?C?IMUL)
	EXTRN	CODE (?C?FCASTI)
	EXTRN	CODE (?C?CASTF)
	EXTRN	CODE (?C?ISTOPTR)
	EXTRN	CODE (?C?ILDOPTR)
	EXTRN	CODE (?C_STARTUP)
	
	EXTRN   CODE (eco_page_manager)
    EXTRN   DATA (ECO_PAGE_ADDR)
    EXTRN   DATA (ECO_PAGE_SPI_CONN)
    EXTRN   IDATA (ECO_PAGE_REGISTER1)
    EXTRN   IDATA (ECO_PAGE_REGISTER2)
    EXTRN   IDATA (ECO_PAGE_REGISTER3)
    EXTRN   IDATA (ECO_PAGE_REGISTER4)
    EXTRN   IDATA (ECO_PAGE_REGISTER5)
    EXTRN   IDATA (ECO_PAGE_REGISTER6)
    EXTRN   IDATA (ECO_PAGE_REGISTER7)

	PUBLIC	test_counter
	PUBLIC	main
	PUBLIC	?_fft?BYTE
	PUBLIC	_fft
	PUBLIC	_fft_1
	PUBLIC	_fft_2
	PUBLIC	_fft_3
	PUBLIC	_fft_4
	PUBLIC	_fft_5
	PUBLIC	_fft_6
	PUBLIC	?_permute_bitrev?BYTE
	PUBLIC	_permute_bitrev
	PUBLIC	_permute_bitrev_1
	PUBLIC	_permute_bitrev_2
	PUBLIC	_permute_bitrev_3
	PUBLIC	?_compute_W?BYTE
	PUBLIC	_compute_W
	PUBLIC	_compute_W_2
	PUBLIC	_log_2
	PUBLIC	_bitrev

	RSEG  ?DT?_bitrev?MAIN
?_bitrev?BYTE:
    numbits?041:   DS   2

	RSEG  ?DT?_compute_W?MAIN
?_compute_W?BYTE:
          n?246:   DS   2
	ORG  2
       W_re?247:   DS   3
	ORG  5
       W_im?248:   DS   3
	ORG  8
      log2n?251:   DS   2

	RSEG  ?DT?_fft?MAIN
?_fft?BYTE:
          n?460:   DS   2
	ORG  2
       A_re?461:   DS   3
	ORG  5
       A_im?462:   DS   3
	ORG  8
       W_re?463:   DS   3
	ORG  11
       W_im?464:   DS   3

	RSEG  ?DT?_permute_bitrev?MAIN
?_permute_bitrev?BYTE:
          n?352:   DS   2
	ORG  2
       A_re?353:   DS   3
	ORG  5
       A_im?354:   DS   3

	RSEG  ?DT?MAIN
   test_counter:   DS   2

	RSEG  ?ID?_bitrev?MAIN
          i?042:   DS   2

	RSEG  ?ID?_bitrev?MAIN
        rev?043:   DS   2

	RSEG  ?ID?_log_2?MAIN
        res?145:   DS   2

	RSEG  ?ID?_compute_W?MAIN
          i?249:   DS   2

	RSEG  ?ID?_compute_W?MAIN
         br?250:   DS   2

	RSEG  ?ID?_permute_bitrev?MAIN
          i?355:   DS   2

	RSEG  ?ID?_permute_bitrev?MAIN
        bri?356:   DS   2

	RSEG  ?ID?_permute_bitrev?MAIN
      log2n?357:   DS   2

	RSEG  ?ID?_permute_bitrev?MAIN
       t_re?358:   DS   2

	RSEG  ?ID?_permute_bitrev?MAIN
       t_im?359:   DS   2

	RSEG  ?ID?_fft?MAIN
       w_re?465:   DS   2

	RSEG  ?ID?_fft?MAIN
       w_im?466:   DS   2

	RSEG  ?ID?_fft?MAIN
       u_re?467:   DS   2

	RSEG  ?ID?_fft?MAIN
       u_im?468:   DS   2

	RSEG  ?ID?_fft?MAIN
       t_re?469:   DS   2

	RSEG  ?ID?_fft?MAIN
       t_im?470:   DS   2

	RSEG  ?ID?_fft?MAIN
          m?471:   DS   2

	RSEG  ?ID?_fft?MAIN
          g?472:   DS   2

	RSEG  ?ID?_fft?MAIN
          b?473:   DS   2

	RSEG  ?ID?_fft?MAIN
         mt?474:   DS   2

	RSEG  ?ID?_fft?MAIN
          k?475:   DS   2

	RSEG  ?ID?main?MAIN
          n?576:   DS   2

	RSEG  ?ID?main?MAIN
       A_re?577:   DS   16

	RSEG  ?ID?main?MAIN
       A_im?578:   DS   16

	RSEG  ?ID?main?MAIN
       W_re?579:   DS   8

	RSEG  ?ID?main?MAIN
       W_im?580:   DS   8

	RSEG  ?CO?MAIN
?SC_0:
	DB  00DH,00AH,000H

; /* gets no. of points from the user, initialize the points and roots of unity lookup table 
;  * and lets fft go. finally bit-reverses the results and outputs them into a file. 
;  * n should be a power of 2. 
;  */
; #include "Eco/reg24e1.h"
; #include "Eco/eco_sys.h"
; #include "utils/utils.h"
; #include "serial/serial.h"
; #include "isr/isr_rf.h"
; #include "eeprom/eeprom.h"
; #include "eco_page.h"
; #include "adc/adc.h"
; 
; #include <math.h>
; 
; volatile unsigned int test_counter;
; /* treats inp as a numbits number and bitreverses it. 
;  * inp < 2^(numbits) for meaningful bit-reversal
;  */ 
; int bitrev(int idata inp, int idata numbits)

	RSEG  ?PR?_bitrev?MAIN
_bitrev:
	USING	0
			; SOURCE LINE # 20
	MOV  	numbits?041,R4
	MOV  	numbits?041+01H,R5
;---- Variable 'inp?040' assigned to Register 'R2/R3' ----
	MOV  	R3,AR7
	MOV  	R2,AR6
; {
			; SOURCE LINE # 21
; 	int idata i;
; 	int idata rev=0;
			; SOURCE LINE # 23
	CLR  	A
	MOV  	R0,#LOW (rev?043)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
; 	for (i=0; i < numbits; i++)
			; SOURCE LINE # 24
	MOV  	R0,#LOW (i?042)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0001:
	CLR  	C
	MOV  	R0,#LOW (i?042+01H)
	MOV  	A,@R0
	SUBB 	A,numbits?041+01H
	MOV  	A,numbits?041
	XRL  	A,#080H
	MOV  	B,A
	DEC  	R0
	MOV  	A,@R0
	XRL  	A,#080H
	SUBB 	A,B
	JNC  	?C0002
; 	{
			; SOURCE LINE # 25
; 		rev = (rev << 1) | (inp & 1);
			; SOURCE LINE # 26
	MOV  	R0,#LOW (rev?043+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,R3
	ANL  	A,#01H
	MOV  	R5,A
	MOV  	A,R6
	MOV  	@R0,A
	MOV  	A,R7
	ORL  	A,R5
	INC  	R0
	MOV  	@R0,A
; 		inp >>= 1;
			; SOURCE LINE # 27
	MOV  	A,R2
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R2,A
	MOV  	A,R3
	RRC  	A
	MOV  	R3,A
; 	}
			; SOURCE LINE # 28
	MOV  	R0,#LOW (i?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0001
	INC  	@R0
?C0034:
	SJMP 	?C0001
?C0002:
; 	return rev;
			; SOURCE LINE # 29
	MOV  	R0,#LOW (rev?043)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
; }
			; SOURCE LINE # 30
?C0004:
	;XRL  	P0,#020H
	RET  	
; END OF _bitrev

; 
; 
; /* returns log n (to the base 2), if n is positive and power of 2 */ 
; int log_2(int idata n) 

	RSEG  ?PR?_log_2?MAIN
_log_2:
	USING	0
			; SOURCE LINE # 34
;---- Variable 'n?144' assigned to Register 'R6/R7' ----
; {
			; SOURCE LINE # 35
; 	int idata res; 
; 	for (res=0; n >= 2; res++) 
			; SOURCE LINE # 37
	CLR  	A
	MOV  	R0,#LOW (res?145)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0005:
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#02H
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0006
; 		n = n >> 1; 
			; SOURCE LINE # 38
	MOV  	A,R6
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R6,A
	MOV  	A,R7
	RRC  	A
	MOV  	R7,A
	MOV  	R0,#LOW (res?145+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0005
	INC  	@R0
?C0035:
	SJMP 	?C0005
?C0006:
; 	return res; 
			; SOURCE LINE # 39
	MOV  	R0,#LOW (res?145)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A

; 		blink_led();
			; SOURCE LINE # 214
;	XRL  	P0,#020H
; }
			; SOURCE LINE # 40
?C0008:
	;XRL  	P0,#020H
	RET  	
; END OF _log_2

; 
; 
; 
; /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
;  * n should be a power of 2
;  * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
;  *       see that function for more details on why we treat 'i' as a (log2n-1) bit number.
;  */
; void compute_W(int idata n, int idata W_re[], int idata W_im[])

	RSEG  ?PR?_compute_W?MAIN
_compute_W:
	USING	0
			; SOURCE LINE # 49
	MOV  	n?246,R6
	MOV  	n?246+01H,R7
	MOV  	W_re?247,R3
	MOV  	W_re?247+01H,R2
	MOV  	W_re?247+02H,R1
; {
			; SOURCE LINE # 50
; 	int idata i;
; 	int idata br;
; 	int log2n = log_2(n);
			; SOURCE LINE # 53
	;LCALL	_log_2
	MOV R0,#LOW(ECO_PAGE_REGISTER6)
    MOV @R0,n?246

	MOV R0,#LOW(ECO_PAGE_REGISTER7)
    MOV @R0,n?246+01H

	MOV ECO_PAGE_ADDR,#HIGH (_log_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (_log_2)
    LCALL   eco_page_manager

	MOV  	log2n?251,R6
	MOV  	log2n?251+01H,R7
; 
; 	for (i=0; i<(n/2); i++)
			; SOURCE LINE # 55
	CLR  	A
	MOV  	R0,#LOW (i?249)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0009:
	MOV  	R6,n?246
	MOV  	R7,n?246+01H
	MOV  	R4,#00H
	MOV  	R5,#02H
	LCALL	?C?SIDIV
	MOV  	R4,AR6
	MOV  	R5,AR7
	MOV  	R0,#LOW (i?249)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,R5
	MOV  	A,R4
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,R0
	JC   	$ + 0BH
	;LJMP 	?C0012
	MOV ECO_PAGE_ADDR,#HIGH (?C0012)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0012)
    LJMP   eco_page_manager
; 	{
			; SOURCE LINE # 56
; 		br = bitrev(i,log2n-1); 
			; SOURCE LINE # 57
	MOV  	A,log2n?251+01H
	ADD  	A,#0FFH
	
	MOV  	R5,A
    ;MOV R0,#LOW (ECO_PAGE_REGISTER5)
    ;MOV @R0,A

	MOV  	A,log2n?251
	ADDC 	A,#0FFH
	MOV  	R4,A
	;MOV R0,#LOW (ECO_PAGE_REGISTER4)
    ;MOV @R0,A

    LCALL  _bitrev
    ;MOV ECO_PAGE_ADDR,#HIGH (_bitrev)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (_bitrev)
    ;LCALL   eco_page_manager
	
; 		blink_led();
			; SOURCE LINE # 214
	;XRL  	P0,#020H

	MOV  	R0,#LOW (br?250)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
	
	

; 		W_re[br] = cos((i*2*3)/(n));  
			; SOURCE LINE # 58
	MOV  	R0,#LOW (i?249)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV ECO_PAGE_ADDR,#HIGH (_compute_W_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (_compute_W_2)
    LJMP   eco_page_manager



    RSEG  ?PR?_compute_W_2?MAIN
_compute_W_2:
    USING   0


	MOV  	R4,#00H
	MOV  	R5,#06H
	LCALL	?C?IMUL
	
	MOV  	R4,n?246
	MOV  	R5,n?246+01H
	LCALL	?C?SIDIV
	MOV  	R4,AR6
	MOV  	R5,AR7
	MOV  	A,R4
;	LCALL	?C?FCASTI
;	LCALL	_cos
;	LCALL	?C?CASTF
	MOV  	R5,AR7

; 		blink_led();
			; SOURCE LINE # 214
	;XRL  	P0,#020H

	MOV  	R0,#LOW (br?250+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,W_re?247
	MOV  	R2,W_re?247+01H
	MOV  	R1,W_re?247+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R6
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 		W_im[br] = sin((i*2*3)/(n));  
			; SOURCE LINE # 59
	MOV  	R0,#LOW (i?249)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R4,#00H
	MOV  	R5,#06H
	LCALL	?C?IMUL
	MOV  	R4,n?246
	MOV  	R5,n?246+01H
	LCALL	?C?SIDIV
	MOV  	R4,AR6
	MOV  	R5,AR7
	MOV  	A,R4
;	LCALL	?C?FCASTI
;	LCALL	_sin
;	LCALL	?C?CASTF
	MOV  	R5,AR7
	MOV  	R0,#LOW (br?250+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,W_im?248
	MOV  	R2,W_im?248+01H
	MOV  	R1,W_im?248+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R6
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 	}
			; SOURCE LINE # 60
	MOV  	R0,#LOW (i?249+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JZ   	$ + 0BH
	;LJMP 	?C0009
	MOV ECO_PAGE_ADDR,#HIGH (?C0009)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0009)
    LJMP   eco_page_manager
	INC  	@R0
?C0036:
	;LJMP 	?C0009
	MOV ECO_PAGE_ADDR,#HIGH (?C0009)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0009)
    LJMP   eco_page_manager
; //#ifdef COMMENT_ONLY 
; //	for (i=0;i<(n/2);i++)
; //	{ 
; //		br = i; //bitrev(i,log2n-1); 
; //		printf("(%g\t%g)\n", W_re[br], W_im[br]);
; //	}  
; //#endif 
; }
			; SOURCE LINE # 68
?C0012:
	RET  	
; END OF _compute_W

; 
; 
; /* permutes the array using a bit-reversal permutation */ 
; void permute_bitrev(int n, int *A_re, int *A_im) 

	RSEG  ?PR?_permute_bitrev?MAIN
_permute_bitrev:
	USING	0
			; SOURCE LINE # 72
	MOV  	n?352,R6
	MOV  	n?352+01H,R7
	MOV  	A_re?353,R3
	MOV  	A_re?353+01H,R2
	MOV  	A_re?353+02H,R1
; { 
			; SOURCE LINE # 73
; 	int idata i;
; 	int idata bri;
; 	int idata log2n;
; 	int idata t_re;
; 	int idata t_im;
; 
; 	log2n = log_2(n); 
			; SOURCE LINE # 80


	MOV R0,#LOW(ECO_PAGE_REGISTER6)
	MOV	A,R6
    MOV @R0,A

	MOV R0,#LOW(ECO_PAGE_REGISTER7)
	MOV	A,R7
    MOV @R0,A

	;LCALL	_log_2
	MOV ECO_PAGE_ADDR,#HIGH (_log_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (_log_2)
    LCALL   eco_page_manager

; 		blink_led();
			; SOURCE LINE # 214
	;XRL  	P0,#020H

	MOV  	R0,#LOW (log2n?357)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
; 
; 	for (i=0; i<n; i++)
			; SOURCE LINE # 82
	CLR  	A
	MOV  	R0,#LOW (i?355)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0013:
	MOV  	R0,#LOW (i?355)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,n?352+01H
	MOV  	A,n?352
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,R0
	JC   	$ + 0BH
	;LJMP 	?C0017
	MOV ECO_PAGE_ADDR,#HIGH (?C0017)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0017)
    LJMP   eco_page_manager
; 	{
			; SOURCE LINE # 83
; 		bri  = bitrev(i, log2n);
			; SOURCE LINE # 84

	;XRL  	P0,#020H

	MOV  	R0,#LOW (log2n?357)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	;MOV R0,#LOW (ECO_PAGE_REGISTER4)
    ;MOV @R0,A

    ;MOV R0,#LOW (ECO_PAGE_REGISTER5)
    ;MOV @R0,A

	LCALL	_bitrev
    ;MOV ECO_PAGE_ADDR,#HIGH (_bitrev)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (_bitrev)
    ;LCALL   eco_page_manager

	MOV  	R0,#LOW (bri?356)
	MOV  	A,R6
	MOV  	@R0,A
	INC  	R0
	MOV  	A,R7
	MOV  	@R0,A
; 
; 		/* skip already swapped elements */
; 		if (bri <= i) continue;
			; SOURCE LINE # 87
	MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev_1)
    MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev_1)
    LJMP   eco_page_manager



    RSEG  ?PR?_permute_bitrev_1?MAIN
_permute_bitrev_1:
    USING   0


	MOV  	R0,#LOW (i?355)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	SETB 	C
	MOV  	A,R7
	SUBB 	A,R5
	MOV  	A,R4
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	$ + 0BH
	;LJMP 	?C0015
	MOV ECO_PAGE_ADDR,#HIGH (?C0015)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0015)
    LJMP   eco_page_manager
?C0016:
; 
; 		t_re = A_re[i];
			; SOURCE LINE # 89

	MOV  	R0,#LOW (i?355+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	R3,A_re?353
	MOV  	R2,A_re?353+01H
	MOV  	R1,A_re?353+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR

	MOV  	R0,#LOW (t_re?358)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A
; 		t_im = A_im[i];
			; SOURCE LINE # 90
	MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev_2)
    LJMP   eco_page_manager



    RSEG  ?PR?_permute_bitrev_2?MAIN
_permute_bitrev_2:
    USING   0


	MOV  	R3,A_im?354
	MOV  	R2,A_im?354+01H
	MOV  	R1,A_im?354+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	LCALL	?C?ILDOPTR
	MOV  	R0,#LOW (t_im?359)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A
; 		A_re[i]= A_re[bri];
			; SOURCE LINE # 91
	MOV  	R0,#LOW (bri?356+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,A_re?353
	MOV  	R2,A_re?353+01H
	MOV  	R1,A_re?353+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R5,A
	MOV  	R0,#LOW (i?355+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,B
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 		A_im[i]= A_im[bri];
			; SOURCE LINE # 92

; 		blink_led();
			; SOURCE LINE # 195
	XRL  	P0,#020H
; 		blink_led();
			; SOURCE LINE # 195
	;XRL  	P0,#020H

	MOV  	R0,#LOW (bri?356+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,A_im?354
	MOV  	R2,A_im?354+01H
	MOV  	R1,A_im?354+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R5,A
	MOV  	R0,#LOW (i?355+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,B
	MOV  	B,R5
	LCALL	?C?ISTOPTR
	MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev_3)
    MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev_3)
    LJMP   eco_page_manager



    RSEG  ?PR?_permute_bitrev_3?MAIN
_permute_bitrev_3:
    USING   0


; 		A_re[bri]= t_re;
			; SOURCE LINE # 93	
	MOV  	R0,#LOW (t_re?358)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	MOV  	R0,#LOW (bri?356+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	R3,A_re?353
	MOV  	R2,A_re?353+01H
	MOV  	R1,A_re?353+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R4
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 		A_im[bri]= t_im;
			; SOURCE LINE # 94
	MOV  	R0,#LOW (t_im?359)
	MOV  	A,@R0
	MOV  	R5,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R3,A_im?354
	MOV  	R2,A_im?354+01H
	MOV  	R1,A_im?354+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	XCH  	A,R5
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 	}  
			; SOURCE LINE # 95
?C0015:
	MOV  	R0,#LOW (i?355+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JZ   	$ + 0BH
	;LJMP 	?C0013
	MOV ECO_PAGE_ADDR,#HIGH (?C0013)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
    LJMP   eco_page_manager
	INC  	@R0
?C0037:
	;LJMP 	?C0013
	MOV ECO_PAGE_ADDR,#HIGH (?C0013)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
    LJMP   eco_page_manager
; } 
			; SOURCE LINE # 96
?C0017:
	RET  	
; END OF _permute_bitrev

; 
; 
; /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-unity lookup table
;  * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth roots of unity stored
;  * in a permuted bitreversal order.
;  *
;  * FFT - Decimation In Time FFT with input array in correct order and output array in bit-reversed order.
;  *
;  * REQ: n should be a power of 2 to work. 
;  *
;  * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other details about VHALF section of the algo
;  *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
;  *       - See the foll. CS267 website for details of the Decimation In Time FFT implemented here.
;  *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
;  *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" book for another variant of Iterative-FFT
;  */
; 
; //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
; void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 

	RSEG  ?PR?_fft?MAIN
_fft:
	USING	0
			; SOURCE LINE # 115
	MOV  	n?460,R6
	MOV  	n?460+01H,R7
	MOV  	A_re?461,R3
	MOV  	A_re?461+01H,R2
	MOV  	A_re?461+02H,R1
; {
			; SOURCE LINE # 116
; 	int idata w_re, w_im, u_re, u_im, t_re, t_im;
; 	int idata m, g, b;
; 	//int i;
; 	int idata mt, k;
; 
; 	/* for each stage */  
; 	for (m=n; m>=2; m=m>>1) 
			; SOURCE LINE # 123
	MOV  	R0,#LOW (m?471)
	MOV  	@R0,n?460
	INC  	R0
	MOV  	@R0,n?460+01H
?C0018:
	MOV  	R0,#LOW (m?471)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,#02H
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	$ + 0BH
	;LJMP 	?C0027
	MOV ECO_PAGE_ADDR,#HIGH (?C0027)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0027)
    LJMP   eco_page_manager
; 	{
			; SOURCE LINE # 124
; 		/* m = n/2^s; mt = m/2; */
; 		mt = m >> 1;
			; SOURCE LINE # 126
	MOV  	A,R6
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R1,#LOW (mt?474)
	MOV  	@R1,A
	MOV  	A,R7
	RRC  	A
	INC  	R1
	MOV  	@R1,A
; 
; 		/* for each group of butterfly */ 
; 		for (g=0,k=0; g<n; g+=m,k++) 
			; SOURCE LINE # 129
	CLR  	A
	INC  	R0
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
	MOV  	R0,#LOW (k?475)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0021:
	CLR  	C
	MOV  	R0,#LOW (g?472+01H)
	MOV  	A,@R0
	SUBB 	A,n?460+01H
	MOV  	A,n?460
	XRL  	A,#080H
	MOV  	B,A
	DEC  	R0
	MOV  	A,@R0
	XRL  	A,#080H
	SUBB 	A,B
	JC   	$ + 0BH
	;LJMP 	?C0020
	MOV ECO_PAGE_ADDR,#HIGH (?C0020)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0020)
    LJMP   eco_page_manager
; 		{
			; SOURCE LINE # 130
; 			/* each butterfly group uses only one root of unity. actually, it is the bitrev of this group's number k.
; 			 * BUT 'bitrev' it as a log2n-1 bit number because we are using a lookup array of nth root of unity and
; 			 * using cancellation lemma to scale nth root to n/2, n/4,... th root.
; 			 *
; 			 * It turns out like the foll.
; 			 *   w.re = W[bitrev(k, log2n-1)].re;
; 			 *   w.im = W[bitrev(k, log2n-1)].im;
; 			 * Still, we just use k, because the lookup array itself is bit-reversal permuted. 
; 			 */
; 			w_re = W_re[k];
			; SOURCE LINE # 140
	MOV ECO_PAGE_ADDR,#HIGH (_fft_1)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_1)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_1?MAIN
_fft_1:
    USING   0
	MOV  	R0,#LOW (k?475+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	R3,W_re?463
	MOV  	R2,W_re?463+01H
	MOV  	R1,W_re?463+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R0,#LOW (w_re?465)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A
; 			w_im = W_im[k];
			; SOURCE LINE # 141
	MOV  	R3,W_im?464
	MOV  	R2,W_im?464+01H
	MOV  	R1,W_im?464+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	LCALL	?C?ILDOPTR
	MOV  	R0,#LOW (w_im?466)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A
; 
; 			/* for each butterfly */ 
; 			for (b=g; b<(g+mt); b++) 
			; SOURCE LINE # 144
	MOV  	R0,#LOW (g?472)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
?C0024:
	MOV  	R1,#LOW (g?472+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	CLR  	C
	DEC  	R0
	MOV  	A,@R0
	SUBB 	A,R7
	MOV  	A,R6
	XRL  	A,#080H
	MOV  	B,A
	DEC  	R0
	MOV  	A,@R0
	XRL  	A,#080H
	SUBB 	A,B
	JC   	$ + 0BH
	;LJMP 	?C0023
	MOV ECO_PAGE_ADDR,#HIGH (?C0023)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0023)
    LJMP   eco_page_manager
; 			{
			; SOURCE LINE # 145
; 				/* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt]);
; 				 */ 
; 				//printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
; 
; 				/* t = w * A[b+mt] */
; 				t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
			; SOURCE LINE # 151
	MOV ECO_PAGE_ADDR,#HIGH (_fft_2)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_2)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_2?MAIN
_fft_2:
    USING   0


	MOV  	R1,#LOW (b?473+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R3,A_im?462
	MOV  	R2,A_im?462+01H
	MOV  	R1,A_im?462+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R5,A
	MOV  	R4,B
	;MOV R0,#LOW (ECO_PAGE_REGISTER5)
    ;MOV @R0,A
    ;MOV R0,#LOW (ECO_PAGE_REGISTER4)
    ;MOV @R0,B
    ;XRL    P0,#020H

    ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
   	MOV  	R0,#LOW (w_im?466)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	LCALL	?C?IMUL
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R1,#LOW (b?473+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R3,A_re?461
	MOV  	R2,A_re?461+01H
	MOV  	R1,A_re?461+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R3,A
	MOV  	R2,B
	MOV  	R0,#LOW (w_re?465)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R5,AR3
	MOV  	R4,AR2
	LCALL	?C?IMUL
	MOV  	R4,AR6
	MOV  	R5,AR7
	POP  	AR7
	POP  	AR6
	CLR  	C
	MOV  	A,R5
	SUBB 	A,R7
	MOV  	R0,#LOW (t_re?469+01H)
	MOV  	@R0,A
	MOV  	A,R4
	SUBB 	A,R6
	DEC  	R0
	MOV  	@R0,A
; 				t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
			; SOURCE LINE # 152
	MOV ECO_PAGE_ADDR,#HIGH (_fft_3)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_3)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_3?MAIN
_fft_3:
    USING   0


	MOV  	R0,#LOW (w_im?466)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R5,AR3
	MOV  	R4,AR2
	LCALL	?C?IMUL
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R1,#LOW (b?473+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R3,A_im?462
	MOV  	R2,A_im?462+01H
	MOV  	R1,A_im?462+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R5,A
	MOV  	R4,B
	MOV  	R0,#LOW (w_re?465)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	LCALL	?C?IMUL
	POP  	ACC
	ADD  	A,R7
	MOV  	R0,#LOW (t_im?470+01H)
	MOV  	@R0,A
	POP  	ACC
	ADDC 	A,R6
	DEC  	R0
	MOV  	@R0,A
; 
; 				/* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
; 				u_re = A_re[b];
			; SOURCE LINE # 155	

	MOV  	R0,#LOW (b?473+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	R3,A_re?461
	MOV  	R2,A_re?461+01H
	MOV  	R1,A_re?461+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	LCALL	?C?ILDOPTR
	MOV  	R0,#LOW (u_re?467)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A

; 				u_im = A_im[b];
			; SOURCE LINE # 156
	MOV ECO_PAGE_ADDR,#HIGH (_fft_4)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_4)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_4?MAIN
_fft_4:
    USING   0


	MOV  	R3,A_im?462
	MOV  	R2,A_im?462+01H
	MOV  	R1,A_im?462+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	LCALL	?C?ILDOPTR
	MOV  	R0,#LOW (u_im?468)
	MOV  	@R0,B
	INC  	R0
	MOV  	@R0,A


; 				A_re[b] = u_re + t_re;
			; SOURCE LINE # 157
	MOV  	R1,#LOW (u_re?467+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (t_re?469+01H)
	ADD  	A,@R0
	MOV  	R5,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (b?473+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,A_re?461
	MOV  	R2,A_re?461+01H
	MOV  	R1,A_re?461+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R4
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 				A_im[b] = u_im + t_im;
			; SOURCE LINE # 158

	MOV  	R1,#LOW (u_im?468+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (t_im?470+01H)
	ADD  	A,@R0
	MOV  	R5,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (b?473+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R3,A_im?462
	MOV  	R2,A_im?462+01H
	MOV  	R1,A_im?462+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R4
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 				A_re[b+mt] = u_re - t_re;
			; SOURCE LINE # 159
	MOV ECO_PAGE_ADDR,#HIGH (_fft_5)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_5)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_5?MAIN
_fft_5:
    USING   0


	CLR  	C
	MOV  	R1,#LOW (u_re?467+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (t_re?469+01H)
	SUBB 	A,@R0
	MOV  	R5,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	SUBB 	A,@R0
	MOV  	R4,A
	MOV  	R1,#LOW (b?473+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R3,A_re?461
	MOV  	R2,A_re?461+01H
	MOV  	R1,A_re?461+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R4
	MOV  	B,R5
	LCALL	?C?ISTOPTR
	

; 				A_im[b+mt] = u_im - t_im;
			; SOURCE LINE # 160
	CLR  	C
	MOV  	R1,#LOW (u_im?468+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (t_im?470+01H)
	SUBB 	A,@R0
	MOV  	R5,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	SUBB 	A,@R0
	MOV  	R4,A
	MOV  	R1,#LOW (b?473+01H)
	MOV  	A,@R1
	MOV  	R0,#LOW (mt?474+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,R7
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R3,A_im?462
	MOV  	R2,A_im?462+01H
	MOV  	R1,A_im?462+02H
	MOV  	DPL,R7
	MOV  	DPH,A
	MOV  	A,R4
	MOV  	B,R5
	LCALL	?C?ISTOPTR
; 
; 				/*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt]);
; 				 */         
; 				//printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m, g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
; 			}
			; SOURCE LINE # 165
	MOV ECO_PAGE_ADDR,#HIGH (_fft_6)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft_6)
    LJMP   eco_page_manager


    RSEG  ?PR?_fft_6?MAIN
_fft_6:
    USING   0


	MOV  	R0,#LOW (b?473+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0038
	INC  	@R0
?C0038:
	;LJMP 	?C0024
	MOV ECO_PAGE_ADDR,#HIGH (?C0024)
    MOV ECO_PAGE_ADDR+01H,#LOW (?C0024)
    LJMP   eco_page_manager
; 		}
			; SOURCE LINE # 166
?C0023:
	MOV  	R0,#LOW (m?471)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#LOW (g?472+01H)
	ADD  	A,@R0
	MOV  	@R0,A
	DEC  	R0
	MOV  	A,R6
	ADDC 	A,@R0
	MOV  	@R0,A
	MOV  	R0,#LOW (k?475+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JZ   	$ + 5H
	LJMP 	?C0021
	;MOV ECO_PAGE_ADDR,#HIGH (?C0021)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
    ;LJMP   eco_page_manager
	INC  	@R0
?C0039:
	LJMP 	?C0021
	;MOV ECO_PAGE_ADDR,#HIGH (?C0021)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
    ;LJMP   eco_page_manager
; 	}
			; SOURCE LINE # 167
?C0020:
	MOV  	R0,#LOW (m?471)
	MOV  	A,@R0
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R1,#LOW (m?471)
	MOV  	@R1,A
	INC  	R0
	MOV  	A,@R0
	RRC  	A
	INC  	R1
	MOV  	@R1,A
	LJMP 	?C0018
	;MOV ECO_PAGE_ADDR,#HIGH (?C0018)
    ;MOV ECO_PAGE_ADDR+01H,#LOW (?C0018)
    ;LJMP   eco_page_manager
; }
			; SOURCE LINE # 168
?C0027:
	RET  	
; END OF _fft

; 
; int main()

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 170
; {
			; SOURCE LINE # 171
; 	int idata n;
; 	//int idata i;
; 	int idata A_re[8];
; 	int idata A_im[8];
; 	int idata W_re[4];
; 	int idata W_im[4]; 
; 	//int idata A_re[16];
; 	//int idata A_im[16];
; 	//int idata W_re[8];
; 	//int idata W_im[8]; 
; 
; 	store_cpu_rate(16);
			; SOURCE LINE # 183
	MOV  	R7,#010H
	MOV  	R6,#00H
	LCALL	_store_cpu_rate
; 
; 	P0_DIR &= ~0x28;
			; SOURCE LINE # 185
	ANL  	P0_DIR,#0D7H
; 	P0_ALT &= ~0x28;
			; SOURCE LINE # 186
	ANL  	P0_ALT,#0D7H
; 
; 	test_counter = 0;	
			; SOURCE LINE # 188
	CLR  	A
	MOV  	test_counter,A
	MOV  	test_counter+01H,A
; 
; 	serial_init(19200);
			; SOURCE LINE # 190
	MOV  	R7,A
	MOV  	R6,#04BH
	LCALL	_serial_init
; 	int_print(test_counter);
			; SOURCE LINE # 191
	MOV  	R6,test_counter
	MOV  	R7,test_counter+01H
	LCALL	_?int_print
; 	puts("\r\n");	
			; SOURCE LINE # 192
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_puts
; 	for(n=0;n<6;n++)
			; SOURCE LINE # 193
	CLR  	A
	MOV  	R0,#LOW (n?576)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0028:
; 	{
			; SOURCE LINE # 194
	XRL  	P0,#020H
; 		mdelay(400);
			; SOURCE LINE # 196
	MOV  	R7,#090H
	MOV  	R6,#01H
	LCALL	_mdelay

; 	}
			; SOURCE LINE # 197
	MOV  	R0,#LOW (n?576+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0040
	INC  	@R0
?C0040:
	CLR  	C
	MOV  	R0,#LOW (n?576+01H)
	MOV  	A,@R0
	SUBB 	A,#06H
	DEC  	R0
	MOV  	A,@R0
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0028
?C0031:
; 	//A_re = (double*)malloc(sizeof(double)*n); 
; 	//A_im = (double*)malloc(sizeof(double)*n); 
; 	//W_re = (double*)malloc(sizeof(double)*n/2); 
; 	//W_im = (double*)malloc(sizeof(double)*n/2); 
; 	//assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
; 	
; 	while(1)
			; SOURCE LINE # 204
; 	{
			; SOURCE LINE # 205
; 	//for (i=0; i<3; i++) {
; 		//init_array(n, A_re, A_im); 
; 		n = 8;
			; SOURCE LINE # 208
	MOV  	R0,#LOW (n?576)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#08H
; 
; 		compute_W(n, W_re, W_im); 
			; SOURCE LINE # 210
	MOV  	?_compute_W?BYTE+05H,#00H
	MOV  	?_compute_W?BYTE+06H,#HIGH (W_im?580)
	MOV  	?_compute_W?BYTE+07H,#LOW (W_im?580)
	;MOV  	R3,#00H
	;MOV  	R2,#HIGH (W_re?579)
	;MOV  	R1,#LOW (W_re?579)
	;MOV  	R7,#08H
	;MOV  	R6,#00H

	MOV R0,#LOW (ECO_PAGE_REGISTER3)
    MOV @R0,#00H

    MOV R0,#LOW (ECO_PAGE_REGISTER2)
    MOV @R0,#HIGH (W_re?579)

    MOV R0,#LOW (ECO_PAGE_REGISTER1)
    MOV @R0,#LOW (W_re?579)

	MOV R0,#LOW (ECO_PAGE_REGISTER7)
    MOV @R0,#08H

    MOV R0,#LOW (ECO_PAGE_REGISTER6)
    MOV @R0,#00H

	;LCALL	_compute_W
	MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    MOV ECO_PAGE_ADDR,#HIGH (_compute_W)
    MOV ECO_PAGE_ADDR+01H,#LOW (_compute_W)
    LCALL   eco_page_manager
; 		fft(n, A_re, A_im, W_re, W_im);
			; SOURCE LINE # 211
	MOV  	R0,#LOW (n?576)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A

	MOV R0,#LOW (ECO_PAGE_REGISTER6)
    MOV A,R6
    MOV @R0,A
    MOV R0,#LOW (ECO_PAGE_REGISTER7)
    MOV A,R7
    MOV @R0,A

	MOV  	?_fft?BYTE+05H,#00H
	MOV  	?_fft?BYTE+06H,#HIGH (A_im?578)
	MOV  	?_fft?BYTE+07H,#LOW (A_im?578)
	MOV  	?_fft?BYTE+08H,#00H
	MOV  	?_fft?BYTE+09H,#HIGH (W_re?579)
	MOV  	?_fft?BYTE+0AH,#LOW (W_re?579)
	MOV  	?_fft?BYTE+0BH,#00H
	MOV  	?_fft?BYTE+0CH,#HIGH (W_im?580)
	MOV  	?_fft?BYTE+0DH,#LOW (W_im?580)
	MOV  	R3,#00H
	MOV  	R2,#HIGH (A_re?577)
	MOV  	R1,#LOW (A_re?577)
	MOV R0,#LOW (ECO_PAGE_REGISTER3)
    MOV @R0,#00H

    MOV R0,#LOW (ECO_PAGE_REGISTER2)
    MOV @R0,#HIGH (A_re?577)

    MOV R0,#LOW (ECO_PAGE_REGISTER1)
    MOV @R0,#LOW (A_re?577)
	;LCALL	_fft
	MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    MOV ECO_PAGE_ADDR,#HIGH (_fft)
    MOV ECO_PAGE_ADDR+01H,#LOW (_fft)
    LCALL   eco_page_manager

; 		permute_bitrev(n, A_re, A_im);
			; SOURCE LINE # 212
	MOV  	R0,#LOW (n?576)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A

	MOV R0,#LOW (ECO_PAGE_REGISTER6)
    MOV A,R6
    MOV @R0,A
    MOV R0,#LOW (ECO_PAGE_REGISTER7)
    MOV A,R7
    MOV @R0,A

	MOV  	?_permute_bitrev?BYTE+05H,#00H
	MOV  	?_permute_bitrev?BYTE+06H,#HIGH (A_im?578)
	MOV  	?_permute_bitrev?BYTE+07H,#LOW (A_im?578)
	;MOV  	R3,#00H
	;MOV  	R2,#HIGH (A_re?577)
	;MOV  	R1,#LOW (A_re?577)
	MOV R0,#LOW (ECO_PAGE_REGISTER3)
    MOV @R0,#00H

    MOV R0,#LOW (ECO_PAGE_REGISTER2)
    MOV @R0,#HIGH (A_re?577)

    MOV R0,#LOW (ECO_PAGE_REGISTER1)
    MOV @R0,#LOW (A_re?577)
	;LCALL	_permute_bitrev
	MOV ECO_PAGE_SPI_CONN,SPI_CTRL
    MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev)
    MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev)
    LCALL   eco_page_manager
; 
; 		blink_led();
			; SOURCE LINE # 214
	;XRL  	P0,#020H
; 		mdelay(100);
			; SOURCE LINE # 215
	;MOV  	R7,#064H
	;MOV  	R6,#00H
	;LCALL	_mdelay
; 
; 		test_counter++;
			; SOURCE LINE # 217
	INC  	test_counter+01H
	MOV  	A,test_counter+01H
	JNZ  	?C0041
	INC  	test_counter
?C0041:
; 
; 		int_print(test_counter);
			; SOURCE LINE # 219
	MOV  	R6,test_counter
	MOV  	R7,test_counter+01H
	LCALL	_?int_print
; 		puts("\r\n");
			; SOURCE LINE # 220
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (?SC_0)
	MOV  	R1,#LOW (?SC_0)
	LCALL	_puts
; 	//}
; 	}
			; SOURCE LINE # 222
	LJMP 	?C0031
; END OF main

	END

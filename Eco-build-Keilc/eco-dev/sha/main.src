; ./main.src generated from: .\main.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(../../Include) SRC(./main.src)

$NOMOD51

NAME	MAIN

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?_SHA1ProcessMessageBlock?MAIN        SEGMENT CODE 
?DT?_SHA1ProcessMessageBlock?MAIN        SEGMENT DATA OVERLAYABLE 
?PR?_SHA1Reset?MAIN  SEGMENT CODE 
?PR?_SHA1PadMessage?MAIN                 SEGMENT CODE 
?DT?_SHA1PadMessage?MAIN                 SEGMENT DATA OVERLAYABLE 
?PR?_SHA1Result?MAIN SEGMENT CODE 
?DT?_SHA1Result?MAIN SEGMENT DATA OVERLAYABLE 
?PR?_SHA1Input?MAIN  SEGMENT CODE 
?DT?_SHA1Input?MAIN  SEGMENT DATA OVERLAYABLE 
?PR?main?MAIN        SEGMENT CODE 
?CO?MAIN             SEGMENT CODE 
?ID?_SHA1ProcessMessageBlock?MAIN        SEGMENT IDATA OVERLAYABLE 
?XD?_SHA1ProcessMessageBlock?MAIN        SEGMENT XDATA OVERLAYABLE 
?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
	EXTRN	CODE (_mdelay)
	EXTRN	CODE (_serial_init)
	EXTRN	CODE (_store_cpu_rate)
	EXTRN	CODE (?C?COPY)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	main
	PUBLIC	_SHA1Input
	PUBLIC	_SHA1Result
	PUBLIC	_SHA1PadMessage
	PUBLIC	_SHA1Reset
	PUBLIC	_SHA1ProcessMessageBlock

	RSEG  ?DT?_SHA1Result?MAIN
?_SHA1Result?BYTE:
    context?352:   DS   1

	RSEG  ?DT?_SHA1Input?MAIN
?_SHA1Input?BYTE:
    context?453:   DS   1
	ORG  1
message_array?454:   DS   1
	ORG  2
     length?455:   DS   2

	RSEG  ?DT?_SHA1ProcessMessageBlock?MAIN
?_SHA1ProcessMessageBlock?BYTE:
    context?040:   DS   1

	RSEG  ?DT?_SHA1PadMessage?MAIN
?_SHA1PadMessage?BYTE:
    context?251:   DS   1

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          K?041:   DS   8

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          t?042:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
       temp?043:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          A?045:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          B?046:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          C?047:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          D?048:   DS   2

	RSEG  ?ID?_SHA1ProcessMessageBlock?MAIN
          E?049:   DS   2

	RSEG  ?XD?_SHA1ProcessMessageBlock?MAIN
          W?044:   DS   160

	RSEG  ?ID?main?MAIN
          i?556:   DS   1

	RSEG  ?ID?main?MAIN
        sha?557:   DS   83

	RSEG  ?CO?MAIN
?SC_0:
	DB  'a' ,'b' ,'c' ,000H

_?ix1000:
	DW	07999H
	DW	0EBA1H
	DW	0BCDCH
	DW	0C1D6H

; #include "Eco/reg24e1.h"
; #include "Eco/eco_sys.h"
; #include "utils/utils.h"
; #include "serial/serial.h"
; //#include "isr/isr_rf.h"
; #include "eeprom/eeprom.h"
; #include "eco_page.h"
; //#include "adc/adc.h"
; 
; #define TESTA   "abc"
; #define SHA1CircularShift(bits,word) \
;                 ((((word) << (bits)) & 0xFFFFFFFF) | \
;                 ((word) >> (32-(bits))))
; 
; 
; typedef struct SHA1Context
; {
;     unsigned Message_Digest[5]; /* Message Digest (output)          */
; 
;     unsigned Length_Low;        /* Message length in bits           */
;     unsigned Length_High;       /* Message length in bits           */
; 
;     unsigned char Message_Block[64]; /* 256-bit message blocks      */
;     char Message_Block_Index;    /* Index into message block array   */
; 
;     int Computed;               /* Is the digest computed?          */
;     int Corrupted;              /* Is the message digest corruped?  */
; } SHA1Context;
; 
; 
; void SHA1ProcessMessageBlock(SHA1Context idata *context)

	RSEG  ?PR?_SHA1ProcessMessageBlock?MAIN
_SHA1ProcessMessageBlock:
	USING	0
			; SOURCE LINE # 31
	MOV  	context?040,R7
; {
			; SOURCE LINE # 32
; 	idata unsigned K[] =            /* Constants defined in SHA-1   */      
			; SOURCE LINE # 33
	MOV  	R0,#LOW (K?041)
	MOV  	R4,#HIGH (K?041)
	MOV  	R5,#00H
	MOV  	R3,#0FFH
	MOV  	R2,#HIGH (_?ix1000)
	MOV  	R1,#LOW (_?ix1000)
	MOV  	R6,#00H
	MOV  	R7,#08H
	LCALL	?C?COPY
;     {
;         0x5A827999,
;         0x6ED9EBA1,
;         0x8F1BBCDC,
;         0xCA62C1D6
;     };
;     idata int         t;                  /* Loop counter                 */
;     idata unsigned    temp;               /* Temporary word value         */
;     xdata unsigned    W[80];              /* Word sequence                */
;     idata unsigned    A, B, C, D, E;      /* Word buffers                 */
; 
;     /*
;      *  Initialize the first 16 words in the array W
;      */
;     for(t = 0; t < 16; t++)
			; SOURCE LINE # 48
	CLR  	A
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0001:
;     {
			; SOURCE LINE # 49
;         W[t] = ((unsigned) context->Message_Block[t * 4]) << 24;
			; SOURCE LINE # 50
	MOV  	A,context?040
	ADD  	A,#0EH
	MOV  	R0,A
	PUSH 	AR0
	MOV  	R0,#LOW (t?042)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	POP  	AR0
	ADD  	A,ACC
	ADD  	A,ACC
	ADD  	A,R0
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,#00H
	MOV  	R0,#018H
?C0048:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0048
	MOV  	R3,A
	MOV  	R2,AR6
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R3
	MOVX 	@DPTR,A
;         W[t] |= ((unsigned) context->Message_Block[t * 4 + 1]) << 16;
			; SOURCE LINE # 51
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	PUSH 	DPH
	PUSH 	DPL
	MOV  	R0,#LOW (t?042)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	ADD  	A,ACC
	ADD  	A,ACC
	ADD  	A,#0FH
	ADD  	A,context?040
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,#00H
	MOV  	R0,#010H
?C0049:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0049
	MOV  	R7,A
	MOVX 	A,@DPTR
	ORL  	A,R6
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ORL  	A,R7
	MOV  	R7,A
	POP  	DPL
	POP  	DPH
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;         W[t] |= ((unsigned) context->Message_Block[t * 4 + 2]) << 8;
			; SOURCE LINE # 52
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	PUSH 	DPH
	PUSH 	DPL
	MOV  	R0,#LOW (t?042)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	ADD  	A,ACC
	ADD  	A,ACC
	ADD  	A,#010H
	ADD  	A,context?040
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	MOVX 	A,@DPTR
	ORL  	A,R6
	MOV  	R7,A
	INC  	DPTR
	MOVX 	A,@DPTR
	POP  	DPL
	POP  	DPH
	XCH  	A,R7
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;         W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
			; SOURCE LINE # 53
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	PUSH 	DPH
	PUSH 	DPL
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	ADD  	A,ACC
	ADD  	A,#011H
	ADD  	A,context?040
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R7,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ORL  	A,R7
	MOV  	R7,A
	POP  	DPL
	POP  	DPH
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;     }
			; SOURCE LINE # 54
	MOV  	R0,#LOW (t?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0050
	INC  	@R0
?C0050:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#010H
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0001
?C0002:
; 
;     for(t = 16; t < 80; t++)
			; SOURCE LINE # 56
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#010H
?C0004:
;     {
			; SOURCE LINE # 57
;        W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
			; SOURCE LINE # 58
	MOV  	R0,#LOW (t?042)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044+0FFF0H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFF0H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,#LOW (W?044+0FFFAH)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFFAH)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R2
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R3
	MOV  	R3,A
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044+0FFE4H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFE4H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R2
	MOV  	R4,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R3
	MOV  	R5,A
	MOV  	A,#LOW (W?044+0FFE0H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFE0H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R4
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R6
	RLC  	A
	MOV  	R6,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	DEC  	R0
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044+0FFF0H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFF0H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R3,A
	MOV  	A,#LOW (W?044+0FFFAH)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFFAH)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R2
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R3
	MOV  	R3,A
	MOV  	A,R5
	ADD  	A,ACC
	MOV  	R7,A
	MOV  	A,R4
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044+0FFE4H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFE4H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R2
	MOV  	R4,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R3
	MOV  	R5,A
	MOV  	A,#LOW (W?044+0FFE0H)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044+0FFE0H)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	XRL  	A,R4
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	XRL  	A,R5
	MOV  	R0,#01FH
?C0051:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0051
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R5,AR7
	MOV  	R4,AR6
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOV  	A,R4
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R5
	MOVX 	@DPTR,A
;     }
			; SOURCE LINE # 59
	INC  	R0
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0052
	INC  	@R0
?C0052:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#050H
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0004
?C0005:
; 
;     A = context->Message_Digest[0];
			; SOURCE LINE # 61
	MOV  	R0,context?040
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (A?045)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     B = context->Message_Digest[1];
			; SOURCE LINE # 62
	MOV  	A,context?040
	ADD  	A,#02H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (B?046)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     C = context->Message_Digest[2];
			; SOURCE LINE # 63
	MOV  	A,context?040
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (C?047)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     D = context->Message_Digest[3];
			; SOURCE LINE # 64
	MOV  	A,context?040
	ADD  	A,#06H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (D?048)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     E = context->Message_Digest[4];
			; SOURCE LINE # 65
	MOV  	A,context?040
	ADD  	A,#08H
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	R0,#LOW (E?049)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
; 
;     for(t = 0; t < 20; t++)
			; SOURCE LINE # 67
	CLR  	A
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
?C0007:
;     {
			; SOURCE LINE # 68
;         temp =  SHA1CircularShift(5,A) +
			; SOURCE LINE # 69
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#05H
?C0053:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0053
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01BH
?C0054:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0054
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	CPL  	A
	MOV  	R5,A
	MOV  	A,R4
	CPL  	A
	MOV  	R0,#LOW (D?048)
	ANL  	A,@R0
	MOV  	R4,A
	MOV  	A,R5
	INC  	R0
	ANL  	A,@R0
	MOV  	R5,A
	MOV  	R1,#LOW (B?046)
	MOV  	A,@R1
	MOV  	R0,#LOW (C?047)
	ANL  	A,@R0
	MOV  	R2,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	ANL  	A,@R0
	MOV  	R3,A
	MOV  	A,R2
	ORL  	A,R4
	MOV  	R4,A
	MOV  	A,R3
	ORL  	A,R5
	ADD  	A,R7
	MOV  	R7,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (E?049+01H)
	ADD  	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ADD  	A,R5
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (K?041+01H)
	ADD  	A,@R0
	MOV  	R7,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	R0,#LOW (temp?043)
	MOV  	@R0,A
	INC  	R0
	MOV  	A,R7
	MOV  	@R0,A
;                 ((B & C) | ((~B) & D)) + E + W[t] + K[0];
;         temp &= 0xFFFFFFFF;
			; SOURCE LINE # 71
	MOV  	A,R6
	DEC  	R0
	MOV  	@R0,A
	MOV  	A,R7
	INC  	R0
	MOV  	@R0,A
;         E = D;
			; SOURCE LINE # 72
	MOV  	R0,#LOW (D?048)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         D = C;
			; SOURCE LINE # 73
	MOV  	R0,#LOW (C?047)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         C = SHA1CircularShift(30,B);
			; SOURCE LINE # 74
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01EH
?C0055:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0055
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#02H
?C0056:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0056
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R0,#LOW (C?047)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         B = A;
			; SOURCE LINE # 75
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         A = temp;
			; SOURCE LINE # 76
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     }
			; SOURCE LINE # 77
	MOV  	R0,#LOW (t?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0057
	INC  	@R0
?C0057:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#014H
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0007
?C0008:
; 
;     for(t = 20; t < 40; t++)
			; SOURCE LINE # 79
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#014H
?C0010:
;     {
			; SOURCE LINE # 80
;         temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
			; SOURCE LINE # 81
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#05H
?C0058:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0058
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01BH
?C0059:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0059
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R1,#LOW (B?046)
	MOV  	A,@R1
	MOV  	R0,#LOW (C?047)
	XRL  	A,@R0
	MOV  	R4,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	XRL  	A,@R0
	MOV  	R5,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R3,A
	MOV  	A,R4
	XRL  	A,R2
	MOV  	R4,A
	MOV  	A,R5
	XRL  	A,R3
	ADD  	A,R7
	MOV  	R7,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (E?049+01H)
	ADD  	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ADD  	A,R5
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (K?041+03H)
	ADD  	A,@R0
	MOV  	R1,#LOW (temp?043+01H)
	MOV  	@R1,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	DEC  	R1
	MOV  	@R1,A
;         temp &= 0xFFFFFFFF;
			; SOURCE LINE # 82
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	@R0,A
	INC  	R0
	MOV  	A,@R0
	MOV  	@R0,A
;         E = D;
			; SOURCE LINE # 83
	MOV  	R0,#LOW (E?049)
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR3
;         D = C;
			; SOURCE LINE # 84
	MOV  	R0,#LOW (C?047)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         C = SHA1CircularShift(30,B);
			; SOURCE LINE # 85
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01EH
?C0060:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0060
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#02H
?C0061:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0061
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R0,#LOW (C?047)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         B = A;
			; SOURCE LINE # 86
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         A = temp;
			; SOURCE LINE # 87
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     }
			; SOURCE LINE # 88
	MOV  	R0,#LOW (t?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0062
	INC  	@R0
?C0062:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#028H
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0010
?C0011:
; 
;     for(t = 40; t < 60; t++)
			; SOURCE LINE # 90
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#028H
?C0013:
;     {
			; SOURCE LINE # 91
;         temp = SHA1CircularShift(5,A) +
			; SOURCE LINE # 92
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#05H
?C0063:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0063
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01BH
?C0064:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0064
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R1,#LOW (B?046)
	MOV  	A,@R1
	MOV  	R0,#LOW (D?048)
	ANL  	A,@R0
	MOV  	R4,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	ANL  	A,@R0
	MOV  	R5,A
	DEC  	R1
	MOV  	A,@R1
	MOV  	R0,#LOW (C?047)
	ANL  	A,@R0
	MOV  	R2,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	ANL  	A,@R0
	MOV  	R3,A
	MOV  	A,R2
	ORL  	A,R4
	MOV  	R4,A
	MOV  	A,R3
	ORL  	A,R5
	MOV  	R5,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	ANL  	A,@R0
	MOV  	R2,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	ANL  	A,@R0
	MOV  	R3,A
	MOV  	A,R4
	ORL  	A,R2
	MOV  	R4,A
	MOV  	A,R5
	ORL  	A,R3
	ADD  	A,R7
	MOV  	R7,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (E?049+01H)
	ADD  	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ADD  	A,R5
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (K?041+05H)
	ADD  	A,@R0
	MOV  	R7,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	R0,#LOW (temp?043)
	MOV  	@R0,A
	INC  	R0
	MOV  	A,R7
	MOV  	@R0,A
;                ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
;         temp &= 0xFFFFFFFF;
			; SOURCE LINE # 94
	MOV  	A,R6
	DEC  	R0
	MOV  	@R0,A
	MOV  	A,R7
	INC  	R0
	MOV  	@R0,A
;         E = D;
			; SOURCE LINE # 95
	MOV  	R0,#LOW (D?048)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         D = C;
			; SOURCE LINE # 96
	MOV  	R0,#LOW (C?047)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         C = SHA1CircularShift(30,B);
			; SOURCE LINE # 97
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01EH
?C0065:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0065
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#02H
?C0066:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0066
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R0,#LOW (C?047)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         B = A;
			; SOURCE LINE # 98
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         A = temp;
			; SOURCE LINE # 99
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     }
			; SOURCE LINE # 100
	MOV  	R0,#LOW (t?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0067
	INC  	@R0
?C0067:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#03CH
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0013
?C0014:
; 
;     for(t = 60; t < 80; t++)
			; SOURCE LINE # 102
	MOV  	R0,#LOW (t?042)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#03CH
?C0016:
;     {
			; SOURCE LINE # 103
;         temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
			; SOURCE LINE # 104
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#05H
?C0068:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0068
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01BH
?C0069:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0069
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R1,#LOW (B?046)
	MOV  	A,@R1
	MOV  	R0,#LOW (C?047)
	XRL  	A,@R0
	MOV  	R4,A
	INC  	R1
	MOV  	A,@R1
	INC  	R0
	XRL  	A,@R0
	MOV  	R5,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R3,A
	MOV  	A,R4
	XRL  	A,R2
	MOV  	R4,A
	MOV  	A,R5
	XRL  	A,R3
	ADD  	A,R7
	MOV  	R7,A
	MOV  	A,R4
	ADDC 	A,R6
	MOV  	R6,A
	MOV  	A,R7
	MOV  	R0,#LOW (E?049+01H)
	ADD  	A,@R0
	MOV  	R5,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R4,A
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	ADD  	A,ACC
	MOV  	R7,A
	DEC  	R0
	MOV  	A,@R0
	RLC  	A
	MOV  	R6,A
	MOV  	A,#LOW (W?044)
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#HIGH (W?044)
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	ADD  	A,R5
	MOV  	R7,A
	MOV  	A,R6
	ADDC 	A,R4
	MOV  	R6,A
	MOV  	A,R7
	DEC  	R0
	ADD  	A,@R0
	MOV  	R1,#LOW (temp?043+01H)
	MOV  	@R1,A
	MOV  	A,R6
	DEC  	R0
	ADDC 	A,@R0
	DEC  	R1
	MOV  	@R1,A
;         temp &= 0xFFFFFFFF;
			; SOURCE LINE # 105
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	@R0,A
	INC  	R0
	MOV  	A,@R0
	MOV  	@R0,A
;         E = D;
			; SOURCE LINE # 106
	MOV  	R0,#LOW (E?049)
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR3
;         D = C;
			; SOURCE LINE # 107
	MOV  	R0,#LOW (C?047)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         C = SHA1CircularShift(30,B);
			; SOURCE LINE # 108
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#01EH
?C0070:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0070
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R0,#LOW (B?046)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R0,#02H
?C0071:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0071
	MOV  	R7,A
	POP  	AR3
	POP  	AR2
	POP  	AR1
	POP  	AR0
	MOV  	A,R3
	ORL  	A,R7
	MOV  	R7,A
	MOV  	A,R2
	ORL  	A,R6
	MOV  	R6,A
	MOV  	R0,#LOW (C?047)
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         B = A;
			; SOURCE LINE # 109
	MOV  	R0,#LOW (A?045)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;         A = temp;
			; SOURCE LINE # 110
	MOV  	R0,#LOW (temp?043)
	MOV  	A,@R0
	MOV  	R6,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	INC  	R0
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;     }
			; SOURCE LINE # 111
	MOV  	R0,#LOW (t?042+01H)
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0072
	INC  	@R0
?C0072:
	MOV  	R0,#LOW (t?042+01H)
	MOV  	A,@R0
	XRL  	A,#050H
	DEC  	R0
	ORL  	A,@R0
	JZ   	$ + 5H
	LJMP 	?C0016
?C0017:
; 
;     context->Message_Digest[0] =
			; SOURCE LINE # 113
	MOV  	R1,context?040
	INC  	R1
	MOV  	A,@R1
	MOV  	R0,#LOW (A?045+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	R0,context?040
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;                         (context->Message_Digest[0] + A) & 0xFFFFFFFF;
;     context->Message_Digest[1] =
			; SOURCE LINE # 115
	MOV  	A,context?040
	ADD  	A,#03H
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R0,#LOW (B?046+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,context?040
	ADD  	A,#02H
	MOV  	R0,A
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;                         (context->Message_Digest[1] + B) & 0xFFFFFFFF;
;     context->Message_Digest[2] =
			; SOURCE LINE # 117
	MOV  	A,context?040
	ADD  	A,#05H
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R0,#LOW (C?047+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,context?040
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;                         (context->Message_Digest[2] + C) & 0xFFFFFFFF;
;     context->Message_Digest[3] =
			; SOURCE LINE # 119
	MOV  	A,context?040
	ADD  	A,#07H
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R0,#LOW (D?048+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,context?040
	ADD  	A,#06H
	MOV  	R0,A
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;                         (context->Message_Digest[3] + D) & 0xFFFFFFFF;
;     context->Message_Digest[4] =
			; SOURCE LINE # 121
	MOV  	A,context?040
	ADD  	A,#09H
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R0,#LOW (E?049+01H)
	ADD  	A,@R0
	MOV  	R7,A
	DEC  	R1
	MOV  	A,@R1
	DEC  	R0
	ADDC 	A,@R0
	MOV  	R6,A
	MOV  	A,context?040
	ADD  	A,#08H
	MOV  	R0,A
	MOV  	@R0,AR6
	INC  	R0
	MOV  	@R0,AR7
;                         (context->Message_Digest[4] + E) & 0xFFFFFFFF;
; 
;     context->Message_Block_Index = 0;
			; SOURCE LINE # 124
	MOV  	A,context?040
	ADD  	A,#04EH
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
; 
; }
			; SOURCE LINE # 126
	RET  	
; END OF _SHA1ProcessMessageBlock

; 
; 
; void SHA1Reset(SHA1Context idata *context)

	RSEG  ?PR?_SHA1Reset?MAIN
_SHA1Reset:
	USING	0
			; SOURCE LINE # 129
;---- Variable 'context?150' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 130
;     context->Length_Low             = 0;
			; SOURCE LINE # 131
	MOV  	A,R7
	ADD  	A,#0AH
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
;     context->Length_High            = 0;
			; SOURCE LINE # 132
	MOV  	A,R7
	ADD  	A,#0CH
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
;     context->Message_Block_Index    = 0;
			; SOURCE LINE # 133
	MOV  	A,R7
	ADD  	A,#04EH
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
; 
;     context->Message_Digest[0]      = 0x67452301;
			; SOURCE LINE # 135
	MOV  	R0,AR7
	MOV  	@R0,#023H
	INC  	R0
	MOV  	@R0,#01H
;     context->Message_Digest[1]      = 0xEFCDAB89;
			; SOURCE LINE # 136
	MOV  	A,R7
	ADD  	A,#02H
	MOV  	R0,A
	MOV  	@R0,#0ABH
	INC  	R0
	MOV  	@R0,#089H
;     context->Message_Digest[2]      = 0x98BADCFE;
			; SOURCE LINE # 137
	MOV  	A,R7
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	@R0,#0DCH
	INC  	R0
	MOV  	@R0,#0FEH
;     context->Message_Digest[3]      = 0x10325476;
			; SOURCE LINE # 138
	MOV  	A,R7
	ADD  	A,#06H
	MOV  	R0,A
	MOV  	@R0,#054H
	INC  	R0
	MOV  	@R0,#076H
;     context->Message_Digest[4]      = 0xC3D2E1F0;
			; SOURCE LINE # 139
	MOV  	A,R7
	ADD  	A,#08H
	MOV  	R0,A
	MOV  	@R0,#0E1H
	INC  	R0
	MOV  	@R0,#0F0H
; 
;     context->Computed   = 0;
			; SOURCE LINE # 141
	MOV  	A,R7
	ADD  	A,#04FH
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
;     context->Corrupted  = 0;
			; SOURCE LINE # 142
	MOV  	A,R7
	ADD  	A,#051H
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
	INC  	R0
	MOV  	@R0,A
; }
			; SOURCE LINE # 143
	RET  	
; END OF _SHA1Reset

; 
; 
; void SHA1PadMessage(SHA1Context idata *context)

	RSEG  ?PR?_SHA1PadMessage?MAIN
_SHA1PadMessage:
	USING	0
			; SOURCE LINE # 146
	MOV  	context?251,R7
; {
			; SOURCE LINE # 147
;     /*
;      *  Check to see if the current message block is too small to hold
;      *  the initial padding bits and length.  If so, we will pad the
;      *  block, process it, and then continue padding into a second
;      *  block.
;      */
;     if (context->Message_Block_Index > 55)
			; SOURCE LINE # 154
	MOV  	R0,AR7
	MOV  	A,R0
	ADD  	A,#04EH
	MOV  	R1,A
	SETB 	C
	MOV  	A,@R1
	XRL  	A,#080H
	SUBB 	A,#0B7H
	JC   	?C0021
;     {
			; SOURCE LINE # 155
;         context->Message_Block[context->Message_Block_Index++] = 0x80;
			; SOURCE LINE # 156
	MOV  	A,R0
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#0EH
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#080H
?C0022:
;         while(context->Message_Block_Index < 64)
			; SOURCE LINE # 157
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R1,A
	CLR  	C
	MOV  	A,@R1
	XRL  	A,#080H
	SUBB 	A,#0C0H
	JNC  	?C0023
;         {
			; SOURCE LINE # 158
;             context->Message_Block[context->Message_Block_Index++] = 0;
			; SOURCE LINE # 159
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#0EH
	ADD  	A,R7
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
;         }
			; SOURCE LINE # 160
	SJMP 	?C0022
?C0023:
; 
;         SHA1ProcessMessageBlock(context);
			; SOURCE LINE # 162
	MOV  	R7,context?251
	LCALL	_SHA1ProcessMessageBlock
?C0024:
; 
;         while(context->Message_Block_Index < 56)
			; SOURCE LINE # 164
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R1,A
	CLR  	C
	MOV  	A,@R1
	XRL  	A,#080H
	SUBB 	A,#0B8H
	JNC  	?C0026
;         {
			; SOURCE LINE # 165
;             context->Message_Block[context->Message_Block_Index++] = 0;
			; SOURCE LINE # 166
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#0EH
	ADD  	A,R7
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
;         }
			; SOURCE LINE # 167
	SJMP 	?C0024
;     }
			; SOURCE LINE # 168
?C0021:
;     else
;     {
			; SOURCE LINE # 170
;         context->Message_Block[context->Message_Block_Index++] = 0x80;
			; SOURCE LINE # 171
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#0EH
	ADD  	A,R7
	MOV  	R0,A
	MOV  	@R0,#080H
?C0027:
;         while(context->Message_Block_Index < 56)
			; SOURCE LINE # 172
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R1,A
	CLR  	C
	MOV  	A,@R1
	XRL  	A,#080H
	SUBB 	A,#0B8H
	JNC  	?C0026
;         {
			; SOURCE LINE # 173
;             context->Message_Block[context->Message_Block_Index++] = 0;
			; SOURCE LINE # 174
	MOV  	A,context?251
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#0EH
	ADD  	A,R7
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
;         }
			; SOURCE LINE # 175
	SJMP 	?C0027
;     }
			; SOURCE LINE # 176
?C0026:
; 
;     /*
;      *  Store the message length as the last 8 octets
;      */
;     context->Message_Block[24] = (context->Length_High >> 24) & 0xFF;
			; SOURCE LINE # 181
	MOV  	A,context?251
	ADD  	A,#0CH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R6,A
	INC  	R1
	MOV  	A,@R1
	MOV  	R0,#018H
?C0073:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0073
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#026H
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[25] = (context->Length_High >> 16) & 0xFF;
			; SOURCE LINE # 182
	MOV  	A,context?251
	ADD  	A,#0CH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R6,A
	INC  	R1
	MOV  	A,@R1
	MOV  	R0,#010H
?C0074:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0074
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#027H
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[26] = (context->Length_High >> 8) & 0xFF;
			; SOURCE LINE # 183
	MOV  	A,context?251
	ADD  	A,#0CH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#028H
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[27] = (context->Length_High) & 0xFF;
			; SOURCE LINE # 184
	MOV  	A,context?251
	ADD  	A,#0DH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#029H
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[28] = (context->Length_Low >> 24) & 0xFF;
			; SOURCE LINE # 185
	MOV  	A,context?251
	ADD  	A,#0AH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R6,A
	INC  	R1
	MOV  	A,@R1
	MOV  	R0,#018H
?C0075:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0075
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#02AH
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[29] = (context->Length_Low >> 16) & 0xFF;
			; SOURCE LINE # 186
	MOV  	A,context?251
	ADD  	A,#0AH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R6,A
	INC  	R1
	MOV  	A,@R1
	MOV  	R0,#010H
?C0076:
	XCH  	A,R6
	CLR  	C
	RRC  	A
	XCH  	A,R6
	RRC  	A
	DJNZ 	R0,?C0076
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#02BH
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[30] = (context->Length_Low >> 8) & 0xFF;
			; SOURCE LINE # 187
	MOV  	A,context?251
	ADD  	A,#0AH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#02CH
	MOV  	R0,A
	MOV  	@R0,AR7
;     context->Message_Block[31] = (context->Length_Low) & 0xFF;
			; SOURCE LINE # 188
	MOV  	A,context?251
	ADD  	A,#0BH
	MOV  	R1,A
	MOV  	A,@R1
	MOV  	R7,A
	MOV  	A,context?251
	ADD  	A,#02DH
	MOV  	R0,A
	MOV  	@R0,AR7
; 
;     SHA1ProcessMessageBlock(context);
			; SOURCE LINE # 190
	MOV  	R7,context?251
	LJMP 	_SHA1ProcessMessageBlock
; END OF _SHA1PadMessage

; }
; 
; 
; int SHA1Result(SHA1Context idata *context)

	RSEG  ?PR?_SHA1Result?MAIN
_SHA1Result:
	USING	0
			; SOURCE LINE # 194
	MOV  	context?352,R7
; {
			; SOURCE LINE # 195
; 
;     if (context->Corrupted)
			; SOURCE LINE # 197
	MOV  	R0,AR7
	MOV  	A,R0
	ADD  	A,#052H
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JZ   	?C0030
;     {
			; SOURCE LINE # 198
;         return 0;
			; SOURCE LINE # 199
	CLR  	A
	MOV  	R6,A
	MOV  	R7,A
	RET  	
;     }
			; SOURCE LINE # 200
?C0030:
; 
;     if (!context->Computed)
			; SOURCE LINE # 202
	MOV  	A,context?352
	ADD  	A,#050H
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JNZ  	?C0032
;     {
			; SOURCE LINE # 203
;         SHA1PadMessage(context);
			; SOURCE LINE # 204
	MOV  	R7,context?352
	LCALL	_SHA1PadMessage
;         context->Computed = 1;
			; SOURCE LINE # 205
	MOV  	A,context?352
	ADD  	A,#04FH
	MOV  	R0,A
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#01H
;     }
			; SOURCE LINE # 206
?C0032:
; 
;     return 1;
			; SOURCE LINE # 208
	MOV  	R6,#00H
	MOV  	R7,#01H
; }
			; SOURCE LINE # 209
?C0031:
	RET  	
; END OF _SHA1Result

; 
; 
; void SHA1Input(SHA1Context idata *context,unsigned char idata *message_array,unsigned idata length)

	RSEG  ?PR?_SHA1Input?MAIN
_SHA1Input:
	USING	0
			; SOURCE LINE # 212
	MOV  	context?453,R7
	MOV  	message_array?454,R5
	MOV  	length?455,R2
	MOV  	length?455+01H,R3
; {
			; SOURCE LINE # 213
;     if (!length)
			; SOURCE LINE # 214
	MOV  	A,length?455+01H
	ORL  	A,length?455
	JNZ  	$ + 5H
	LJMP 	?C0034
;     {
			; SOURCE LINE # 215
;         return;
;     }
			; SOURCE LINE # 217
?C0033:
; 
;     if (context->Computed || context->Corrupted)
			; SOURCE LINE # 219
	MOV  	A,context?453
	ADD  	A,#050H
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JNZ  	?C0036
	MOV  	A,context?453
	ADD  	A,#052H
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JZ   	?C0037
?C0036:
;     {
			; SOURCE LINE # 220
;         context->Corrupted = 1;
			; SOURCE LINE # 221
	MOV  	A,context?453
	ADD  	A,#051H
	MOV  	R0,A
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#01H
	RET  	
;         return;
;     }
			; SOURCE LINE # 223
?C0037:
; 
;     while(length-- && !context->Corrupted)
			; SOURCE LINE # 225
	MOV  	A,length?455+01H
	DEC  	length?455+01H
	MOV  	R6,length?455
	JNZ  	?C0077
	DEC  	length?455
?C0077:
	ORL  	A,R6
	JZ   	?C0034
	MOV  	A,context?453
	ADD  	A,#052H
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JNZ  	?C0034
;     {
			; SOURCE LINE # 226
;         context->Message_Block[context->Message_Block_Index++] =(*message_array & 0xFF);
			; SOURCE LINE # 227
	MOV  	R0,message_array?454
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,context?453
	ADD  	A,#04EH
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	R6,A
	MOV  	A,context?453
	ADD  	A,#0EH
	ADD  	A,R6
	MOV  	R0,A
	MOV  	@R0,AR7
; 
;         context->Length_Low += 8;
			; SOURCE LINE # 229
	MOV  	A,context?453
	ADD  	A,#0BH
	MOV  	R0,A
	MOV  	A,#08H
	ADD  	A,@R0
	MOV  	@R0,A
	DEC  	R0
	CLR  	A
	ADDC 	A,@R0
	MOV  	@R0,A
;         /* Force it to 32 bits */
;         context->Length_Low &= 0xFFFFFFFF;
			; SOURCE LINE # 231
	MOV  	A,context?453
	ADD  	A,#0AH
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	@R0,A
	INC  	R0
	MOV  	A,@R0
	MOV  	@R0,A
;         if (context->Length_Low == 0)
			; SOURCE LINE # 232
	MOV  	A,context?453
	ADD  	A,#0BH
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JNZ  	?C0039
;         {
			; SOURCE LINE # 233
;             context->Length_High++;
			; SOURCE LINE # 234
	MOV  	A,context?453
	ADD  	A,#0CH
	MOV  	R0,A
	INC  	R0
	INC  	@R0
	MOV  	A,@R0
	DEC  	R0
	JNZ  	?C0078
	INC  	@R0
?C0078:
;             /* Force it to 32 bits */
;             context->Length_High &= 0xFFFFFFFF;
			; SOURCE LINE # 236
	MOV  	A,context?453
	ADD  	A,#0CH
	MOV  	R0,A
	MOV  	A,@R0
	MOV  	@R0,A
	INC  	R0
	MOV  	A,@R0
	MOV  	@R0,A
;             if (context->Length_High == 0)
			; SOURCE LINE # 237
	MOV  	A,context?453
	ADD  	A,#0DH
	MOV  	R1,A
	MOV  	A,@R1
	DEC  	R1
	ORL  	A,@R1
	JNZ  	?C0039
;             {
			; SOURCE LINE # 238
;                 /* Message is too long */
;                 context->Corrupted = 1;
			; SOURCE LINE # 240
	MOV  	A,context?453
	ADD  	A,#051H
	MOV  	R0,A
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#01H
;             }
			; SOURCE LINE # 241
;         }
			; SOURCE LINE # 242
?C0039:
; 
;         if (context->Message_Block_Index == 32)
			; SOURCE LINE # 244
	MOV  	A,context?453
	ADD  	A,#04EH
	MOV  	R1,A
	MOV  	A,@R1
	CJNE 	A,#020H,?C0041
;         {
			; SOURCE LINE # 245
;             SHA1ProcessMessageBlock(context);
			; SOURCE LINE # 246
	MOV  	R7,context?453
	LCALL	_SHA1ProcessMessageBlock
;         }
			; SOURCE LINE # 247
?C0041:
; 
;         message_array++;
			; SOURCE LINE # 249
	INC  	message_array?454
;     }
			; SOURCE LINE # 250
	LJMP 	?C0037
; }
			; SOURCE LINE # 251
?C0034:
	RET  	
; END OF _SHA1Input

; 
; 
; void main()

	RSEG  ?PR?main?MAIN
main:
	USING	0
			; SOURCE LINE # 254
; {
			; SOURCE LINE # 255
; 
; 	idata char i;
; 	idata SHA1Context sha;
; 
; 	store_cpu_rate(16);
			; SOURCE LINE # 260
	MOV  	R7,#010H
	MOV  	R6,#00H
	LCALL	_store_cpu_rate
; 
;     P0_DIR &= ~0x28;
			; SOURCE LINE # 262
	ANL  	P0_DIR,#0D7H
;     P0_ALT &= ~0x28;
			; SOURCE LINE # 263
	ANL  	P0_ALT,#0D7H
; 
; 	serial_init(19200);
			; SOURCE LINE # 265
	MOV  	R7,#00H
	MOV  	R6,#04BH
	LCALL	_serial_init
; 
; 
; 	for(i=0;i<6;i++)
			; SOURCE LINE # 268
	CLR  	A
	MOV  	R0,#LOW (i?556)
	MOV  	@R0,A
?C0042:
; 	{
			; SOURCE LINE # 269
; 		blink_led();
			; SOURCE LINE # 270
	XRL  	P0,#020H
; 		mdelay(400);
			; SOURCE LINE # 271
	MOV  	R7,#090H
	MOV  	R6,#01H
	LCALL	_mdelay
; 	}	
			; SOURCE LINE # 272
	MOV  	R0,#LOW (i?556)
	INC  	@R0
	CLR  	C
	MOV  	A,@R0
	XRL  	A,#080H
	SUBB 	A,#086H
	JC   	?C0042
?C0045:
; 
; 	while(1)
			; SOURCE LINE # 274
; 	{
			; SOURCE LINE # 275
; 		SHA1Reset(&sha);
			; SOURCE LINE # 276
	MOV  	R7,#LOW (sha?557)
	LCALL	_SHA1Reset
; 		SHA1Input(&sha, (const unsigned char *) TESTA, 3);
			; SOURCE LINE # 277
	MOV  	R5,#LOW (?SC_0)
	MOV  	R3,#03H
	MOV  	R2,#00H
	LCALL	_SHA1Input
; 
; 		SHA1Result(&sha);
			; SOURCE LINE # 279
	MOV  	R7,#LOW (sha?557)
	LCALL	_SHA1Result
; 		blink_led();	
			; SOURCE LINE # 280
	XRL  	P0,#020H
; 	}	
			; SOURCE LINE # 281
	SJMP 	?C0045
; END OF main

	END

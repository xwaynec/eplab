C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE MAIN
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT ROM(LARGE) INCDIR(.
                    -./../Include) SRC(./main.src)

line level    source

   1          #include "Eco/reg24e1.h"
   1      =1  #ifndef REGnRF24E1_H
   2      =1  #define REGnRF24E1_H
   3      =1  
   4      =1  /*  BYTE Registers  */
   5      =1  sfr P0                  = 0x80 ;
   6      =1  sfr SP                  = 0x81 ;
   7      =1  sfr DPL                 = 0x82 ;
   8      =1  sfr DPL0                = 0x82 ;
   9      =1  sfr DPH                 = 0x83 ;
  10      =1  sfr DPH0                = 0x83 ;
  11      =1  sfr DPL1                = 0x84 ;
  12      =1  sfr DPH1                = 0x85 ;
  13      =1  sfr DPS                 = 0x86 ;
  14      =1  sfr PCON                = 0x87 ;
  15      =1  sfr TCON                = 0x88 ;
  16      =1  sfr TMOD                = 0x89 ;
  17      =1  sfr TL0                 = 0x8A ;
  18      =1  sfr TL1                 = 0x8B ;
  19      =1  sfr TH0                 = 0x8C ;
  20      =1  sfr TH1                 = 0x8D ;
  21      =1  sfr CKCON               = 0x8E ;
  22      =1  sfr SPC_FNC             = 0x8F ;
  23      =1  sfr P1          = 0x90 ;
  24      =1  sfr EXIF                = 0x91 ;
  25      =1  sfr MPAGE               = 0x92 ;
  26      =1  sfr P0_DIR              = 0x94 ;
  27      =1  sfr P0_ALT              = 0x95 ;
  28      =1  sfr P1_DIR              = 0x96 ;
  29      =1  sfr P1_ALT              = 0x97 ;
  30      =1  sfr SCON                = 0x98 ;
  31      =1  sfr SBUF                = 0x99 ;
  32      =1  sfr RADIO               = 0xA0 ;
  33      =1  sfr ADCCON              = 0xA1 ;
  34      =1  sfr ADCDATAH    = 0xA2 ;
  35      =1  sfr ADCDATAL    = 0xA3 ;
  36      =1  sfr ADCSTATIC   = 0xA4 ;
  37      =1  sfr IE                  = 0xA8 ;
  38      =1  sfr PWMCON              = 0xA9 ;
  39      =1  sfr PWMDUTY             = 0xAA ;
  40      =1  sfr REGX_MSB    = 0xAB ;
  41      =1  sfr REGX_LSB    = 0xAC ;
  42      =1  sfr REGX_CTRL   = 0xAD ;
  43      =1  sfr RSTREAS             = 0xB1 ;
  44      =1  sfr SPI_DATA    = 0xB2 ;
  45      =1  sfr SPI_CTRL    = 0xB3 ;
  46      =1  sfr SPICLK              = 0xB4 ;
  47      =1  sfr TICK_DV             = 0xB5 ;
  48      =1  sfr CK_CTRL             = 0xB6 ;
  49      =1  sfr TEST_MODE   = 0xB7 ;
  50      =1  sfr IP                  = 0xB8 ;
  51      =1  sfr T1_1V2              = 0xBC ;
  52      =1  sfr T2_1V2              = 0xBD ;
  53      =1  sfr DEV_OFFSET  = 0xBE ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 2   

  54      =1  sfr T2CON               = 0xC8 ;
  55      =1  sfr RCAP2L              = 0xCA ;
  56      =1  sfr RCAP2H              = 0xCB ;
  57      =1  sfr TL2                 = 0xCC ;
  58      =1  sfr TH2                 = 0xCD ;
  59      =1  sfr PSW                 = 0xD0 ;
  60      =1  sfr EICON               = 0xD8 ;
  61      =1  sfr ACC                 = 0xE0 ;
  62      =1  sfr EIE                 = 0xE8 ;
  63      =1  sfr B                   = 0xF0 ;
  64      =1  sfr EIP                 = 0xF8 ;
  65      =1  
  66      =1  
  67      =1  /*  BIT Registers  */
  68      =1  /* P0 */
  69      =1  sbit P0_0       = 0x80  ;
  70      =1  sbit DIO2       = 0x80  ;
  71      =1  sbit P0_1       = 0x81  ;
  72      =1  sbit RXD        = 0x81  ;
  73      =1  sbit DIO3       = 0x81  ;
  74      =1  sbit P0_2       = 0x82  ;
  75      =1  sbit TXD        = 0x82  ;
  76      =1  sbit DIO4       = 0x82  ;
  77      =1  sbit P0_3       = 0x83  ;
  78      =1  sbit INT0_N     = 0x83  ;
  79      =1  sbit DIO5       = 0x83  ;
  80      =1  sbit P0_4       = 0x84  ;
  81      =1  sbit INT1_N     = 0x84  ;
  82      =1  sbit DIO6       = 0x84  ;
  83      =1  sbit P0_5       = 0x85  ;
  84      =1  sbit T0         = 0x85  ;
  85      =1  sbit DIO7       = 0x85  ;
  86      =1  sbit P0_6       = 0x86  ;
  87      =1  sbit T1         = 0x86  ;
  88      =1  sbit DIO8       = 0x86  ;
  89      =1  sbit P0_7       = 0x87  ;
  90      =1  sbit PWM        = 0x87  ;
  91      =1  sbit DIO9       = 0x87  ;
  92      =1  
  93      =1  /*  TCON  */
  94      =1  sbit IT0        = 0x88 ;
  95      =1  sbit IE0        = 0x89 ;
  96      =1  sbit IT1        = 0x8A ;
  97      =1  sbit IE1        = 0x8B ;
  98      =1  sbit TR0        = 0x8C ;
  99      =1  sbit TF0        = 0x8D ;
 100      =1  sbit TR1        = 0x8E ;
 101      =1  sbit TF1        = 0x8F ;
 102      =1  
 103      =1  /* P1 */
 104      =1  sbit P1_0       = 0x90 ;
 105      =1  sbit T2         = 0x90 ;
 106      =1  sbit DIO0       = 0x90 ;
 107      =1  sbit P1_1       = 0x91 ;
 108      =1  sbit DIO1       = 0x91 ;
 109      =1  sbit P1_2       = 0x92 ;
 110      =1  sbit DIN0       = 0x92 ;
 111      =1  
 112      =1  /*  SCON  */
 113      =1  sbit RI         = 0x98 ;
 114      =1  sbit TI         = 0x99 ;
 115      =1  sbit RB8        = 0x9A ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 3   

 116      =1  sbit TB8        = 0x9B ;
 117      =1  sbit REN        = 0x9C ;
 118      =1  sbit SM2        = 0x9D ;
 119      =1  sbit SM1        = 0x9E ;
 120      =1  sbit SM0        = 0x9F ;
 121      =1  
 122      =1  /* P2 */
 123      =1  sbit DATA       = 0xA0 ;
 124      =1  sbit CLK1       = 0xA1 ;
 125      =1  sbit DR1        = 0xA2 ;
 126      =1  sbit CS         = 0xA3 ;
 127      =1  sbit DOUT2      = 0xA4 ;
 128      =1  sbit CLK2       = 0xA5 ;
 129      =1  sbit DR2_CE     = 0xA6 ;
 130      =1  sbit DR2        = 0xA6 ;
 131      =1  sbit CE         = 0xA6 ;
 132      =1  sbit PWR_UP     = 0xA7 ;
 133      =1  
 134      =1  /*  IE   */
 135      =1  sbit EX0        = 0xA8 ;
 136      =1  sbit ET0        = 0xA9 ;
 137      =1  sbit EX1        = 0xAA ;
 138      =1  sbit ET1        = 0xAB ;
 139      =1  sbit ES         = 0xAC ;
 140      =1  sbit ET2        = 0xAD ;
 141      =1  sbit EA         = 0xAF ;
 142      =1  
 143      =1  /*  IP   */
 144      =1  sbit PX0        = 0xB8 ;
 145      =1  sbit PT0        = 0xB9 ;
 146      =1  sbit PX1        = 0xBA ;
 147      =1  sbit PT1        = 0xBB ;
 148      =1  sbit PS         = 0xBC ;
 149      =1  sbit PT2        = 0xBD ;
 150      =1  
 151      =1  /*  T2CON  */
 152      =1  sbit CP_RL2     = 0xC8 ;
 153      =1  sbit CPRL2      = 0xC8 ;
 154      =1  sbit C_T2       = 0xC9 ;
 155      =1  sbit CT2        = 0xC9 ;
 156      =1  sbit TR2        = 0xCA ;
 157      =1  sbit EXEN2      = 0xCB ;
 158      =1  sbit TCLK       = 0xCC ;
 159      =1  sbit RCLK       = 0xCD ;
 160      =1  sbit EXF2       = 0xCE ;
 161      =1  sbit TF2        = 0xCF ;
 162      =1  
 163      =1  /*  PSW   */
 164      =1  sbit P          = 0xD0 ;
 165      =1  sbit F1         = 0xD1 ;
 166      =1  sbit OV         = 0xD2 ;
 167      =1  sbit RS0        = 0xD3 ;
 168      =1  sbit RS1        = 0xD4 ;
 169      =1  sbit F0         = 0xD5 ;
 170      =1  sbit AC         = 0xD6 ;
 171      =1  sbit CY         = 0xD7 ;
 172      =1  
 173      =1  /*  EICON  */
 174      =1  sbit WDTI       = 0xDB ;
 175      =1  
 176      =1  /*  EIE  */
 177      =1  sbit EX2        = 0xE8 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 4   

 178      =1  sbit EX3        = 0xE9 ;
 179      =1  sbit EX4        = 0xEA ;
 180      =1  sbit EX5        = 0xEB ;
 181      =1  sbit EWDI       = 0xEC ;
 182      =1  
 183      =1  /*  EIP  */
 184      =1  sbit PX2        = 0xF8 ;
 185      =1  sbit PX3        = 0xF9 ;
 186      =1  sbit PX4        = 0xFA ;
 187      =1  sbit PX5        = 0xFB ;
 188      =1  sbit PWDI       = 0xFC ;
 189      =1  
 190      =1  
 191      =1  /* BIT definitions for bits that are not directly accessible */
 192      =1  /* PCON bits */
 193      =1  #define IDL             0x01
 194      =1  #define PD              0x02
 195      =1  #define GF0             0x04
 196      =1  #define GF1             0x08
 197      =1  #define SMOD            0x80
 198      =1  
 199      =1  /* TMOD bits */
 200      =1  #define T0_M0           0x01
 201      =1  #define T0_M1           0x02
 202      =1  #define T0_CT           0x04
 203      =1  #define T0_GATE         0x08
 204      =1  #define T1_M0           0x10
 205      =1  #define T1_M1           0x20
 206      =1  #define T1_CT           0x40
 207      =1  #define T1_GATE         0x80
 208      =1  
 209      =1  #define T0_MASK         0x0F
 210      =1  #define T1_MASK         0xF0
 211      =1  
 212      =1  /* Interrupt numbers: address = (number * 8) + 3 */
 213      =1  #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
 214      =1  #define TF0_VECTOR      1       /* 0x0b timer 0 */
 215      =1  #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
 216      =1  #define TF1_VECTOR      3       /* 0x1b timer 1 */
 217      =1  #define SI0_VECTOR      4       /* 0x23 serial port 0 */
 218      =1  
 219      =1  #endif
   2          #include "Eco/eco_sys.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * Min-Hua Chen <orca.chen@gmail.com> 
  10      =1   */
  11      =1  #ifndef _ECO_SYS_H_
  12      =1  #define _ECO_SYS_H_
  13      =1  
  14      =1  #include <Eco/reg24e1.h>
   1      =2  #ifndef REGnRF24E1_H
           =2 #define REGnRF24E1_H
           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0                  = 0x80 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 5   

           =2 sfr SP                  = 0x81 ;
           =2 sfr DPL                 = 0x82 ;
           =2 sfr DPL0                = 0x82 ;
           =2 sfr DPH                 = 0x83 ;
           =2 sfr DPH0                = 0x83 ;
           =2 sfr DPL1                = 0x84 ;
           =2 sfr DPH1                = 0x85 ;
           =2 sfr DPS                 = 0x86 ;
           =2 sfr PCON                = 0x87 ;
           =2 sfr TCON                = 0x88 ;
           =2 sfr TMOD                = 0x89 ;
           =2 sfr TL0                 = 0x8A ;
           =2 sfr TL1                 = 0x8B ;
           =2 sfr TH0                 = 0x8C ;
           =2 sfr TH1                 = 0x8D ;
           =2 sfr CKCON               = 0x8E ;
           =2 sfr SPC_FNC             = 0x8F ;
           =2 sfr P1          = 0x90 ;
           =2 sfr EXIF                = 0x91 ;
           =2 sfr MPAGE               = 0x92 ;
           =2 sfr P0_DIR              = 0x94 ;
           =2 sfr P0_ALT              = 0x95 ;
           =2 sfr P1_DIR              = 0x96 ;
           =2 sfr P1_ALT              = 0x97 ;
           =2 sfr SCON                = 0x98 ;
           =2 sfr SBUF                = 0x99 ;
           =2 sfr RADIO               = 0xA0 ;
           =2 sfr ADCCON              = 0xA1 ;
           =2 sfr ADCDATAH    = 0xA2 ;
           =2 sfr ADCDATAL    = 0xA3 ;
           =2 sfr ADCSTATIC   = 0xA4 ;
           =2 sfr IE                  = 0xA8 ;
           =2 sfr PWMCON              = 0xA9 ;
           =2 sfr PWMDUTY             = 0xAA ;
           =2 sfr REGX_MSB    = 0xAB ;
           =2 sfr REGX_LSB    = 0xAC ;
           =2 sfr REGX_CTRL   = 0xAD ;
           =2 sfr RSTREAS             = 0xB1 ;
           =2 sfr SPI_DATA    = 0xB2 ;
           =2 sfr SPI_CTRL    = 0xB3 ;
           =2 sfr SPICLK              = 0xB4 ;
           =2 sfr TICK_DV             = 0xB5 ;
           =2 sfr CK_CTRL             = 0xB6 ;
           =2 sfr TEST_MODE   = 0xB7 ;
           =2 sfr IP                  = 0xB8 ;
           =2 sfr T1_1V2              = 0xBC ;
           =2 sfr T2_1V2              = 0xBD ;
           =2 sfr DEV_OFFSET  = 0xBE ;
           =2 sfr T2CON               = 0xC8 ;
           =2 sfr RCAP2L              = 0xCA ;
           =2 sfr RCAP2H              = 0xCB ;
           =2 sfr TL2                 = 0xCC ;
           =2 sfr TH2                 = 0xCD ;
           =2 sfr PSW                 = 0xD0 ;
           =2 sfr EICON               = 0xD8 ;
           =2 sfr ACC                 = 0xE0 ;
           =2 sfr EIE                 = 0xE8 ;
           =2 sfr B                   = 0xF0 ;
           =2 sfr EIP                 = 0xF8 ;
           =2 
           =2 
           =2 /*  BIT Registers  */
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 6   

           =2 /* P0 */
           =2 sbit P0_0       = 0x80  ;
           =2 sbit DIO2       = 0x80  ;
           =2 sbit P0_1       = 0x81  ;
           =2 sbit RXD        = 0x81  ;
           =2 sbit DIO3       = 0x81  ;
           =2 sbit P0_2       = 0x82  ;
           =2 sbit TXD        = 0x82  ;
           =2 sbit DIO4       = 0x82  ;
           =2 sbit P0_3       = 0x83  ;
           =2 sbit INT0_N     = 0x83  ;
           =2 sbit DIO5       = 0x83  ;
           =2 sbit P0_4       = 0x84  ;
           =2 sbit INT1_N     = 0x84  ;
           =2 sbit DIO6       = 0x84  ;
           =2 sbit P0_5       = 0x85  ;
           =2 sbit T0         = 0x85  ;
           =2 sbit DIO7       = 0x85  ;
           =2 sbit P0_6       = 0x86  ;
           =2 sbit T1         = 0x86  ;
           =2 sbit DIO8       = 0x86  ;
           =2 sbit P0_7       = 0x87  ;
           =2 sbit PWM        = 0x87  ;
           =2 sbit DIO9       = 0x87  ;
           =2 
           =2 /*  TCON  */
           =2 sbit IT0        = 0x88 ;
           =2 sbit IE0        = 0x89 ;
           =2 sbit IT1        = 0x8A ;
           =2 sbit IE1        = 0x8B ;
           =2 sbit TR0        = 0x8C ;
           =2 sbit TF0        = 0x8D ;
           =2 sbit TR1        = 0x8E ;
           =2 sbit TF1        = 0x8F ;
           =2 
           =2 /* P1 */
           =2 sbit P1_0       = 0x90 ;
           =2 sbit T2         = 0x90 ;
           =2 sbit DIO0       = 0x90 ;
           =2 sbit P1_1       = 0x91 ;
           =2 sbit DIO1       = 0x91 ;
           =2 sbit P1_2       = 0x92 ;
           =2 sbit DIN0       = 0x92 ;
           =2 
           =2 /*  SCON  */
           =2 sbit RI         = 0x98 ;
           =2 sbit TI         = 0x99 ;
           =2 sbit RB8        = 0x9A ;
           =2 sbit TB8        = 0x9B ;
           =2 sbit REN        = 0x9C ;
           =2 sbit SM2        = 0x9D ;
           =2 sbit SM1        = 0x9E ;
           =2 sbit SM0        = 0x9F ;
           =2 
           =2 /* P2 */
           =2 sbit DATA       = 0xA0 ;
           =2 sbit CLK1       = 0xA1 ;
           =2 sbit DR1        = 0xA2 ;
           =2 sbit CS         = 0xA3 ;
           =2 sbit DOUT2      = 0xA4 ;
           =2 sbit CLK2       = 0xA5 ;
           =2 sbit DR2_CE     = 0xA6 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 7   

           =2 sbit DR2        = 0xA6 ;
           =2 sbit CE         = 0xA6 ;
           =2 sbit PWR_UP     = 0xA7 ;
           =2 
           =2 /*  IE   */
           =2 sbit EX0        = 0xA8 ;
           =2 sbit ET0        = 0xA9 ;
           =2 sbit EX1        = 0xAA ;
           =2 sbit ET1        = 0xAB ;
           =2 sbit ES         = 0xAC ;
           =2 sbit ET2        = 0xAD ;
           =2 sbit EA         = 0xAF ;
           =2 
           =2 /*  IP   */
           =2 sbit PX0        = 0xB8 ;
           =2 sbit PT0        = 0xB9 ;
           =2 sbit PX1        = 0xBA ;
           =2 sbit PT1        = 0xBB ;
           =2 sbit PS         = 0xBC ;
           =2 sbit PT2        = 0xBD ;
           =2 
           =2 /*  T2CON  */
           =2 sbit CP_RL2     = 0xC8 ;
           =2 sbit CPRL2      = 0xC8 ;
           =2 sbit C_T2       = 0xC9 ;
           =2 sbit CT2        = 0xC9 ;
           =2 sbit TR2        = 0xCA ;
           =2 sbit EXEN2      = 0xCB ;
           =2 sbit TCLK       = 0xCC ;
           =2 sbit RCLK       = 0xCD ;
           =2 sbit EXF2       = 0xCE ;
           =2 sbit TF2        = 0xCF ;
           =2 
           =2 /*  PSW   */
           =2 sbit P          = 0xD0 ;
           =2 sbit F1         = 0xD1 ;
           =2 sbit OV         = 0xD2 ;
           =2 sbit RS0        = 0xD3 ;
           =2 sbit RS1        = 0xD4 ;
           =2 sbit F0         = 0xD5 ;
           =2 sbit AC         = 0xD6 ;
           =2 sbit CY         = 0xD7 ;
           =2 
           =2 /*  EICON  */
           =2 sbit WDTI       = 0xDB ;
           =2 
           =2 /*  EIE  */
           =2 sbit EX2        = 0xE8 ;
           =2 sbit EX3        = 0xE9 ;
           =2 sbit EX4        = 0xEA ;
           =2 sbit EX5        = 0xEB ;
           =2 sbit EWDI       = 0xEC ;
           =2 
           =2 /*  EIP  */
           =2 sbit PX2        = 0xF8 ;
           =2 sbit PX3        = 0xF9 ;
           =2 sbit PX4        = 0xFA ;
           =2 sbit PX5        = 0xFB ;
           =2 sbit PWDI       = 0xFC ;
           =2 
           =2 
           =2 /* BIT definitions for bits that are not directly accessible */
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 8   

           =2 /* PCON bits */
           =2 #define IDL             0x01
           =2 #define PD              0x02
           =2 #define GF0             0x04
           =2 #define GF1             0x08
           =2 #define SMOD            0x80
           =2 
           =2 /* TMOD bits */
           =2 #define T0_M0           0x01
           =2 #define T0_M1           0x02
           =2 #define T0_CT           0x04
           =2 #define T0_GATE         0x08
           =2 #define T1_M0           0x10
           =2 #define T1_M1           0x20
           =2 #define T1_CT           0x40
           =2 #define T1_GATE         0x80
           =2 
           =2 #define T0_MASK         0x0F
           =2 #define T1_MASK         0xF0
           =2 
           =2 /* Interrupt numbers: address = (number * 8) + 3 */
           =2 #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
           =2 #define TF0_VECTOR      1       /* 0x0b timer 0 */
           =2 #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
           =2 #define TF1_VECTOR      3       /* 0x1b timer 1 */
           =2 #define SI0_VECTOR      4       /* 0x23 serial port 0 */
           =2 
           =2 #endif
  15      =1  
  16      =1  #define blink_led() P0 ^= 0x20
  17      =1  
  18      =1  #define eco_dev_blink_led() P0 ^= 0x08
  19      =1  
  20      =1  #endif 
   3          #include "utils/utils.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * utils.h
  10      =1   * utility functions
  11      =1   * Min-Hua Chen <orca.chen@gmail.com> 
  12      =1   * 2007/11/20
  13      =1   */
  14      =1  
  15      =1  void store_cpu_rate(int mhz);
  16      =1  void mdelay(unsigned int msec);
  17      =1  void wdt_load(unsigned int cnt);
  18      =1  void strncpy(char *src, char *dst, int n);
   4          #include "serial/serial.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 9   

   9      =1  #ifndef _SERIAL_H_
  10      =1  #define _SERIAL_H_
  11      =1  
  12      =1  /* for SCON register */
  13      =1  #define SERIAL_MODE0    0x00    /* sync mode */
  14      =1  #define SERIAL_MODE1    (1 << 6)        /* async, full duplex mode */
  15      =1  #define SERIAL_MODE2    (2 << 6)        /* async, full duplex mode */ 
  16      =1  #define SERIAL_MODE3    (3 << 6)        /* async, full duplex mode */ 
  17      =1  
  18      =1  #define SERIAL_CLK_D4           (1 << 5)
  19      =1  
  20      =1  #define SERIAL_IO_PORT  (3 << 1)
  21      =1  #define RECV_ENABLE     (1 << 4)
  22      =1  #define TRAN_DONE       (1 << 1)
  23      =1  #define RECV_DONE       1
  24      =1  
  25      =1  /* for PCON register */
  26      =1  #define BAUD_DOUBLE     (1 << 7)
  27      =1  
  28      =1  void serial_init(unsigned int baud);
  29      =1  void putc(char c);
  30      =1  void puts(char *s);
  31      =1  char getc();
  32      =1  void int_print(unsigned int val) reentrant;
  33      =1  
  34      =1  #endif
   5          //#include "isr/isr_rf.h"
   6          #include "eeprom/eeprom.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _EEPROM_H_
  10      =1  #define _EEPROM_H_
  11      =1  
  12      =1  /* instruction for eeprom AT25320A */
  13      =1  #define EE_WREN         0x06
  14      =1  #define EE_WRDI         0x04
  15      =1  #define EE_RDSR         0x05
  16      =1  #define EE_WRSR         0x01
  17      =1  #define EE_READ         0x03
  18      =1  #define EE_WRITE        0x02
  19      =1  #define ERASE_ALL       0x62    /* erase all page for flash memory */
  20      =1  /* the eeprom chip select is connected to P0_0, and
  21      =1   * the eeprom is active when CS is set low */
  22      =1  #define EE_CS           P0_0
  23      =1  
  24      =1  void eeprom_init();
  25      =1  void eeprom_write(unsigned int addr, char byte);
  26      =1  char eeprom_read(unsigned int addr);
  27      =1  char eeprom_status();
  28      =1  
  29      =1  #endif 
   7          #include "eco_page.h"
   1      =1  /*
   2      =1   * Author(s): Wei-Han Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2009 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 10  

   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * Eco Paging Library
  10      =1   *
  11      =1   * Wei-Han Chen <xwaynec@gmail.com> 
  12      =1   * 2009/2/13
  13      =1   */
  14      =1  
  15      =1  #ifndef __ECO_PAGE_H
  16      =1  #define __ECO_PAGE_H
  17      =1  
  18      =1  
  19      =1  #include "Eco/reg24e1.h"
   1      =2  #ifndef REGnRF24E1_H
           =2 #define REGnRF24E1_H
           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0                  = 0x80 ;
           =2 sfr SP                  = 0x81 ;
           =2 sfr DPL                 = 0x82 ;
           =2 sfr DPL0                = 0x82 ;
           =2 sfr DPH                 = 0x83 ;
           =2 sfr DPH0                = 0x83 ;
           =2 sfr DPL1                = 0x84 ;
           =2 sfr DPH1                = 0x85 ;
           =2 sfr DPS                 = 0x86 ;
           =2 sfr PCON                = 0x87 ;
           =2 sfr TCON                = 0x88 ;
           =2 sfr TMOD                = 0x89 ;
           =2 sfr TL0                 = 0x8A ;
           =2 sfr TL1                 = 0x8B ;
           =2 sfr TH0                 = 0x8C ;
           =2 sfr TH1                 = 0x8D ;
           =2 sfr CKCON               = 0x8E ;
           =2 sfr SPC_FNC             = 0x8F ;
           =2 sfr P1          = 0x90 ;
           =2 sfr EXIF                = 0x91 ;
           =2 sfr MPAGE               = 0x92 ;
           =2 sfr P0_DIR              = 0x94 ;
           =2 sfr P0_ALT              = 0x95 ;
           =2 sfr P1_DIR              = 0x96 ;
           =2 sfr P1_ALT              = 0x97 ;
           =2 sfr SCON                = 0x98 ;
           =2 sfr SBUF                = 0x99 ;
           =2 sfr RADIO               = 0xA0 ;
           =2 sfr ADCCON              = 0xA1 ;
           =2 sfr ADCDATAH    = 0xA2 ;
           =2 sfr ADCDATAL    = 0xA3 ;
           =2 sfr ADCSTATIC   = 0xA4 ;
           =2 sfr IE                  = 0xA8 ;
           =2 sfr PWMCON              = 0xA9 ;
           =2 sfr PWMDUTY             = 0xAA ;
           =2 sfr REGX_MSB    = 0xAB ;
           =2 sfr REGX_LSB    = 0xAC ;
           =2 sfr REGX_CTRL   = 0xAD ;
           =2 sfr RSTREAS             = 0xB1 ;
           =2 sfr SPI_DATA    = 0xB2 ;
           =2 sfr SPI_CTRL    = 0xB3 ;
           =2 sfr SPICLK              = 0xB4 ;
           =2 sfr TICK_DV             = 0xB5 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 11  

           =2 sfr CK_CTRL             = 0xB6 ;
           =2 sfr TEST_MODE   = 0xB7 ;
           =2 sfr IP                  = 0xB8 ;
           =2 sfr T1_1V2              = 0xBC ;
           =2 sfr T2_1V2              = 0xBD ;
           =2 sfr DEV_OFFSET  = 0xBE ;
           =2 sfr T2CON               = 0xC8 ;
           =2 sfr RCAP2L              = 0xCA ;
           =2 sfr RCAP2H              = 0xCB ;
           =2 sfr TL2                 = 0xCC ;
           =2 sfr TH2                 = 0xCD ;
           =2 sfr PSW                 = 0xD0 ;
           =2 sfr EICON               = 0xD8 ;
           =2 sfr ACC                 = 0xE0 ;
           =2 sfr EIE                 = 0xE8 ;
           =2 sfr B                   = 0xF0 ;
           =2 sfr EIP                 = 0xF8 ;
           =2 
           =2 
           =2 /*  BIT Registers  */
           =2 /* P0 */
           =2 sbit P0_0       = 0x80  ;
           =2 sbit DIO2       = 0x80  ;
           =2 sbit P0_1       = 0x81  ;
           =2 sbit RXD        = 0x81  ;
           =2 sbit DIO3       = 0x81  ;
           =2 sbit P0_2       = 0x82  ;
           =2 sbit TXD        = 0x82  ;
           =2 sbit DIO4       = 0x82  ;
           =2 sbit P0_3       = 0x83  ;
           =2 sbit INT0_N     = 0x83  ;
           =2 sbit DIO5       = 0x83  ;
           =2 sbit P0_4       = 0x84  ;
           =2 sbit INT1_N     = 0x84  ;
           =2 sbit DIO6       = 0x84  ;
           =2 sbit P0_5       = 0x85  ;
           =2 sbit T0         = 0x85  ;
           =2 sbit DIO7       = 0x85  ;
           =2 sbit P0_6       = 0x86  ;
           =2 sbit T1         = 0x86  ;
           =2 sbit DIO8       = 0x86  ;
           =2 sbit P0_7       = 0x87  ;
           =2 sbit PWM        = 0x87  ;
           =2 sbit DIO9       = 0x87  ;
           =2 
           =2 /*  TCON  */
           =2 sbit IT0        = 0x88 ;
           =2 sbit IE0        = 0x89 ;
           =2 sbit IT1        = 0x8A ;
           =2 sbit IE1        = 0x8B ;
           =2 sbit TR0        = 0x8C ;
           =2 sbit TF0        = 0x8D ;
           =2 sbit TR1        = 0x8E ;
           =2 sbit TF1        = 0x8F ;
           =2 
           =2 /* P1 */
           =2 sbit P1_0       = 0x90 ;
           =2 sbit T2         = 0x90 ;
           =2 sbit DIO0       = 0x90 ;
           =2 sbit P1_1       = 0x91 ;
           =2 sbit DIO1       = 0x91 ;
           =2 sbit P1_2       = 0x92 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 12  

           =2 sbit DIN0       = 0x92 ;
           =2 
           =2 /*  SCON  */
           =2 sbit RI         = 0x98 ;
           =2 sbit TI         = 0x99 ;
           =2 sbit RB8        = 0x9A ;
           =2 sbit TB8        = 0x9B ;
           =2 sbit REN        = 0x9C ;
           =2 sbit SM2        = 0x9D ;
           =2 sbit SM1        = 0x9E ;
           =2 sbit SM0        = 0x9F ;
           =2 
           =2 /* P2 */
           =2 sbit DATA       = 0xA0 ;
           =2 sbit CLK1       = 0xA1 ;
           =2 sbit DR1        = 0xA2 ;
           =2 sbit CS         = 0xA3 ;
           =2 sbit DOUT2      = 0xA4 ;
           =2 sbit CLK2       = 0xA5 ;
           =2 sbit DR2_CE     = 0xA6 ;
           =2 sbit DR2        = 0xA6 ;
           =2 sbit CE         = 0xA6 ;
           =2 sbit PWR_UP     = 0xA7 ;
           =2 
           =2 /*  IE   */
           =2 sbit EX0        = 0xA8 ;
           =2 sbit ET0        = 0xA9 ;
           =2 sbit EX1        = 0xAA ;
           =2 sbit ET1        = 0xAB ;
           =2 sbit ES         = 0xAC ;
           =2 sbit ET2        = 0xAD ;
           =2 sbit EA         = 0xAF ;
           =2 
           =2 /*  IP   */
           =2 sbit PX0        = 0xB8 ;
           =2 sbit PT0        = 0xB9 ;
           =2 sbit PX1        = 0xBA ;
           =2 sbit PT1        = 0xBB ;
           =2 sbit PS         = 0xBC ;
           =2 sbit PT2        = 0xBD ;
           =2 
           =2 /*  T2CON  */
           =2 sbit CP_RL2     = 0xC8 ;
           =2 sbit CPRL2      = 0xC8 ;
           =2 sbit C_T2       = 0xC9 ;
           =2 sbit CT2        = 0xC9 ;
           =2 sbit TR2        = 0xCA ;
           =2 sbit EXEN2      = 0xCB ;
           =2 sbit TCLK       = 0xCC ;
           =2 sbit RCLK       = 0xCD ;
           =2 sbit EXF2       = 0xCE ;
           =2 sbit TF2        = 0xCF ;
           =2 
           =2 /*  PSW   */
           =2 sbit P          = 0xD0 ;
           =2 sbit F1         = 0xD1 ;
           =2 sbit OV         = 0xD2 ;
           =2 sbit RS0        = 0xD3 ;
           =2 sbit RS1        = 0xD4 ;
           =2 sbit F0         = 0xD5 ;
           =2 sbit AC         = 0xD6 ;
           =2 sbit CY         = 0xD7 ;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 13  

           =2 
           =2 /*  EICON  */
           =2 sbit WDTI       = 0xDB ;
           =2 
           =2 /*  EIE  */
           =2 sbit EX2        = 0xE8 ;
           =2 sbit EX3        = 0xE9 ;
           =2 sbit EX4        = 0xEA ;
           =2 sbit EX5        = 0xEB ;
           =2 sbit EWDI       = 0xEC ;
           =2 
           =2 /*  EIP  */
           =2 sbit PX2        = 0xF8 ;
           =2 sbit PX3        = 0xF9 ;
           =2 sbit PX4        = 0xFA ;
           =2 sbit PX5        = 0xFB ;
           =2 sbit PWDI       = 0xFC ;
           =2 
           =2 
           =2 /* BIT definitions for bits that are not directly accessible */
           =2 /* PCON bits */
           =2 #define IDL             0x01
           =2 #define PD              0x02
           =2 #define GF0             0x04
           =2 #define GF1             0x08
           =2 #define SMOD            0x80
           =2 
           =2 /* TMOD bits */
           =2 #define T0_M0           0x01
           =2 #define T0_M1           0x02
           =2 #define T0_CT           0x04
           =2 #define T0_GATE         0x08
           =2 #define T1_M0           0x10
           =2 #define T1_M1           0x20
           =2 #define T1_CT           0x40
           =2 #define T1_GATE         0x80
           =2 
           =2 #define T0_MASK         0x0F
           =2 #define T1_MASK         0xF0
           =2 
           =2 /* Interrupt numbers: address = (number * 8) + 3 */
           =2 #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
           =2 #define TF0_VECTOR      1       /* 0x0b timer 0 */
           =2 #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
           =2 #define TF1_VECTOR      3       /* 0x1b timer 1 */
           =2 #define SI0_VECTOR      4       /* 0x23 serial port 0 */
           =2 
           =2 #endif
  20      =1  #include "Eco/eco_sys.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  10      =2   */
  11      =2  #ifndef _ECO_SYS_H_
           =2 #define _ECO_SYS_H_
           =2 
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 14  

           =2 #include <Eco/reg24e1.h>
           =2 
           =2 #define blink_led() P0 ^= 0x20
           =2 
           =2 #define eco_dev_blink_led() P0 ^= 0x08
           =2 
           =2 #endif 
  21      =1  #include "utils/utils.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * utils.h
  10      =2   * utility functions
  11      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  12      =2   * 2007/11/20
  13      =2   */
  14      =2  
  15      =2  void store_cpu_rate(int mhz);
  16      =2  void mdelay(unsigned int msec);
  17      =2  void wdt_load(unsigned int cnt);
  18      =2  void strncpy(char *src, char *dst, int n);
  22      =1  #include "eeprom/eeprom.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   */
   9      =2  #ifndef _EEPROM_H_
           =2 #define _EEPROM_H_
           =2 
           =2 /* instruction for eeprom AT25320A */
           =2 #define EE_WREN         0x06
           =2 #define EE_WRDI         0x04
           =2 #define EE_RDSR         0x05
           =2 #define EE_WRSR         0x01
           =2 #define EE_READ         0x03
           =2 #define EE_WRITE        0x02
           =2 #define ERASE_ALL       0x62    /* erase all page for flash memory */
           =2 /* the eeprom chip select is connected to P0_0, and
           =2  * the eeprom is active when CS is set low */
           =2 #define EE_CS           P0_0
           =2 
           =2 void eeprom_init();
           =2 void eeprom_write(unsigned int addr, char byte);
           =2 char eeprom_read(unsigned int addr);
           =2 char eeprom_status();
           =2 
           =2 #endif 
  23      =1  
  24      =1  #define EEPROM_HEADER 3
  25      =1  #define ECO_ADDR_SHIFT(x)       ((unsigned int)(x) + 3)
  26      =1  
  27      =1  
  28      =1  /*
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 15  

  29      =1  static unsigned char ECO_PAGE_TABLE[10];
  30      =1  
  31      =1  static unsigned int ECO_PAGE_ADDR;
  32      =1  
  33      =1  static unsigned int ECO_PAGE_TABLE_INDEX;
  34      =1  */
  35      =1  
  36      =1  void eco_page_init();
  37      =1  void eco_page_manager();
  38      =1  
  39      =1  
  40      =1  #endif
   8          //#include "adc/adc.h"
   9          
  10          #define TESTA   "abc"
  11          #define SHA1CircularShift(bits,word) \
  12                          ((((word) << (bits)) & 0xFFFFFFFF) | \
  13                          ((word) >> (32-(bits))))
  14          
  15          
  16          typedef struct SHA1Context
  17          {
  18              unsigned Message_Digest[5]; /* Message Digest (output)          */
  19          
  20              unsigned Length_Low;        /* Message length in bits           */
  21              unsigned Length_High;       /* Message length in bits           */
  22          
  23              unsigned char Message_Block[64]; /* 256-bit message blocks      */
  24              char Message_Block_Index;    /* Index into message block array   */
  25          
  26              int Computed;               /* Is the digest computed?          */
  27              int Corrupted;              /* Is the message digest corruped?  */
  28          } SHA1Context;
  29          
  30          
  31          void SHA1ProcessMessageBlock(SHA1Context idata *context)
  32          {
  33   1              idata unsigned K[] =            /* Constants defined in SHA-1   */      
  34   1          {
  35   1              0x5A827999,
  36   1              0x6ED9EBA1,
  37   1              0x8F1BBCDC,
  38   1              0xCA62C1D6
  39   1          };
  40   1          idata int         t;                  /* Loop counter                 */
  41   1          idata unsigned    temp;               /* Temporary word value         */
  42   1          xdata unsigned    W[80];              /* Word sequence                */
  43   1          idata unsigned    A, B, C, D, E;      /* Word buffers                 */
  44   1      
  45   1          /*
  46   1           *  Initialize the first 16 words in the array W
  47   1           */
  48   1          for(t = 0; t < 16; t++)
  49   1          {
  50   2              W[t] = ((unsigned) context->Message_Block[t * 4]) << 24;
  51   2              W[t] |= ((unsigned) context->Message_Block[t * 4 + 1]) << 16;
  52   2              W[t] |= ((unsigned) context->Message_Block[t * 4 + 2]) << 8;
  53   2              W[t] |= ((unsigned) context->Message_Block[t * 4 + 3]);
  54   2          }
  55   1      
  56   1          for(t = 16; t < 80; t++)
  57   1          {
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 16  

  58   2             W[t] = SHA1CircularShift(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);
  59   2          }
  60   1      
  61   1          A = context->Message_Digest[0];
  62   1          B = context->Message_Digest[1];
  63   1          C = context->Message_Digest[2];
  64   1          D = context->Message_Digest[3];
  65   1          E = context->Message_Digest[4];
  66   1      
  67   1          for(t = 0; t < 20; t++)
  68   1          {
  69   2              temp =  SHA1CircularShift(5,A) +
  70   2                      ((B & C) | ((~B) & D)) + E + W[t] + K[0];
  71   2              temp &= 0xFFFFFFFF;
  72   2              E = D;
  73   2              D = C;
  74   2              C = SHA1CircularShift(30,B);
  75   2              B = A;
  76   2              A = temp;
  77   2          }
  78   1      
  79   1          for(t = 20; t < 40; t++)
  80   1          {
  81   2              temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[1];
  82   2              temp &= 0xFFFFFFFF;
  83   2              E = D;
  84   2              D = C;
  85   2              C = SHA1CircularShift(30,B);
  86   2              B = A;
  87   2              A = temp;
  88   2          }
  89   1      
  90   1          for(t = 40; t < 60; t++)
  91   1          {
  92   2              temp = SHA1CircularShift(5,A) +
  93   2                     ((B & C) | (B & D) | (C & D)) + E + W[t] + K[2];
  94   2              temp &= 0xFFFFFFFF;
  95   2              E = D;
  96   2              D = C;
  97   2              C = SHA1CircularShift(30,B);
  98   2              B = A;
  99   2              A = temp;
 100   2          }
 101   1      
 102   1          for(t = 60; t < 80; t++)
 103   1          {
 104   2              temp = SHA1CircularShift(5,A) + (B ^ C ^ D) + E + W[t] + K[3];
 105   2              temp &= 0xFFFFFFFF;
 106   2              E = D;
 107   2              D = C;
 108   2              C = SHA1CircularShift(30,B);
 109   2              B = A;
 110   2              A = temp;
 111   2          }
 112   1      
 113   1          context->Message_Digest[0] =
 114   1                              (context->Message_Digest[0] + A) & 0xFFFFFFFF;
 115   1          context->Message_Digest[1] =
 116   1                              (context->Message_Digest[1] + B) & 0xFFFFFFFF;
 117   1          context->Message_Digest[2] =
 118   1                              (context->Message_Digest[2] + C) & 0xFFFFFFFF;
 119   1          context->Message_Digest[3] =
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 17  

 120   1                              (context->Message_Digest[3] + D) & 0xFFFFFFFF;
 121   1          context->Message_Digest[4] =
 122   1                              (context->Message_Digest[4] + E) & 0xFFFFFFFF;
 123   1      
 124   1          context->Message_Block_Index = 0;
 125   1      
 126   1      }
 127          
 128          
 129          void SHA1Reset(SHA1Context idata *context)
 130          {
 131   1          context->Length_Low             = 0;
 132   1          context->Length_High            = 0;
 133   1          context->Message_Block_Index    = 0;
 134   1      
 135   1          context->Message_Digest[0]      = 0x67452301;
 136   1          context->Message_Digest[1]      = 0xEFCDAB89;
 137   1          context->Message_Digest[2]      = 0x98BADCFE;
 138   1          context->Message_Digest[3]      = 0x10325476;
 139   1          context->Message_Digest[4]      = 0xC3D2E1F0;
 140   1      
 141   1          context->Computed   = 0;
 142   1          context->Corrupted  = 0;
 143   1      }
 144          
 145          
 146          void SHA1PadMessage(SHA1Context idata *context)
 147          {
 148   1          /*
 149   1           *  Check to see if the current message block is too small to hold
 150   1           *  the initial padding bits and length.  If so, we will pad the
 151   1           *  block, process it, and then continue padding into a second
 152   1           *  block.
 153   1           */
 154   1          if (context->Message_Block_Index > 55)
 155   1          {
 156   2              context->Message_Block[context->Message_Block_Index++] = 0x80;
 157   2              while(context->Message_Block_Index < 64)
 158   2              {
 159   3                  context->Message_Block[context->Message_Block_Index++] = 0;
 160   3              }
 161   2      
 162   2              SHA1ProcessMessageBlock(context);
 163   2      
 164   2              while(context->Message_Block_Index < 56)
 165   2              {
 166   3                  context->Message_Block[context->Message_Block_Index++] = 0;
 167   3              }
 168   2          }
 169   1          else
 170   1          {
 171   2              context->Message_Block[context->Message_Block_Index++] = 0x80;
 172   2              while(context->Message_Block_Index < 56)
 173   2              {
 174   3                  context->Message_Block[context->Message_Block_Index++] = 0;
 175   3              }
 176   2          }
 177   1      
 178   1          /*
 179   1           *  Store the message length as the last 8 octets
 180   1           */
 181   1          context->Message_Block[24] = (context->Length_High >> 24) & 0xFF;
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 18  

 182   1          context->Message_Block[25] = (context->Length_High >> 16) & 0xFF;
 183   1          context->Message_Block[26] = (context->Length_High >> 8) & 0xFF;
 184   1          context->Message_Block[27] = (context->Length_High) & 0xFF;
 185   1          context->Message_Block[28] = (context->Length_Low >> 24) & 0xFF;
 186   1          context->Message_Block[29] = (context->Length_Low >> 16) & 0xFF;
 187   1          context->Message_Block[30] = (context->Length_Low >> 8) & 0xFF;
 188   1          context->Message_Block[31] = (context->Length_Low) & 0xFF;
 189   1      
 190   1          SHA1ProcessMessageBlock(context);
 191   1      }
 192          
 193          
 194          int SHA1Result(SHA1Context idata *context)
 195          {
 196   1      
 197   1          if (context->Corrupted)
 198   1          {
 199   2              return 0;
 200   2          }
 201   1      
 202   1          if (!context->Computed)
 203   1          {
 204   2              SHA1PadMessage(context);
 205   2              context->Computed = 1;
 206   2          }
 207   1      
 208   1          return 1;
 209   1      }
 210          
 211          
 212          void SHA1Input(SHA1Context idata *context,unsigned char idata *message_array,unsigned idata length)
 213          {
 214   1          if (!length)
 215   1          {
 216   2              return;
 217   2          }
 218   1      
 219   1          if (context->Computed || context->Corrupted)
 220   1          {
 221   2              context->Corrupted = 1;
 222   2              return;
 223   2          }
 224   1      
 225   1          while(length-- && !context->Corrupted)
 226   1          {
 227   2              context->Message_Block[context->Message_Block_Index++] =(*message_array & 0xFF);
 228   2      
 229   2              context->Length_Low += 8;
 230   2              /* Force it to 32 bits */
 231   2              context->Length_Low &= 0xFFFFFFFF;
 232   2              if (context->Length_Low == 0)
 233   2              {
 234   3                  context->Length_High++;
 235   3                  /* Force it to 32 bits */
 236   3                  context->Length_High &= 0xFFFFFFFF;
 237   3                  if (context->Length_High == 0)
 238   3                  {
 239   4                      /* Message is too long */
 240   4                      context->Corrupted = 1;
 241   4                  }
 242   3              }
 243   2      
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 19  

 244   2              if (context->Message_Block_Index == 32)
 245   2              {
 246   3                  SHA1ProcessMessageBlock(context);
 247   3              }
 248   2      
 249   2              message_array++;
 250   2          }
 251   1      }
 252          
 253          
 254          void main()
 255          {
 256   1      
 257   1              idata char i;
 258   1              idata SHA1Context sha;
 259   1      
 260   1              store_cpu_rate(16);
 261   1      
 262   1          P0_DIR &= ~0x28;
 263   1          P0_ALT &= ~0x28;
 264   1      
 265   1              serial_init(19200);
 266   1      
 267   1      
 268   1              for(i=0;i<6;i++)
 269   1              {
 270   2                      blink_led();
 271   2                      mdelay(400);
 272   2              }       
 273   1      
 274   1              while(1)
 275   1              {
 276   2                      SHA1Reset(&sha);
 277   2                      SHA1Input(&sha, (const unsigned char *) TESTA, 3);
 278   2      
 279   2                      SHA1Result(&sha);
 280   2                      blink_led();    
 281   2              }       
 282   1      
 283   1      }
 284          
 285          
C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_mdelay. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
_SHA1Result. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  context?352. . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  1
_SHA1Reset . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  context?150. . . . . . . . . . . . .  * REG *  DATA   PTR      0007H  1
_serial_init . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SHA1Input . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  context?453. . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  1
  message_array?454. . . . . . . . . .  AUTO     DATA   PTR      0001H  1
  length?455 . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i?556. . . . . . . . . . . . . . . .  AUTO     IDATA  CHAR     0000H  1
  sha?557. . . . . . . . . . . . . . .  AUTO     IDATA  STRUCT   0001H  83
_SHA1ProcessMessageBlock . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  context?040. . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  1
  K?041. . . . . . . . . . . . . . . .  AUTO     IDATA  ARRAY    0000H  8
  t?042. . . . . . . . . . . . . . . .  AUTO     IDATA  INT      0008H  2
  temp?043 . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    000AH  2
  W?044. . . . . . . . . . . . . . . .  AUTO     XDATA  ARRAY    0000H  160
  A?045. . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    000CH  2
  B?046. . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    000EH  2
  C?047. . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0010H  2
  D?048. . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0012H  2
  E?049. . . . . . . . . . . . . . . .  AUTO     IDATA  U_INT    0014H  2
P0_DIR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
P0_ALT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
_?ix1000 . . . . . . . . . . . . . . .  STATIC   CODE   ARRAY    0004H  8
_store_cpu_rate. . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
_SHA1PadMessage. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  context?251. . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  1
SHA1Context. . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  83
  Message_Digest . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  10
  Length_Low . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  Length_High. . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  Message_Block. . . . . . . . . . . .  MEMBER   -----  ARRAY    000EH  64
  Message_Block_Index. . . . . . . . .  MEMBER   -----  CHAR     004EH  1
  Computed . . . . . . . . . . . . . .  MEMBER   -----  INT      004FH  2
  Corrupted. . . . . . . . . . . . . .  MEMBER   -----  INT      0051H  2
SHA1Context. . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  83
  Message_Digest . . . . . . . . . . .  MEMBER   -----  ARRAY    0000H  10
  Length_Low . . . . . . . . . . . . .  MEMBER   -----  U_INT    000AH  2
  Length_High. . . . . . . . . . . . .  MEMBER   -----  U_INT    000CH  2
  Message_Block. . . . . . . . . . . .  MEMBER   -----  ARRAY    000EH  64
  Message_Block_Index. . . . . . . . .  MEMBER   -----  CHAR     004EH  1
  Computed . . . . . . . . . . . . . .  MEMBER   -----  INT      004FH  2
  Corrupted. . . . . . . . . . . . . .  MEMBER   -----  INT      0051H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2600    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----     160
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       7
   IDATA SIZE       =   ----     106
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V8.16   MAIN                                                                  05/14/2009 22:01:20 PAGE 21  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

; ./eeprom.src generated from: ..\..\include\eeprom\eeprom.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe ..\..\include\eeprom\eeprom.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT INCDIR(../../Include) PRINT(./eeprom.lst) PREPRINT(./eeprom.i) SRC(./eeprom.src)

$NOMOD51

NAME	EEPROM

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?eeprom_init?EEPROM                   SEGMENT CODE 
?PR?eeprom_status?EEPROM                 SEGMENT CODE 
?PR?_eeprom_write?EEPROM                 SEGMENT CODE 
?DT?_eeprom_write?EEPROM                 SEGMENT DATA OVERLAYABLE 
?PR?_eeprom_read?EEPROM                  SEGMENT CODE 
?DT?_eeprom_read?EEPROM                  SEGMENT DATA OVERLAYABLE 
?PR?flash_erase_all?EEPROM               SEGMENT CODE 
	EXTRN	CODE (_spi_init)
	EXTRN	CODE (_spi_write_then_read)
	PUBLIC	flash_erase_all
	PUBLIC	_eeprom_read
	PUBLIC	_eeprom_write
	PUBLIC	eeprom_status
	PUBLIC	eeprom_init

	RSEG  ?DT?_eeprom_read?EEPROM
?_eeprom_read?BYTE:
       addr?343:   DS   2
	ORG  2
       byte?344:   DS   1

	RSEG  ?DT?_eeprom_write?EEPROM
?_eeprom_write?BYTE:
       addr?241:   DS   2
	ORG  2
       byte?242:   DS   1
; /*
;  * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
;  * Copyright (c) 2008 National Tsing Hua University (NTHU) 
;  * Permission to copy, modify, and distribute this program is granted 
;  * for noncommercial purposes, provided the author(s) and copyright
;  * notice are retained. All other uses require explicit written
;  * permission from NTHU. 
;  *
;  * eeprom driver
;  * Min-Hua Chen <orca.chen@gmail.com> 
;  * 2007/8/23
;  * 2008/3/6
;  */
; 
; #include "Eco/reg24e1.h"
; #include "spi/spi.h"
; #include "eeprom/eeprom.h"
; 
; 
; /* Eco programmer mode, issue output signal as EE_CS signal 
;  * to another Eco debugger board. With correct wire connection,
;  * we can write date to another debugging board, check the manual
;  * for the connection part
;  */
; 
; 
; #ifdef ECO_PROG_MODE
; #undef EE_CS
; /* I/O port as CS for Eco sensor node*/
; #define EE_CS INT0_N
; #endif 
; 
; #ifdef ECO_DEV_PROG_MODE
; #undef EE_CS
; /* I/O port as CS for new debugging boad */
; #define EE_CS DIO7
; #endif 
; 
; /* eeproom_init - init the eeprom, connect eeprom to the SPI
;  * interface */
; void eeprom_init()

	RSEG  ?PR?eeprom_init?EEPROM
eeprom_init:
	USING	0
			; SOURCE LINE # 41
; {
			; SOURCE LINE # 42
; 	/* connect spi to eeprom and setup clock rate to 1/8 of CPU */
; 	spi_init(SPI_CONN_EEPROM, SPI_CLK_D8);
			; SOURCE LINE # 44
	CLR  	A
	MOV  	R5,A
	MOV  	R7,#01H
	LCALL	_spi_init
; 	/* set p0.0(EEPROM CSN) to output mode */
; 	P0_DIR &= ~0x01;
			; SOURCE LINE # 46
	ANL  	P0_DIR,#0FEH
; }
			; SOURCE LINE # 47
	RET  	
; END OF eeprom_init

; 
; /* eeprom_status - read the status register */
; char eeprom_status()

	RSEG  ?PR?eeprom_status?EEPROM
eeprom_status:
	USING	0
			; SOURCE LINE # 50
; {
			; SOURCE LINE # 51
; 	char byte;
; 	EE_CS = 0;	/* active eeprom */
			; SOURCE LINE # 53
	CLR  	P0_0
; 	spi_write_then_read(EE_RDSR);	/* send read-status-register
			; SOURCE LINE # 54
	MOV  	R7,#05H
	LCALL	_spi_write_then_read
; 					   instruction to the eeprom */
; 	byte = spi_write_then_read(0);
			; SOURCE LINE # 56
	CLR  	A
	MOV  	R7,A
	LCALL	_spi_write_then_read
;---- Variable 'byte?140' assigned to Register 'R7' ----
; 	EE_CS = 1;	/* inactive eeprom */
			; SOURCE LINE # 57
	SETB 	P0_0
; 
; 	return byte;
			; SOURCE LINE # 59
; }
			; SOURCE LINE # 60
?C0002:
	RET  	
; END OF eeprom_status

; 
; /* eeprom_write - write a single byte to specified address
;  * @addr: target address
;  * @byte: writting byte of data
;  */
; void eeprom_write(unsigned int addr, char byte)

	RSEG  ?PR?_eeprom_write?EEPROM
_eeprom_write:
	USING	0
			; SOURCE LINE # 66
	MOV  	addr?241,R6
	MOV  	addr?241+01H,R7
	MOV  	byte?242,R5
; {
			; SOURCE LINE # 67
?C0003:
; 	while (eeprom_status() & 0x01)	/* wait until write cycle done */
			; SOURCE LINE # 68
	LCALL	eeprom_status
	MOV  	A,R7
	JB   	ACC.0,?C0003
?C0004:
; 		;
; 	EE_CS = 0;	/* active eeprom */
			; SOURCE LINE # 70
	CLR  	P0_0
; 	spi_write_then_read(EE_WREN);	/* write-enable instruction */
			; SOURCE LINE # 71
	MOV  	R7,#06H
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* inactive eeprom */
			; SOURCE LINE # 72
	SETB 	P0_0
; 	EE_CS = 0;	/* active eeprom */
			; SOURCE LINE # 73
	CLR  	P0_0
; 	spi_write_then_read(EE_WRITE);	/* write instruction */
			; SOURCE LINE # 74
	MOV  	R7,#02H
	LCALL	_spi_write_then_read
; 	spi_write_then_read(addr >> 8);	/* higher byte of addr */
			; SOURCE LINE # 75
	MOV  	A,addr?241
	MOV  	R7,A
	LCALL	_spi_write_then_read
; 	spi_write_then_read(addr & 0xff);	/* lower byte */
			; SOURCE LINE # 76
	MOV  	R7,addr?241+01H
	MOV  	A,addr?241+01H
	LCALL	_spi_write_then_read
; 	spi_write_then_read(byte);	/* write data */
			; SOURCE LINE # 77
	MOV  	R7,byte?242
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* inactive eeprom */
			; SOURCE LINE # 78
	SETB 	P0_0
; 	EE_CS = 0;	/* active eeprom */
			; SOURCE LINE # 79
	CLR  	P0_0
; 	spi_write_then_read(EE_WRDI);	/* write-disable instruction */
			; SOURCE LINE # 80
	MOV  	R7,#04H
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* inactive eeprom */
			; SOURCE LINE # 81
	SETB 	P0_0
; }
			; SOURCE LINE # 82
	RET  	
; END OF _eeprom_write

; 
; /* eeprom_read - read single byte from specified address
;  * @addr: target address
;  */
; char eeprom_read(unsigned int addr)

	RSEG  ?PR?_eeprom_read?EEPROM
_eeprom_read:
	USING	0
			; SOURCE LINE # 87
	MOV  	addr?343,R6
	MOV  	addr?343+01H,R7
; {
			; SOURCE LINE # 88
; 	char byte = 0;
			; SOURCE LINE # 89
	CLR  	A
	MOV  	byte?344,A
?C0006:
; 	while (eeprom_status() & 0x01)	/* wait until write cycle done */
			; SOURCE LINE # 90
	LCALL	eeprom_status
	MOV  	A,R7
	JB   	ACC.0,?C0006
?C0007:
; 		;
; 	EE_CS = 0;	/* active eeprom */
			; SOURCE LINE # 92
	CLR  	P0_0
; 	spi_write_then_read(EE_READ);	/* read instruction */
			; SOURCE LINE # 93
	MOV  	R7,#03H
	LCALL	_spi_write_then_read
; 	spi_write_then_read(addr >> 8);	/* higher byte of addr */
			; SOURCE LINE # 94
	MOV  	A,addr?343
	MOV  	R7,A
	LCALL	_spi_write_then_read
; 	spi_write_then_read(addr & 0xff);	/* lower byte */
			; SOURCE LINE # 95
	MOV  	R7,addr?343+01H
	MOV  	A,addr?343+01H
	LCALL	_spi_write_then_read
; 	byte = spi_write_then_read(0); /* read data */
			; SOURCE LINE # 96
	CLR  	A
	MOV  	R7,A
	LCALL	_spi_write_then_read
	MOV  	byte?344,R7
; 	EE_CS = 1;	/* inactive eeprom */
			; SOURCE LINE # 97
	SETB 	P0_0
; 	return byte;
			; SOURCE LINE # 98
; }
			; SOURCE LINE # 99
?C0008:
	RET  	
; END OF _eeprom_read

; 
; /* flash_erase_all - erase all pages on flash memory */
; void flash_erase_all()

	RSEG  ?PR?flash_erase_all?EEPROM
flash_erase_all:
	USING	0
			; SOURCE LINE # 102
; {
			; SOURCE LINE # 103
?C0009:
; 	while (eeprom_status() & 0x01)	/* wait until write cycle done */
			; SOURCE LINE # 104
	LCALL	eeprom_status
	MOV  	A,R7
	JB   	ACC.0,?C0009
?C0010:
; 		;
; 	EE_CS = 0;	/* enable SPI slave */
			; SOURCE LINE # 106
	CLR  	P0_0
; 	spi_write_then_read(EE_WREN);	/* write-enable instruction */
			; SOURCE LINE # 107
	MOV  	R7,#06H
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* start erase operation */
			; SOURCE LINE # 108
	SETB 	P0_0
; 	EE_CS = 0;	/* start erase operation */
			; SOURCE LINE # 109
	CLR  	P0_0
; 	spi_write_then_read(ERASE_ALL);	/* read instruction */
			; SOURCE LINE # 110
	MOV  	R7,#062H
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* start erase operation */
			; SOURCE LINE # 111
	SETB 	P0_0
; 	while (eeprom_status() & 0x00)	/* wait until erase done */
			; SOURCE LINE # 112
?C0012:
; 		;
; 	/* re-enable flash write operation */
; 	EE_CS = 0;	/* enable SPI slave */
			; SOURCE LINE # 115
	CLR  	P0_0
; 	spi_write_then_read(EE_WREN);	/* write-enable instruction */
			; SOURCE LINE # 116
	MOV  	R7,#06H
	LCALL	_spi_write_then_read
; 	EE_CS = 1;	/* start erase operation */
			; SOURCE LINE # 117
	SETB 	P0_0
; }
			; SOURCE LINE # 118
	RET  	
; END OF flash_erase_all

	END

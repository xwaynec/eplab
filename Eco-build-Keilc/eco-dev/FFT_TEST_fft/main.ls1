AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     1


MACRO ASSEMBLER AX51 V3.06a
OBJECT MODULE PLACED IN .\main.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.exe .\main.src EP DEBUG SYMBOLS OJ(.\main.obj) PR(.\main.ls1) 

LOC    OBJ             LINE     SOURCE

                          1     ; ./main.src generated from: .\main.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT
                                ROM(LARGE) INCDIR(../../Include) SRC(./main.src)
                          4     
                          5     $nomod51 
                          6     
                          7     NAME    MAIN
                          8     
 00A0.7                   9     PWR_UP  BIT     0A0H.7
 0080                    10     P0      DATA    080H
 0090                    11     P1      DATA    090H
 00D0.6                  12     AC      BIT     0D0H.6
 0080.5                  13     T0      BIT     080H.5
 00B3                    14     SPI_CTRL        DATA    0B3H
 0080.6                  15     T1      BIT     080H.6
 00A8.7                  16     EA      BIT     0A8H.7
 0090.0                  17     T2      BIT     090H.0
 00A0.6                  18     CE      BIT     0A0H.6
 00BE                    19     DEV_OFFSET      DATA    0BEH
 00A0.1                  20     CLK1    BIT     0A0H.1
 0090.2                  21     DIN0    BIT     090H.2
 00A0.5                  22     CLK2    BIT     0A0H.5
 0090.0                  23     DIO0    BIT     090H.0
 0083                    24     DPH0    DATA    083H
 0090.1                  25     DIO1    BIT     090H.1
 00A8                    26     IE      DATA    0A8H
 0085                    27     DPH1    DATA    085H
 0080.0                  28     DIO2    BIT     080H.0
 0080.1                  29     DIO3    BIT     080H.1
 0080.0                  30     P0_0    BIT     080H.0
 0090.0                  31     P1_0    BIT     090H.0
 0080.2                  32     DIO4    BIT     080H.2
 0080.1                  33     P0_1    BIT     080H.1
 0082                    34     DPL0    DATA    082H
 0090.1                  35     P1_1    BIT     090H.1
 0080.3                  36     DIO5    BIT     080H.3
 0080.2                  37     P0_2    BIT     080H.2
 0084                    38     DPL1    DATA    084H
 0090.2                  39     P1_2    BIT     090H.2
 0080.4                  40     DIO6    BIT     080H.4
 0080.3                  41     P0_3    BIT     080H.3
 0080.5                  42     DIO7    BIT     080H.5
 0080.4                  43     P0_4    BIT     080H.4
 00A4                    44     ADCSTATIC       DATA    0A4H
 0080.6                  45     DIO8    BIT     080H.6
 0080.5                  46     P0_5    BIT     080H.5
 00C8.6                  47     EXF2    BIT     0C8H.6
 00A0.3                  48     CS      BIT     0A0H.3
 0080.7                  49     DIO9    BIT     080H.7
 0080.6                  50     P0_6    BIT     080H.6
 0080.7                  51     P0_7    BIT     080H.7
 00A8.4                  52     ES      BIT     0A8H.4
 00B8                    53     IP      DATA    0B8H
 00A0.0                  54     DATA?   BIT     0A0H.0
 0098.0                  55     RI      BIT     098H.0
 00D0.7                  56     CY      BIT     0D0H.7
 0098.1                  57     TI      BIT     098H.1
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     2

 00BC                    58     T1_1V2  DATA    0BCH
 008F                    59     SPC_FNC DATA    08FH
 00BD                    60     T2_1V2  DATA    0BDH
 00CB                    61     RCAP2H  DATA    0CBH
 00B8.4                  62     PS      BIT     0B8H.4
 0081                    63     SP      DATA    081H
 00D0.2                  64     OV      BIT     0D0H.2
 00B6                    65     CK_CTRL DATA    0B6H
 00CA                    66     RCAP2L  DATA    0CAH
 00B5                    67     TICK_DV DATA    0B5H
 00B1                    68     RSTREAS DATA    0B1H
 00C8.1                  69     C_T2    BIT     0C8H.1
 00E8.4                  70     EWDI    BIT     0E8H.4
 00A1                    71     ADCCON  DATA    0A1H
 00C8.5                  72     RCLK    BIT     0C8H.5
 00A2                    73     ADCDATAH        DATA    0A2H
 0091                    74     EXIF    DATA    091H
 00C8.4                  75     TCLK    BIT     0C8H.4
 00A0.6                  76     DR2_CE  BIT     0A0H.6
 00A3                    77     ADCDATAL        DATA    0A3H
 0099                    78     SBUF    DATA    099H
 0087                    79     PCON    DATA    087H
 0098                    80     SCON    DATA    098H
 00F8.4                  81     PWDI    BIT     0F8H.4
 0089                    82     TMOD    DATA    089H
 0088                    83     TCON    DATA    088H
 00D8.3                  84     WDTI    BIT     0D8H.3
 00AA                    85     PWMDUTY DATA    0AAH
 0088.1                  86     IE0     BIT     088H.1
 0088.3                  87     IE1     BIT     088H.3
 0094                    88     P0_DIR  DATA    094H
 00F0                    89     B       DATA    0F0H
 0096                    90     P1_DIR  DATA    096H
 0095                    91     P0_ALT  DATA    095H
 0097                    92     P1_ALT  DATA    097H
 00C8.0                  93     CP_RL2  BIT     0C8H.0
 00A0.2                  94     DR1     BIT     0A0H.2
 00E0                    95     ACC     DATA    0E0H
 00A0.6                  96     DR2     BIT     0A0H.6
 00B7                    97     TEST_MODE       DATA    0B7H
 00B4                    98     SPICLK  DATA    0B4H
 00C8.1                  99     CT2     BIT     0C8H.1
 00A8.1                 100     ET0     BIT     0A8H.1
 00A8.3                 101     ET1     BIT     0A8H.3
 0088.5                 102     TF0     BIT     088H.5
 0080.3                 103     INT0_N  BIT     080H.3
 00A8.5                 104     ET2     BIT     0A8H.5
 0088.7                 105     TF1     BIT     088H.7
 0080.4                 106     INT1_N  BIT     080H.4
 00C8.7                 107     TF2     BIT     0C8H.7
 0098.2                 108     RB8     BIT     098H.2
 008C                   109     TH0     DATA    08CH
 00A8.0                 110     EX0     BIT     0A8H.0
 0088.0                 111     IT0     BIT     088H.0
 008D                   112     TH1     DATA    08DH
 00A8.2                 113     EX1     BIT     0A8H.2
 0098.3                 114     TB8     BIT     098H.3
 0088.2                 115     IT1     BIT     088H.2
 00CD                   116     TH2     DATA    0CDH
 00AD                   117     REGX_CTRL       DATA    0ADH
 00E8.0                 118     EX2     BIT     0E8H.0
 00D0.0                 119     P       BIT     0D0H.0
 00E8.1                 120     EX3     BIT     0E8H.1
 0098.7                 121     SM0     BIT     098H.7
 008A                   122     TL0     DATA    08AH
 00E8.2                 123     EX4     BIT     0E8H.2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     3

 0098.6                 124     SM1     BIT     098H.6
 008B                   125     TL1     DATA    08BH
 00E8.3                 126     EX5     BIT     0E8H.3
 0098.5                 127     SM2     BIT     098H.5
 00CC                   128     TL2     DATA    0CCH
 00E8                   129     EIE     DATA    0E8H
 00B8.1                 130     PT0     BIT     0B8H.1
 00D0.3                 131     RS0     BIT     0D0H.3
 00B8.3                 132     PT1     BIT     0B8H.3
 00D0.4                 133     RS1     BIT     0D0H.4
 00B8.5                 134     PT2     BIT     0B8H.5
 0088.4                 135     TR0     BIT     088H.4
 00A9                   136     PWMCON  DATA    0A9H
 0088.6                 137     TR1     BIT     088H.6
 00C8.2                 138     TR2     BIT     0C8H.2
 00B8.0                 139     PX0     BIT     0B8H.0
 00B8.2                 140     PX1     BIT     0B8H.2
 00F8.0                 141     PX2     BIT     0F8H.0
 00F8.1                 142     PX3     BIT     0F8H.1
 00F8.2                 143     PX4     BIT     0F8H.2
 0083                   144     DPH     DATA    083H
 00F8.3                 145     PX5     BIT     0F8H.3
 00F8                   146     EIP     DATA    0F8H
 0082                   147     DPL     DATA    082H
 00C8.3                 148     EXEN2   BIT     0C8H.3
 00C8.0                 149     CPRL2   BIT     0C8H.0
 0098.4                 150     REN     BIT     098H.4
 00C8                   151     T2CON   DATA    0C8H
 0086                   152     DPS     DATA    086H
 00B2                   153     SPI_DATA        DATA    0B2H
 0092                   154     MPAGE   DATA    092H
 0080.1                 155     RXD     BIT     080H.1
 00A0.4                 156     DOUT2   BIT     0A0H.4
 00D8                   157     EICON   DATA    0D8H
 008E                   158     CKCON   DATA    08EH
 0080.2                 159     TXD     BIT     080H.2
 00A0                   160     RADIO   DATA    0A0H
 0080.7                 161     PWM     BIT     080H.7
 00D0.5                 162     F0      BIT     0D0H.5
 00D0.1                 163     F1      BIT     0D0H.1
 00AC                   164     REGX_LSB        DATA    0ACH
 00D0                   165     PSW     DATA    0D0H
 00AB                   166     REGX_MSB        DATA    0ABH
------                  167     ?PR?_bitrev?MAIN     SEGMENT CODE 
------                  168     ?DT?_bitrev?MAIN     SEGMENT DATA OVERLAYABLE 
------                  169     ?PR?_log_2?MAIN      SEGMENT CODE 
------                  170     ?PR?_compute_W?MAIN  SEGMENT CODE 
------                  171     ?DT?_compute_W?MAIN  SEGMENT DATA OVERLAYABLE 
------                  172     ?PR?_permute_bitrev?MAIN                 SEGMENT CODE 
------                  173     ?DT?_permute_bitrev?MAIN                 SEGMENT DATA OVERLAYABLE 
------                  174     ?PR?_permute_bitrev_2?MAIN                 SEGMENT CODE 
------                  175     ?PR?_fft?MAIN        SEGMENT CODE 
------                  176     ?DT?_fft?MAIN        SEGMENT DATA OVERLAYABLE 
------                  177     ?PR?_fft_2?MAIN        SEGMENT CODE 
------                  178     ?PR?_fft_3?MAIN        SEGMENT CODE 
------                  179     ?PR?main?MAIN        SEGMENT CODE 
------                  180     ?DT?MAIN             SEGMENT DATA 
------                  181     ?ID?_bitrev?MAIN     SEGMENT IDATA OVERLAYABLE 
------                  182     ?ID?_log_2?MAIN      SEGMENT IDATA OVERLAYABLE 
------                  183     ?ID?_compute_W?MAIN  SEGMENT IDATA OVERLAYABLE 
------                  184     ?ID?_permute_bitrev?MAIN                 SEGMENT IDATA OVERLAYABLE 
------                  185     ?ID?_fft?MAIN        SEGMENT IDATA OVERLAYABLE 
------                  186     ?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
                        187             EXTRN   CODE (_mdelay)
                        188             EXTRN   CODE (_serial_init)
                        189             EXTRN   CODE (_cos)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     4

                        190             EXTRN   CODE (_sin)
                        191             EXTRN   CODE (_?int_print)
                        192             EXTRN   CODE (_store_cpu_rate)
                        193             EXTRN   CODE (?C?SIDIV)
                        194             EXTRN   CODE (?C?IMUL)
                        195             EXTRN   CODE (?C?FCASTI)
                        196             EXTRN   CODE (?C?CASTF)
                        197             EXTRN   CODE (?C?ISTOPTR)
                        198             EXTRN   CODE (?C?ILDOPTR)
                        199             EXTRN   CODE (?C_STARTUP)
                        200     
                        201             EXTRN   CODE (eco_page_manager)
                        202         EXTRN   DATA (ECO_PAGE_ADDR)
                        203         EXTRN   DATA (ECO_PAGE_SPI_CONN)
                        204         EXTRN   IDATA (ECO_PAGE_REGISTER1)
                        205         EXTRN   IDATA (ECO_PAGE_REGISTER2)
                        206         EXTRN   IDATA (ECO_PAGE_REGISTER3)
                        207         EXTRN   IDATA (ECO_PAGE_REGISTER4)
                        208         EXTRN   IDATA (ECO_PAGE_REGISTER5)
                        209         EXTRN   IDATA (ECO_PAGE_REGISTER6)
                        210         EXTRN   IDATA (ECO_PAGE_REGISTER7)
                        211     
                        212             PUBLIC  test_counter
                        213             PUBLIC  main
                        214             PUBLIC  ?_fft?BYTE
                        215             PUBLIC  _fft
                        216             PUBLIC  _fft_2
                        217             PUBLIC  _fft_3
                        218             PUBLIC  ?_permute_bitrev?BYTE
                        219             PUBLIC  _permute_bitrev
                        220             PUBLIC  _permute_bitrev_2
                        221             PUBLIC  ?_compute_W?BYTE
                        222             PUBLIC  _compute_W
                        223             PUBLIC  _log_2
                        224             PUBLIC  _bitrev
                        225     
------                  226             RSEG  ?DT?_bitrev?MAIN
000000                  227     ?_bitrev?BYTE:
000000                  228         numbits?041:   DS   2
                        229     
------                  230             RSEG  ?DT?_compute_W?MAIN
000000                  231     ?_compute_W?BYTE:
000000                  232               n?246:   DS   2
000002                  233             ORG  2
000002                  234            W_re?247:   DS   3
000005                  235             ORG  5
000005                  236            W_im?248:   DS   3
000008                  237             ORG  8
000008                  238           log2n?251:   DS   2
                        239     
------                  240             RSEG  ?DT?_fft?MAIN
000000                  241     ?_fft?BYTE:
000000                  242               n?460:   DS   2
000002                  243             ORG  2
000002                  244            A_re?461:   DS   3
000005                  245             ORG  5
000005                  246            A_im?462:   DS   3
000008                  247             ORG  8
000008                  248            W_re?463:   DS   3
00000B                  249             ORG  11
00000B                  250            W_im?464:   DS   3
                        251     
------                  252             RSEG  ?DT?_permute_bitrev?MAIN
000000                  253     ?_permute_bitrev?BYTE:
000000                  254               n?352:   DS   2
000002                  255             ORG  2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     5

000002                  256            A_re?353:   DS   3
000005                  257             ORG  5
000005                  258            A_im?354:   DS   3
                        259     
------                  260             RSEG  ?DT?MAIN
000000                  261        test_counter:   DS   2
                        262     
------                  263             RSEG  ?ID?_bitrev?MAIN
000000                  264               i?042:   DS   2
                        265     
------                  266             RSEG  ?ID?_bitrev?MAIN
000002                  267             rev?043:   DS   2
                        268     
------                  269             RSEG  ?ID?_log_2?MAIN
000000                  270             res?145:   DS   2
                        271     
------                  272             RSEG  ?ID?_compute_W?MAIN
000000                  273               i?249:   DS   2
                        274     
------                  275             RSEG  ?ID?_compute_W?MAIN
000002                  276              br?250:   DS   2
                        277     
------                  278             RSEG  ?ID?_permute_bitrev?MAIN
000000                  279               i?355:   DS   2
                        280     
------                  281             RSEG  ?ID?_permute_bitrev?MAIN
000002                  282             bri?356:   DS   2
                        283     
------                  284             RSEG  ?ID?_permute_bitrev?MAIN
000004                  285           log2n?357:   DS   2
                        286     
------                  287             RSEG  ?ID?_permute_bitrev?MAIN
000006                  288            t_re?358:   DS   2
                        289     
------                  290             RSEG  ?ID?_permute_bitrev?MAIN
000008                  291            t_im?359:   DS   2
                        292     
------                  293             RSEG  ?ID?_fft?MAIN
000000                  294            w_re?465:   DS   2
                        295     
------                  296             RSEG  ?ID?_fft?MAIN
000002                  297            w_im?466:   DS   2
                        298     
------                  299             RSEG  ?ID?_fft?MAIN
000004                  300            u_re?467:   DS   2
                        301     
------                  302             RSEG  ?ID?_fft?MAIN
000006                  303            u_im?468:   DS   2
                        304     
------                  305             RSEG  ?ID?_fft?MAIN
000008                  306            t_re?469:   DS   2
                        307     
------                  308             RSEG  ?ID?_fft?MAIN
00000A                  309            t_im?470:   DS   2
                        310     
------                  311             RSEG  ?ID?_fft?MAIN
00000C                  312               m?471:   DS   2
                        313     
------                  314             RSEG  ?ID?_fft?MAIN
00000E                  315               g?472:   DS   2
                        316     
------                  317             RSEG  ?ID?_fft?MAIN
000010                  318               b?473:   DS   2
                        319     
------                  320             RSEG  ?ID?_fft?MAIN
000012                  321              mt?474:   DS   2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     6

                        322     
------                  323             RSEG  ?ID?_fft?MAIN
000014                  324               k?475:   DS   2
                        325     
------                  326             RSEG  ?ID?main?MAIN
000000                  327               n?576:   DS   2
                        328     
------                  329             RSEG  ?ID?main?MAIN
000002                  330            A_re?577:   DS   16
                        331     
------                  332             RSEG  ?ID?main?MAIN
000012                  333            A_im?578:   DS   16
                        334     
------                  335             RSEG  ?ID?main?MAIN
000022                  336            W_re?579:   DS   8
                        337     
------                  338             RSEG  ?ID?main?MAIN
00002A                  339            W_im?580:   DS   8
                        340     ; /* gets no. of points from the user, initialize the points and roots of unity lookup t
                               able 
                        341     ;  * and lets fft go. finally bit-reverses the results and outputs them into a file. 
                        342     ;  * n should be a power of 2. 
                        343     ;  */
                        344     ; #include "Eco/reg24e1.h"
                        345     ; #include "Eco/eco_sys.h"
                        346     ; #include "utils/utils.h"
                        347     ; #include "serial/serial.h"
                        348     ; #include "isr/isr_rf.h"
                        349     ; #include "eeprom/eeprom.h"
                        350     ; #include "eco_page.h"
                        351     ; #include "adc/adc.h"
                        352     ; 
                        353     ; #include <math.h>
                        354     ; 
                        355     ; volatile unsigned int test_counter;
                        356     ; /* treats inp as a numbits number and bitreverses it. 
                        357     ;  * inp < 2^(numbits) for meaningful bit-reversal
                        358     ;  */ 
                        359     ; int bitrev(int idata inp, int idata numbits)
                        360     
------                  361             RSEG  ?PR?_bitrev?MAIN
000000                  362     _bitrev:
                        363             USING   0
                        364                             ; SOURCE LINE # 20
000000 8C00       F     365             MOV     numbits?041,R4
000002 8D00       F     366             MOV     numbits?041+01H,R5
                        367     ;---- Variable 'inp?040' assigned to Register 'R2/R3' ----
000004 AB07             368             MOV     R3,AR7
000006 AA06             369             MOV     R2,AR6
                        370     ; {
                        371                             ; SOURCE LINE # 21
                        372     ;       int idata i;
                        373     ;       int idata rev=0;
                        374                             ; SOURCE LINE # 23
000008 E4               375             CLR     A
000009 7800       F     376             MOV     R0,#LOW (rev?043)
00000B F6               377             MOV     @R0,A
00000C 08               378             INC     R0
00000D F6               379             MOV     @R0,A
                        380     ;       for (i=0; i < numbits; i++)
                        381                             ; SOURCE LINE # 24
00000E 7800       F     382             MOV     R0,#LOW (i?042)
000010 F6               383             MOV     @R0,A
000011 08               384             INC     R0
000012 F6               385             MOV     @R0,A
000013                  386     ?C0001:
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     7

000013 C3               387             CLR     C
000014 7800       F     388             MOV     R0,#LOW (i?042+01H)
000016 E6               389             MOV     A,@R0
000017 9500       F     390             SUBB    A,numbits?041+01H
000019 E500       F     391             MOV     A,numbits?041
00001B 6480             392             XRL     A,#080H
00001D F5F0             393             MOV     B,A
00001F 18               394             DEC     R0
000020 E6               395             MOV     A,@R0
000021 6480             396             XRL     A,#080H
000023 95F0             397             SUBB    A,B
000025 5026             398             JNC     ?C0002
                        399     ;       {
                        400                             ; SOURCE LINE # 25
                        401     ;               rev = (rev << 1) | (inp & 1);
                        402                             ; SOURCE LINE # 26
000027 7800       F     403             MOV     R0,#LOW (rev?043+01H)
000029 E6               404             MOV     A,@R0
00002A 25E0             405             ADD     A,ACC
00002C FF               406             MOV     R7,A
00002D 18               407             DEC     R0
00002E E6               408             MOV     A,@R0
00002F 33               409             RLC     A
000030 FE               410             MOV     R6,A
000031 EB               411             MOV     A,R3
000032 5401             412             ANL     A,#01H
000034 FD               413             MOV     R5,A
000035 EE               414             MOV     A,R6
000036 F6               415             MOV     @R0,A
000037 EF               416             MOV     A,R7
000038 4D               417             ORL     A,R5
000039 08               418             INC     R0
00003A F6               419             MOV     @R0,A
                        420     ;               inp >>= 1;
                        421                             ; SOURCE LINE # 27
00003B EA               422             MOV     A,R2
00003C A2E7             423             MOV     C,ACC.7
00003E 13               424             RRC     A
00003F FA               425             MOV     R2,A
000040 EB               426             MOV     A,R3
000041 13               427             RRC     A
000042 FB               428             MOV     R3,A
                        429     ;       }
                        430                             ; SOURCE LINE # 28
000043 7800       F     431             MOV     R0,#LOW (i?042+01H)
000045 06               432             INC     @R0
000046 E6               433             MOV     A,@R0
000047 18               434             DEC     R0
000048 70C9             435             JNZ     ?C0001
00004A 06               436             INC     @R0
00004B                  437     ?C0034:
00004B 80C6             438             SJMP    ?C0001
00004D                  439     ?C0002:
                        440     ;       return rev;
                        441                             ; SOURCE LINE # 29
00004D 7800       F     442             MOV     R0,#LOW (rev?043)
00004F E6               443             MOV     A,@R0
000050 FE               444             MOV     R6,A
000051 08               445             INC     R0
000052 E6               446             MOV     A,@R0
000053 FF               447             MOV     R7,A
                        448     ; }
                        449                             ; SOURCE LINE # 30
000054                  450     ?C0004:
000054 22               451             RET     
                        452     ; END OF _bitrev
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     8

                        453     
                        454     ; 
                        455     ; 
                        456     ; /* returns log n (to the base 2), if n is positive and power of 2 */ 
                        457     ; int log_2(int idata n) 
                        458     
------                  459             RSEG  ?PR?_log_2?MAIN
000000                  460     _log_2:
                        461             USING   0
                        462                             ; SOURCE LINE # 34
                        463     ;---- Variable 'n?144' assigned to Register 'R6/R7' ----
                        464     ; {
                        465                             ; SOURCE LINE # 35
                        466     ;       int idata res; 
                        467     ;       for (res=0; n >= 2; res++) 
                        468                             ; SOURCE LINE # 37
000000 E4               469             CLR     A
000001 7800       F     470             MOV     R0,#LOW (res?145)
000003 F6               471             MOV     @R0,A
000004 08               472             INC     R0
000005 F6               473             MOV     @R0,A
000006                  474     ?C0005:
000006 C3               475             CLR     C
000007 EF               476             MOV     A,R7
000008 9402             477             SUBB    A,#02H
00000A EE               478             MOV     A,R6
00000B 6480             479             XRL     A,#080H
00000D 9480             480             SUBB    A,#080H
00000F 4012             481             JC      ?C0006
                        482     ;               n = n >> 1; 
                        483                             ; SOURCE LINE # 38
000011 EE               484             MOV     A,R6
000012 A2E7             485             MOV     C,ACC.7
000014 13               486             RRC     A
000015 FE               487             MOV     R6,A
000016 EF               488             MOV     A,R7
000017 13               489             RRC     A
000018 FF               490             MOV     R7,A
000019 7800       F     491             MOV     R0,#LOW (res?145+01H)
00001B 06               492             INC     @R0
00001C E6               493             MOV     A,@R0
00001D 18               494             DEC     R0
00001E 70E6             495             JNZ     ?C0005
000020 06               496             INC     @R0
000021                  497     ?C0035:
000021 80E3             498             SJMP    ?C0005
000023                  499     ?C0006:
                        500     ;       return res; 
                        501                             ; SOURCE LINE # 39
000023 7800       F     502             MOV     R0,#LOW (res?145)
000025 E6               503             MOV     A,@R0
000026 FE               504             MOV     R6,A
000027 08               505             INC     R0
000028 E6               506             MOV     A,@R0
000029 FF               507             MOV     R7,A
                        508     ; }
                        509                             ; SOURCE LINE # 40
00002A                  510     ?C0008:
00002A 22               511             RET     
                        512     ; END OF _log_2
                        513     
                        514     ; 
                        515     ; 
                        516     ; 
                        517     ; /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
                        518     ;  * n should be a power of 2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE     9

                        519     ;  * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
                        520     ;  *       see that function for more details on why we treat 'i' as a (log2n-1) bit num
                               ber.
                        521     ;  */
                        522     ; void compute_W(int idata n, int idata W_re[], int idata W_im[])
                        523     
------                  524             RSEG  ?PR?_compute_W?MAIN
000000                  525     _compute_W:
                        526             USING   0
                        527                             ; SOURCE LINE # 49
000000 8E00       F     528             MOV     n?246,R6
000002 8F00       F     529             MOV     n?246+01H,R7
000004 8B00       F     530             MOV     W_re?247,R3
000006 8A00       F     531             MOV     W_re?247+01H,R2
000008 8900       F     532             MOV     W_re?247+02H,R1
                        533     ; {
                        534                             ; SOURCE LINE # 50
                        535     ;       int idata i;
                        536     ;       int idata br;
                        537     ;       int log2n = log_2(n);
                        538                             ; SOURCE LINE # 53
00000A 120000     F     539             LCALL   _log_2
00000D 8E00       F     540             MOV     log2n?251,R6
00000F 8F00       F     541             MOV     log2n?251+01H,R7
                        542     ; 
                        543     ;       for (i=0; i<(n/2); i++)
                        544                             ; SOURCE LINE # 55
000011 E4               545             CLR     A
000012 7800       F     546             MOV     R0,#LOW (i?249)
000014 F6               547             MOV     @R0,A
000015 08               548             INC     R0
000016 F6               549             MOV     @R0,A
000017                  550     ?C0009:
000017 AE00       F     551             MOV     R6,n?246
000019 AF00       F     552             MOV     R7,n?246+01H
00001B 7C00             553             MOV     R4,#00H
00001D 7D02             554             MOV     R5,#02H
00001F 120000     E     555             LCALL   ?C?SIDIV
000022 AC06             556             MOV     R4,AR6
000024 AD07             557             MOV     R5,AR7
000026 7800       F     558             MOV     R0,#LOW (i?249)
000028 E6               559             MOV     A,@R0
000029 FE               560             MOV     R6,A
00002A 08               561             INC     R0
00002B E6               562             MOV     A,@R0
00002C FF               563             MOV     R7,A
00002D C3               564             CLR     C
00002E 9D               565             SUBB    A,R5
00002F EC               566             MOV     A,R4
000030 6480             567             XRL     A,#080H
000032 F8               568             MOV     R0,A
000033 EE               569             MOV     A,R6
000034 6480             570             XRL     A,#080H
000036 98               571             SUBB    A,R0
000037 4009             572             JC      $ + 0BH
                        573             ;LJMP   ?C0012
000039 750000     F     574             MOV ECO_PAGE_ADDR,#HIGH (?C0012)
00003C 750000     F     575         MOV ECO_PAGE_ADDR+01H,#LOW (?C0012)
00003F 020000     E     576         LJMP   eco_page_manager
                        577     ;       {
                        578                             ; SOURCE LINE # 56
                        579     ;               br = bitrev(i,log2n-1); 
                        580                             ; SOURCE LINE # 57
000042 E500       F     581             MOV     A,log2n?251+01H
000044 24FF             582             ADD     A,#0FFH
000046 FD               583             MOV     R5,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    10

000047 E500       F     584             MOV     A,log2n?251
000049 34FF             585             ADDC    A,#0FFH
00004B FC               586             MOV     R4,A
00004C 120000     F     587             LCALL   _bitrev
00004F 7800       F     588             MOV     R0,#LOW (br?250)
000051 A606             589             MOV     @R0,AR6
000053 08               590             INC     R0
000054 A607             591             MOV     @R0,AR7
                        592     ;               W_re[br] = cos((i*2*3)/(n));  
                        593                             ; SOURCE LINE # 58
000056 7800       F     594             MOV     R0,#LOW (i?249)
000058 E6               595             MOV     A,@R0
000059 FE               596             MOV     R6,A
00005A 08               597             INC     R0
00005B E6               598             MOV     A,@R0
00005C FF               599             MOV     R7,A
00005D 7C00             600             MOV     R4,#00H
00005F 7D06             601             MOV     R5,#06H
000061 120000     E     602             LCALL   ?C?IMUL
000064 AC00       F     603             MOV     R4,n?246
000066 AD00       F     604             MOV     R5,n?246+01H
000068 120000     E     605             LCALL   ?C?SIDIV
00006B AC06             606             MOV     R4,AR6
00006D AD07             607             MOV     R5,AR7
00006F EC               608             MOV     A,R4
000070 120000     E     609             LCALL   ?C?FCASTI
000073 120000     E     610             LCALL   _cos
000076 120000     E     611             LCALL   ?C?CASTF
000079 AD07             612             MOV     R5,AR7
00007B 7800       F     613             MOV     R0,#LOW (br?250+01H)
00007D E6               614             MOV     A,@R0
00007E 25E0             615             ADD     A,ACC
000080 FF               616             MOV     R7,A
000081 18               617             DEC     R0
000082 E6               618             MOV     A,@R0
000083 33               619             RLC     A
000084 AB00       F     620             MOV     R3,W_re?247
000086 AA00       F     621             MOV     R2,W_re?247+01H
000088 A900       F     622             MOV     R1,W_re?247+02H
00008A 8F82             623             MOV     DPL,R7
00008C F583             624             MOV     DPH,A
00008E EE               625             MOV     A,R6
00008F 8DF0             626             MOV     B,R5
000091 120000     E     627             LCALL   ?C?ISTOPTR
                        628     ;               W_im[br] = sin((i*2*3)/(n));  
                        629                             ; SOURCE LINE # 59
000094 7800       F     630             MOV     R0,#LOW (i?249)
000096 E6               631             MOV     A,@R0
000097 FE               632             MOV     R6,A
000098 08               633             INC     R0
000099 E6               634             MOV     A,@R0
00009A FF               635             MOV     R7,A
00009B 7C00             636             MOV     R4,#00H
00009D 7D06             637             MOV     R5,#06H
00009F 120000     E     638             LCALL   ?C?IMUL
0000A2 AC00       F     639             MOV     R4,n?246
0000A4 AD00       F     640             MOV     R5,n?246+01H
0000A6 120000     E     641             LCALL   ?C?SIDIV
0000A9 AC06             642             MOV     R4,AR6
0000AB AD07             643             MOV     R5,AR7
0000AD EC               644             MOV     A,R4
0000AE 120000     E     645             LCALL   ?C?FCASTI
0000B1 120000     E     646             LCALL   _sin
0000B4 120000     E     647             LCALL   ?C?CASTF
0000B7 AD07             648             MOV     R5,AR7
0000B9 7800       F     649             MOV     R0,#LOW (br?250+01H)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    11

0000BB E6               650             MOV     A,@R0
0000BC 25E0             651             ADD     A,ACC
0000BE FF               652             MOV     R7,A
0000BF 18               653             DEC     R0
0000C0 E6               654             MOV     A,@R0
0000C1 33               655             RLC     A
0000C2 AB00       F     656             MOV     R3,W_im?248
0000C4 AA00       F     657             MOV     R2,W_im?248+01H
0000C6 A900       F     658             MOV     R1,W_im?248+02H
0000C8 8F82             659             MOV     DPL,R7
0000CA F583             660             MOV     DPH,A
0000CC EE               661             MOV     A,R6
0000CD 8DF0             662             MOV     B,R5
0000CF 120000     E     663             LCALL   ?C?ISTOPTR
                        664     ;       }
                        665                             ; SOURCE LINE # 60
0000D2 7800       F     666             MOV     R0,#LOW (i?249+01H)
0000D4 06               667             INC     @R0
0000D5 E6               668             MOV     A,@R0
0000D6 18               669             DEC     R0
0000D7 6009             670             JZ      $ + 0BH
                        671             ;LJMP   ?C0009
0000D9 750000     F     672             MOV ECO_PAGE_ADDR,#HIGH (?C0009)
0000DC 750000     F     673         MOV ECO_PAGE_ADDR+01H,#LOW (?C0009)
0000DF 020000     E     674         LJMP   eco_page_manager
0000E2 06               675             INC     @R0
0000E3                  676     ?C0036:
                        677             ;LJMP   ?C0009
0000E3 750000     F     678             MOV ECO_PAGE_ADDR,#HIGH (?C0009)
0000E6 750000     F     679         MOV ECO_PAGE_ADDR+01H,#LOW (?C0009)
0000E9 020000     E     680         LJMP   eco_page_manager
                        681     ; //#ifdef COMMENT_ONLY 
                        682     ; //    for (i=0;i<(n/2);i++)
                        683     ; //    { 
                        684     ; //            br = i; //bitrev(i,log2n-1); 
                        685     ; //            printf("(%g\t%g)\n", W_re[br], W_im[br]);
                        686     ; //    }  
                        687     ; //#endif 
                        688     ; }
                        689                             ; SOURCE LINE # 68
0000EC                  690     ?C0012:
0000EC 22               691             RET     
                        692     ; END OF _compute_W
                        693     
                        694     ; 
                        695     ; 
                        696     ; /* permutes the array using a bit-reversal permutation */ 
                        697     ; void permute_bitrev(int n, int *A_re, int *A_im) 
                        698     
------                  699             RSEG  ?PR?_permute_bitrev?MAIN
000000                  700     _permute_bitrev:
                        701             USING   0
                        702                             ; SOURCE LINE # 72
000000 8E00       F     703             MOV     n?352,R6
000002 8F00       F     704             MOV     n?352+01H,R7
000004 8B00       F     705             MOV     A_re?353,R3
000006 8A00       F     706             MOV     A_re?353+01H,R2
000008 8900       F     707             MOV     A_re?353+02H,R1
                        708     ; { 
                        709                             ; SOURCE LINE # 73
                        710     ;       int idata i;
                        711     ;       int idata bri;
                        712     ;       int idata log2n;
                        713     ;       int idata t_re;
                        714     ;       int idata t_im;
                        715     ; 
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    12

                        716     ;       log2n = log_2(n); 
                        717                             ; SOURCE LINE # 80
00000A 120000     F     718             LCALL   _log_2
00000D 7800       F     719             MOV     R0,#LOW (log2n?357)
00000F A606             720             MOV     @R0,AR6
000011 08               721             INC     R0
000012 A607             722             MOV     @R0,AR7
                        723     ; 
                        724     ;       for (i=0; i<n; i++)
                        725                             ; SOURCE LINE # 82
000014 E4               726             CLR     A
000015 7800       F     727             MOV     R0,#LOW (i?355)
000017 F6               728             MOV     @R0,A
000018 08               729             INC     R0
000019 F6               730             MOV     @R0,A
00001A                  731     ?C0013:
00001A 7800       F     732             MOV     R0,#LOW (i?355)
00001C E6               733             MOV     A,@R0
00001D FE               734             MOV     R6,A
00001E 08               735             INC     R0
00001F E6               736             MOV     A,@R0
000020 FF               737             MOV     R7,A
000021 C3               738             CLR     C
000022 9500       F     739             SUBB    A,n?352+01H
000024 E500       F     740             MOV     A,n?352
000026 6480             741             XRL     A,#080H
000028 F8               742             MOV     R0,A
000029 EE               743             MOV     A,R6
00002A 6480             744             XRL     A,#080H
00002C 98               745             SUBB    A,R0
00002D 4009             746             JC      $ + 0BH
                        747             ;LJMP   ?C0017
00002F 750000     F     748             MOV ECO_PAGE_ADDR,#HIGH (?C0017)
000032 750000     F     749         MOV ECO_PAGE_ADDR+01H,#LOW (?C0017)
000035 020000     E     750         LJMP   eco_page_manager     
                        751     ;       {
                        752                             ; SOURCE LINE # 83
                        753     ;               bri  = bitrev(i, log2n);
                        754                             ; SOURCE LINE # 84
000038 7800       F     755             MOV     R0,#LOW (log2n?357)
00003A E6               756             MOV     A,@R0
00003B FC               757             MOV     R4,A
00003C 08               758             INC     R0
00003D E6               759             MOV     A,@R0
00003E FD               760             MOV     R5,A
                        761     
00003F 7800       E     762             MOV     R0,#LOW (ECO_PAGE_REGISTER4)
000041 F6               763             MOV     @R0,A
                        764     
000042 7800       E     765             MOV     R0,#LOW (ECO_PAGE_REGISTER5)
000044 F6               766             MOV     @R0,A
                        767     
                        768             ;LCALL  _bitrev
000045 750000     F     769             MOV ECO_PAGE_ADDR,#HIGH (_bitrev)
000048 750000     F     770         MOV ECO_PAGE_ADDR+01H,#LOW (_bitrev)
00004B 120000     E     771         LCALL   eco_page_manager
                        772     
00004E 7800       F     773             MOV     R0,#LOW (bri?356)
000050 EE               774             MOV     A,R6
000051 F6               775             MOV     @R0,A
000052 08               776             INC     R0
000053 EF               777             MOV     A,R7
000054 F6               778             MOV     @R0,A
                        779     ; 
                        780     ;               /* skip already swapped elements */
                        781     ;               if (bri <= i) continue;
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    13

                        782                             ; SOURCE LINE # 87
000055 7800       F     783             MOV     R0,#LOW (i?355)
000057 E6               784             MOV     A,@R0
000058 FC               785             MOV     R4,A
000059 08               786             INC     R0
00005A E6               787             MOV     A,@R0
00005B FD               788             MOV     R5,A
00005C D3               789             SETB    C
00005D EF               790             MOV     A,R7
00005E 9D               791             SUBB    A,R5
00005F EC               792             MOV     A,R4
000060 6480             793             XRL     A,#080H
000062 F8               794             MOV     R0,A
000063 EE               795             MOV     A,R6
000064 6480             796             XRL     A,#080H
000066 98               797             SUBB    A,R0
000067 5009             798             JNC     $ + 0BH
                        799             ;LJMP   ?C0015
000069 750000     F     800             MOV ECO_PAGE_ADDR,#HIGH (?C0015)
00006C 750000     F     801         MOV ECO_PAGE_ADDR+01H,#LOW (?C0015)
00006F 020000     E     802         LJMP   eco_page_manager
000072                  803     ?C0016:
                        804     ; 
                        805     ;               t_re = A_re[i];
                        806                             ; SOURCE LINE # 89
000072 7800       F     807             MOV     R0,#LOW (i?355+01H)
000074 E6               808             MOV     A,@R0
000075 25E0             809             ADD     A,ACC
000077 FF               810             MOV     R7,A
000078 18               811             DEC     R0
000079 E6               812             MOV     A,@R0
00007A 33               813             RLC     A
00007B FE               814             MOV     R6,A
00007C AB00       F     815             MOV     R3,A_re?353
00007E AA00       F     816             MOV     R2,A_re?353+01H
000080 A900       F     817             MOV     R1,A_re?353+02H
000082 8F82             818             MOV     DPL,R7
000084 F583             819             MOV     DPH,A
000086 120000     E     820             LCALL   ?C?ILDOPTR
000089 7800       F     821             MOV     R0,#LOW (t_re?358)
00008B A6F0             822             MOV     @R0,B
00008D 08               823             INC     R0
00008E F6               824             MOV     @R0,A
                        825     ;               t_im = A_im[i];
                        826                             ; SOURCE LINE # 90
00008F 750000     F     827             MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev_2)
000092 750000     F     828         MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev_2)
000095 020000     E     829         LJMP   eco_page_manager
                        830     
                        831     
                        832     
------                  833         RSEG  ?PR?_permute_bitrev_2?MAIN
000000                  834     _permute_bitrev_2:
                        835         USING   0
                        836     
000000 AB00       F     837             MOV     R3,A_im?354
000002 AA00       F     838             MOV     R2,A_im?354+01H
000004 A900       F     839             MOV     R1,A_im?354+02H
000006 8F82             840             MOV     DPL,R7
000008 8E83             841             MOV     DPH,R6
00000A 120000     E     842             LCALL   ?C?ILDOPTR
00000D 7800       F     843             MOV     R0,#LOW (t_im?359)
00000F A6F0             844             MOV     @R0,B
000011 08               845             INC     R0
000012 F6               846             MOV     @R0,A
                        847     ;               A_re[i]= A_re[bri];
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    14

                        848                             ; SOURCE LINE # 91
000013 7800       F     849             MOV     R0,#LOW (bri?356+01H)
000015 E6               850             MOV     A,@R0
000016 25E0             851             ADD     A,ACC
000018 FF               852             MOV     R7,A
000019 18               853             DEC     R0
00001A E6               854             MOV     A,@R0
00001B 33               855             RLC     A
00001C AB00       F     856             MOV     R3,A_re?353
00001E AA00       F     857             MOV     R2,A_re?353+01H
000020 A900       F     858             MOV     R1,A_re?353+02H
000022 8F82             859             MOV     DPL,R7
000024 F583             860             MOV     DPH,A
000026 120000     E     861             LCALL   ?C?ILDOPTR
000029 FD               862             MOV     R5,A
00002A 7800       F     863             MOV     R0,#LOW (i?355+01H)
00002C E6               864             MOV     A,@R0
00002D 25E0             865             ADD     A,ACC
00002F FF               866             MOV     R7,A
000030 18               867             DEC     R0
000031 E6               868             MOV     A,@R0
000032 33               869             RLC     A
000033 8F82             870             MOV     DPL,R7
000035 F583             871             MOV     DPH,A
000037 E5F0             872             MOV     A,B
000039 8DF0             873             MOV     B,R5
00003B 120000     E     874             LCALL   ?C?ISTOPTR
                        875     ;               A_im[i]= A_im[bri];
                        876                             ; SOURCE LINE # 92
00003E 7800       F     877             MOV     R0,#LOW (bri?356+01H)
000040 E6               878             MOV     A,@R0
000041 25E0             879             ADD     A,ACC
000043 FF               880             MOV     R7,A
000044 18               881             DEC     R0
000045 E6               882             MOV     A,@R0
000046 33               883             RLC     A
000047 AB00       F     884             MOV     R3,A_im?354
000049 AA00       F     885             MOV     R2,A_im?354+01H
00004B A900       F     886             MOV     R1,A_im?354+02H
00004D 8F82             887             MOV     DPL,R7
00004F F583             888             MOV     DPH,A
000051 120000     E     889             LCALL   ?C?ILDOPTR
000054 FD               890             MOV     R5,A
000055 7800       F     891             MOV     R0,#LOW (i?355+01H)
000057 E6               892             MOV     A,@R0
000058 25E0             893             ADD     A,ACC
00005A FF               894             MOV     R7,A
00005B 18               895             DEC     R0
00005C E6               896             MOV     A,@R0
00005D 33               897             RLC     A
00005E 8F82             898             MOV     DPL,R7
000060 F583             899             MOV     DPH,A
000062 E5F0             900             MOV     A,B
000064 8DF0             901             MOV     B,R5
000066 120000     E     902             LCALL   ?C?ISTOPTR
                        903     ;               A_re[bri]= t_re;
                        904                             ; SOURCE LINE # 93
000069 7800       F     905             MOV     R0,#LOW (t_re?358)
00006B E6               906             MOV     A,@R0
00006C FC               907             MOV     R4,A
00006D 08               908             INC     R0
00006E E6               909             MOV     A,@R0
00006F FD               910             MOV     R5,A
000070 7800       F     911             MOV     R0,#LOW (bri?356+01H)
000072 E6               912             MOV     A,@R0
000073 25E0             913             ADD     A,ACC
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    15

000075 FF               914             MOV     R7,A
000076 18               915             DEC     R0
000077 E6               916             MOV     A,@R0
000078 33               917             RLC     A
000079 FE               918             MOV     R6,A
00007A AB00       F     919             MOV     R3,A_re?353
00007C AA00       F     920             MOV     R2,A_re?353+01H
00007E A900       F     921             MOV     R1,A_re?353+02H
000080 8F82             922             MOV     DPL,R7
000082 F583             923             MOV     DPH,A
000084 EC               924             MOV     A,R4
000085 8DF0             925             MOV     B,R5
000087 120000     E     926             LCALL   ?C?ISTOPTR
                        927     ;               A_im[bri]= t_im;
                        928                             ; SOURCE LINE # 94
00008A 7800       F     929             MOV     R0,#LOW (t_im?359)
00008C E6               930             MOV     A,@R0
00008D FD               931             MOV     R5,A
00008E 08               932             INC     R0
00008F E6               933             MOV     A,@R0
000090 AB00       F     934             MOV     R3,A_im?354
000092 AA00       F     935             MOV     R2,A_im?354+01H
000094 A900       F     936             MOV     R1,A_im?354+02H
000096 8F82             937             MOV     DPL,R7
000098 8E83             938             MOV     DPH,R6
00009A CD               939             XCH     A,R5
00009B 8DF0             940             MOV     B,R5
00009D 120000     E     941             LCALL   ?C?ISTOPTR
                        942     ;       }  
                        943                             ; SOURCE LINE # 95
0000A0                  944     ?C0015:
0000A0 7800       F     945             MOV     R0,#LOW (i?355+01H)
0000A2 06               946             INC     @R0
0000A3 E6               947             MOV     A,@R0
0000A4 18               948             DEC     R0
0000A5 6009             949             JZ      $ + 0BH
                        950             ;LJMP   ?C0013
0000A7 750000     F     951             MOV ECO_PAGE_ADDR,#HIGH (?C0013)
0000AA 750000     F     952         MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
0000AD 020000     E     953         LJMP   eco_page_manager
0000B0 06               954             INC     @R0
0000B1                  955     ?C0037:
                        956             ;LJMP   ?C0013
0000B1 750000     F     957             MOV ECO_PAGE_ADDR,#HIGH (?C0013)
0000B4 750000     F     958         MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
0000B7 020000     E     959         LJMP   eco_page_manager
                        960     ; } 
                        961                             ; SOURCE LINE # 96
0000BA                  962     ?C0017:
0000BA 22               963             RET     
                        964     ; END OF _permute_bitrev
                        965     
                        966     ; 
                        967     ; 
                        968     ; /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-uni
                               ty lookup table
                        969     ;  * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth root
                               s of unity stored
                        970     ;  * in a permuted bitreversal order.
                        971     ;  *
                        972     ;  * FFT - Decimation In Time FFT with input array in correct order and output array in 
                               bit-reversed order.
                        973     ;  *
                        974     ;  * REQ: n should be a power of 2 to work. 
                        975     ;  *
                        976     ;  * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other deta
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    16

                               ils about VHALF section of the algo
                        977     ;  *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
                        978     ;  *       - See the foll. CS267 website for details of the Decimation In Time FFT imple
                               mented here.
                        979     ;  *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
                        980     ;  *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" boo
                               k for another variant of Iterative-FFT
                        981     ;  */
                        982     ; 
                        983     ; //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
                        984     ; void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 
                        985     
------                  986             RSEG  ?PR?_fft?MAIN
000000                  987     _fft:
                        988             USING   0
                        989                             ; SOURCE LINE # 115
000000 8E00       F     990             MOV     n?460,R6
000002 8F00       F     991             MOV     n?460+01H,R7
000004 8B00       F     992             MOV     A_re?461,R3
000006 8A00       F     993             MOV     A_re?461+01H,R2
000008 8900       F     994             MOV     A_re?461+02H,R1
                        995     ; {
                        996                             ; SOURCE LINE # 116
                        997     ;       int idata w_re, w_im, u_re, u_im, t_re, t_im;
                        998     ;       int idata m, g, b;
                        999     ;       //int i;
                       1000     ;       int idata mt, k;
                       1001     ; 
                       1002     ;       /* for each stage */  
                       1003     ;       for (m=n; m>=2; m=m>>1) 
                       1004                             ; SOURCE LINE # 123
00000A 7800       F    1005             MOV     R0,#LOW (m?471)
00000C A600       F    1006             MOV     @R0,n?460
00000E 08              1007             INC     R0
00000F A600       F    1008             MOV     @R0,n?460+01H
000011                 1009     ?C0018:
000011 7800       F    1010             MOV     R0,#LOW (m?471)
000013 E6              1011             MOV     A,@R0
000014 FE              1012             MOV     R6,A
000015 08              1013             INC     R0
000016 E6              1014             MOV     A,@R0
000017 FF              1015             MOV     R7,A
000018 C3              1016             CLR     C
000019 9402            1017             SUBB    A,#02H
00001B EE              1018             MOV     A,R6
00001C 6480            1019             XRL     A,#080H
00001E 9480            1020             SUBB    A,#080H
000020 5009            1021             JNC     $ + 0BH
                       1022             ;LJMP   ?C0027
000022 750000     F    1023             MOV ECO_PAGE_ADDR,#HIGH (?C0027)
000025 750000     F    1024         MOV ECO_PAGE_ADDR+01H,#LOW (?C0027)
000028 020000     E    1025         LJMP   eco_page_manager
                       1026     ;       {
                       1027                             ; SOURCE LINE # 124
                       1028     ;               /* m = n/2^s; mt = m/2; */
                       1029     ;               mt = m >> 1;
                       1030                             ; SOURCE LINE # 126
00002B EE              1031             MOV     A,R6
00002C A2E7            1032             MOV     C,ACC.7
00002E 13              1033             RRC     A
00002F 7900       F    1034             MOV     R1,#LOW (mt?474)
000031 F7              1035             MOV     @R1,A
000032 EF              1036             MOV     A,R7
000033 13              1037             RRC     A
000034 09              1038             INC     R1
000035 F7              1039             MOV     @R1,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    17

                       1040     ; 
                       1041     ;               /* for each group of butterfly */ 
                       1042     ;               for (g=0,k=0; g<n; g+=m,k++) 
                       1043                             ; SOURCE LINE # 129
000036 E4              1044             CLR     A
000037 08              1045             INC     R0
000038 F6              1046             MOV     @R0,A
000039 08              1047             INC     R0
00003A F6              1048             MOV     @R0,A
00003B 7800       F    1049             MOV     R0,#LOW (k?475)
00003D F6              1050             MOV     @R0,A
00003E 08              1051             INC     R0
00003F F6              1052             MOV     @R0,A
000040                 1053     ?C0021:
000040 C3              1054             CLR     C
000041 7800       F    1055             MOV     R0,#LOW (g?472+01H)
000043 E6              1056             MOV     A,@R0
000044 9500       F    1057             SUBB    A,n?460+01H
000046 E500       F    1058             MOV     A,n?460
000048 6480            1059             XRL     A,#080H
00004A F5F0            1060             MOV     B,A
00004C 18              1061             DEC     R0
00004D E6              1062             MOV     A,@R0
00004E 6480            1063             XRL     A,#080H
000050 95F0            1064             SUBB    A,B
000052 4009            1065             JC      $ + 0BH
                       1066             ;LJMP   ?C0020
000054 750000     F    1067             MOV ECO_PAGE_ADDR,#HIGH (?C0020)
000057 750000     F    1068         MOV ECO_PAGE_ADDR+01H,#LOW (?C0020)
00005A 020000     E    1069         LJMP   eco_page_manager
                       1070     ;               {
                       1071                             ; SOURCE LINE # 130
                       1072     ;                       /* each butterfly group uses only one root of unity. actually, i
                               t is the bitrev of this group's number k.
                       1073     ;                        * BUT 'bitrev' it as a log2n-1 bit number because we are using 
                               a lookup array of nth root of unity and
                       1074     ;                        * using cancellation lemma to scale nth root to n/2, n/4,... th
                                root.
                       1075     ;                        *
                       1076     ;                        * It turns out like the foll.
                       1077     ;                        *   w.re = W[bitrev(k, log2n-1)].re;
                       1078     ;                        *   w.im = W[bitrev(k, log2n-1)].im;
                       1079     ;                        * Still, we just use k, because the lookup array itself is bit-
                               reversal permuted. 
                       1080     ;                        */
                       1081     ;                       w_re = W_re[k];
                       1082                             ; SOURCE LINE # 140
00005D 7800       F    1083             MOV     R0,#LOW (k?475+01H)
00005F E6              1084             MOV     A,@R0
000060 25E0            1085             ADD     A,ACC
000062 FF              1086             MOV     R7,A
000063 18              1087             DEC     R0
000064 E6              1088             MOV     A,@R0
000065 33              1089             RLC     A
000066 FE              1090             MOV     R6,A
000067 AB00       F    1091             MOV     R3,W_re?463
000069 AA00       F    1092             MOV     R2,W_re?463+01H
00006B A900       F    1093             MOV     R1,W_re?463+02H
00006D 8F82            1094             MOV     DPL,R7
00006F F583            1095             MOV     DPH,A
000071 120000     E    1096             LCALL   ?C?ILDOPTR
000074 7800       F    1097             MOV     R0,#LOW (w_re?465)
000076 A6F0            1098             MOV     @R0,B
000078 08              1099             INC     R0
000079 F6              1100             MOV     @R0,A
                       1101     ;                       w_im = W_im[k];
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    18

                       1102                             ; SOURCE LINE # 141
00007A AB00       F    1103             MOV     R3,W_im?464
00007C AA00       F    1104             MOV     R2,W_im?464+01H
00007E A900       F    1105             MOV     R1,W_im?464+02H
000080 8F82            1106             MOV     DPL,R7
000082 8E83            1107             MOV     DPH,R6
000084 120000     E    1108             LCALL   ?C?ILDOPTR
000087 7800       F    1109             MOV     R0,#LOW (w_im?466)
000089 A6F0            1110             MOV     @R0,B
00008B 08              1111             INC     R0
00008C F6              1112             MOV     @R0,A
                       1113     ; 
                       1114     ;                       /* for each butterfly */ 
                       1115     ;                       for (b=g; b<(g+mt); b++) 
                       1116                             ; SOURCE LINE # 144
00008D 7800       F    1117             MOV     R0,#LOW (g?472)
00008F E6              1118             MOV     A,@R0
000090 FE              1119             MOV     R6,A
000091 08              1120             INC     R0
000092 E6              1121             MOV     A,@R0
000093 FF              1122             MOV     R7,A
000094 08              1123             INC     R0
000095 A606            1124             MOV     @R0,AR6
000097 08              1125             INC     R0
000098 A607            1126             MOV     @R0,AR7
00009A                 1127     ?C0024:
00009A 7900       F    1128             MOV     R1,#LOW (g?472+01H)
00009C E7              1129             MOV     A,@R1
00009D 7800       F    1130             MOV     R0,#LOW (mt?474+01H)
00009F 26              1131             ADD     A,@R0
0000A0 FF              1132             MOV     R7,A
0000A1 19              1133             DEC     R1
0000A2 E7              1134             MOV     A,@R1
0000A3 18              1135             DEC     R0
0000A4 36              1136             ADDC    A,@R0
0000A5 FE              1137             MOV     R6,A
0000A6 C3              1138             CLR     C
0000A7 18              1139             DEC     R0
0000A8 E6              1140             MOV     A,@R0
0000A9 9F              1141             SUBB    A,R7
0000AA EE              1142             MOV     A,R6
0000AB 6480            1143             XRL     A,#080H
0000AD F5F0            1144             MOV     B,A
0000AF 18              1145             DEC     R0
0000B0 E6              1146             MOV     A,@R0
0000B1 6480            1147             XRL     A,#080H
0000B3 95F0            1148             SUBB    A,B
0000B5 4009            1149             JC      $ + 0BH
                       1150             ;LJMP   ?C0023
0000B7 750000     F    1151             MOV ECO_PAGE_ADDR,#HIGH (?C0023)
0000BA 750000     F    1152         MOV ECO_PAGE_ADDR+01H,#LOW (?C0023)
0000BD 020000     E    1153         LJMP   eco_page_manager
                       1154     ;                       {
                       1155                             ; SOURCE LINE # 145
                       1156     ;                               /* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b],
                                A_im[b], A_re[b+mt], A_im[b+mt]);
                       1157     ;                                */ 
                       1158     ;                               //printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1159     ; 
                       1160     ;                               /* t = w * A[b+mt] */
                       1161     ;                               t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
                       1162                             ; SOURCE LINE # 151
0000C0 7900       F    1163             MOV     R1,#LOW (b?473+01H)
0000C2 E7              1164             MOV     A,@R1
0000C3 7800       F    1165             MOV     R0,#LOW (mt?474+01H)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    19

0000C5 26              1166             ADD     A,@R0
0000C6 FF              1167             MOV     R7,A
0000C7 19              1168             DEC     R1
0000C8 E7              1169             MOV     A,@R1
0000C9 18              1170             DEC     R0
0000CA 36              1171             ADDC    A,@R0
0000CB FE              1172             MOV     R6,A
0000CC EF              1173             MOV     A,R7
0000CD 25E0            1174             ADD     A,ACC
0000CF FF              1175             MOV     R7,A
0000D0 EE              1176             MOV     A,R6
0000D1 33              1177             RLC     A
0000D2 AB00       F    1178             MOV     R3,A_im?462
0000D4 AA00       F    1179             MOV     R2,A_im?462+01H
0000D6 A900       F    1180             MOV     R1,A_im?462+02H
0000D8 8F82            1181             MOV     DPL,R7
0000DA F583            1182             MOV     DPH,A
0000DC 120000     E    1183             LCALL   ?C?ILDOPTR
                       1184             ;MOV    R5,A
                       1185             ;MOV    R4,B
                       1186     
0000DF 7800       E    1187             MOV R0,#LOW (ECO_PAGE_REGISTER5)
0000E1 F6              1188         MOV @R0,A
0000E2 7800       E    1189         MOV R0,#LOW (ECO_PAGE_REGISTER4)
0000E4 A6F0            1190         MOV @R0,B
                       1191         ;XRL    P0,#020H
                       1192     
                       1193         ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000E6 750000     F    1194         MOV ECO_PAGE_ADDR,#HIGH (_fft_2)
0000E9 750000     F    1195         MOV ECO_PAGE_ADDR+01H,#LOW (_fft_2)
0000EC 020000     E    1196         LJMP   eco_page_manager
                       1197     
                       1198     
------                 1199         RSEG  ?PR?_fft_2?MAIN
000000                 1200     _fft_2:
                       1201         USING   0
                       1202     
000000 7800       F    1203             MOV     R0,#LOW (w_im?466)
000002 E6              1204             MOV     A,@R0
000003 FE              1205             MOV     R6,A
000004 08              1206             INC     R0
000005 E6              1207             MOV     A,@R0
000006 FF              1208             MOV     R7,A
000007 120000     E    1209             LCALL   ?C?IMUL
00000A C006            1210             PUSH    AR6
00000C C007            1211             PUSH    AR7
00000E 7900       F    1212             MOV     R1,#LOW (b?473+01H)
000010 E7              1213             MOV     A,@R1
000011 7800       F    1214             MOV     R0,#LOW (mt?474+01H)
000013 26              1215             ADD     A,@R0
000014 FF              1216             MOV     R7,A
000015 19              1217             DEC     R1
000016 E7              1218             MOV     A,@R1
000017 18              1219             DEC     R0
000018 36              1220             ADDC    A,@R0
000019 FE              1221             MOV     R6,A
00001A EF              1222             MOV     A,R7
00001B 25E0            1223             ADD     A,ACC
00001D FF              1224             MOV     R7,A
00001E EE              1225             MOV     A,R6
00001F 33              1226             RLC     A
000020 AB00       F    1227             MOV     R3,A_re?461
000022 AA00       F    1228             MOV     R2,A_re?461+01H
000024 A900       F    1229             MOV     R1,A_re?461+02H
000026 8F82            1230             MOV     DPL,R7
000028 F583            1231             MOV     DPH,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    20

00002A 120000     E    1232             LCALL   ?C?ILDOPTR
00002D FB              1233             MOV     R3,A
00002E AAF0            1234             MOV     R2,B
000030 7800       F    1235             MOV     R0,#LOW (w_re?465)
000032 E6              1236             MOV     A,@R0
000033 FE              1237             MOV     R6,A
000034 08              1238             INC     R0
000035 E6              1239             MOV     A,@R0
000036 FF              1240             MOV     R7,A
000037 AD03            1241             MOV     R5,AR3
000039 AC02            1242             MOV     R4,AR2
00003B 120000     E    1243             LCALL   ?C?IMUL
00003E AC06            1244             MOV     R4,AR6
000040 AD07            1245             MOV     R5,AR7
000042 D007            1246             POP     AR7
000044 D006            1247             POP     AR6
000046 C3              1248             CLR     C
000047 ED              1249             MOV     A,R5
000048 9F              1250             SUBB    A,R7
000049 7800       F    1251             MOV     R0,#LOW (t_re?469+01H)
00004B F6              1252             MOV     @R0,A
00004C EC              1253             MOV     A,R4
00004D 9E              1254             SUBB    A,R6
00004E 18              1255             DEC     R0
00004F F6              1256             MOV     @R0,A
                       1257     ;                               t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
                       1258                             ; SOURCE LINE # 152
000050 7800       F    1259             MOV     R0,#LOW (w_im?466)
000052 E6              1260             MOV     A,@R0
000053 FE              1261             MOV     R6,A
000054 08              1262             INC     R0
000055 E6              1263             MOV     A,@R0
000056 FF              1264             MOV     R7,A
000057 AD03            1265             MOV     R5,AR3
000059 AC02            1266             MOV     R4,AR2
00005B 120000     E    1267             LCALL   ?C?IMUL
00005E C006            1268             PUSH    AR6
000060 C007            1269             PUSH    AR7
000062 7900       F    1270             MOV     R1,#LOW (b?473+01H)
000064 E7              1271             MOV     A,@R1
000065 7800       F    1272             MOV     R0,#LOW (mt?474+01H)
000067 26              1273             ADD     A,@R0
000068 FF              1274             MOV     R7,A
000069 19              1275             DEC     R1
00006A E7              1276             MOV     A,@R1
00006B 18              1277             DEC     R0
00006C 36              1278             ADDC    A,@R0
00006D FE              1279             MOV     R6,A
00006E EF              1280             MOV     A,R7
00006F 25E0            1281             ADD     A,ACC
000071 FF              1282             MOV     R7,A
000072 EE              1283             MOV     A,R6
000073 33              1284             RLC     A
000074 AB00       F    1285             MOV     R3,A_im?462
000076 AA00       F    1286             MOV     R2,A_im?462+01H
000078 A900       F    1287             MOV     R1,A_im?462+02H
00007A 8F82            1288             MOV     DPL,R7
00007C F583            1289             MOV     DPH,A
00007E 120000     E    1290             LCALL   ?C?ILDOPTR
000081 FD              1291             MOV     R5,A
000082 ACF0            1292             MOV     R4,B
000084 7800       F    1293             MOV     R0,#LOW (w_re?465)
000086 E6              1294             MOV     A,@R0
000087 FE              1295             MOV     R6,A
000088 08              1296             INC     R0
000089 E6              1297             MOV     A,@R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    21

00008A FF              1298             MOV     R7,A
00008B 120000     E    1299             LCALL   ?C?IMUL
00008E D0E0            1300             POP     ACC
000090 2F              1301             ADD     A,R7
000091 7800       F    1302             MOV     R0,#LOW (t_im?470+01H)
000093 F6              1303             MOV     @R0,A
000094 D0E0            1304             POP     ACC
000096 3E              1305             ADDC    A,R6
000097 18              1306             DEC     R0
000098 F6              1307             MOV     @R0,A
                       1308     ; 
                       1309     ;                               /* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
                       1310     ;                               u_re = A_re[b];
                       1311                             ; SOURCE LINE # 155
000099 7800       F    1312             MOV     R0,#LOW (b?473+01H)
00009B E6              1313             MOV     A,@R0
00009C 25E0            1314             ADD     A,ACC
00009E FF              1315             MOV     R7,A
00009F 18              1316             DEC     R0
0000A0 E6              1317             MOV     A,@R0
0000A1 33              1318             RLC     A
0000A2 FE              1319             MOV     R6,A
0000A3 AB00       F    1320             MOV     R3,A_re?461
0000A5 AA00       F    1321             MOV     R2,A_re?461+01H
0000A7 A900       F    1322             MOV     R1,A_re?461+02H
0000A9 8F82            1323             MOV     DPL,R7
0000AB F583            1324             MOV     DPH,A
0000AD 120000     E    1325             LCALL   ?C?ILDOPTR
0000B0 7800       F    1326             MOV     R0,#LOW (u_re?467)
0000B2 A6F0            1327             MOV     @R0,B
0000B4 08              1328             INC     R0
0000B5 F6              1329             MOV     @R0,A
                       1330     ;                               u_im = A_im[b];
                       1331                             ; SOURCE LINE # 156
0000B6 AB00       F    1332             MOV     R3,A_im?462
0000B8 AA00       F    1333             MOV     R2,A_im?462+01H
0000BA A900       F    1334             MOV     R1,A_im?462+02H
0000BC 8F82            1335             MOV     DPL,R7
0000BE 8E83            1336             MOV     DPH,R6
0000C0 120000     E    1337             LCALL   ?C?ILDOPTR
0000C3 7800       F    1338             MOV     R0,#LOW (u_im?468)
0000C5 A6F0            1339             MOV     @R0,B
0000C7 08              1340             INC     R0
0000C8 F6              1341             MOV     @R0,A
                       1342     ;                               A_re[b] = u_re + t_re;
                       1343                             ; SOURCE LINE # 157
0000C9 7900       F    1344             MOV     R1,#LOW (u_re?467+01H)
0000CB E7              1345             MOV     A,@R1
0000CC 7800       F    1346             MOV     R0,#LOW (t_re?469+01H)
0000CE 26              1347             ADD     A,@R0
0000CF FD              1348             MOV     R5,A
0000D0 19              1349             DEC     R1
0000D1 E7              1350             MOV     A,@R1
0000D2 18              1351             DEC     R0
0000D3 36              1352             ADDC    A,@R0
0000D4 FC              1353             MOV     R4,A
0000D5 7800       F    1354             MOV     R0,#LOW (b?473+01H)
0000D7 E6              1355             MOV     A,@R0
0000D8 25E0            1356             ADD     A,ACC
0000DA FF              1357             MOV     R7,A
0000DB 18              1358             DEC     R0
0000DC E6              1359             MOV     A,@R0
0000DD 33              1360             RLC     A
0000DE AB00       F    1361             MOV     R3,A_re?461
0000E0 AA00       F    1362             MOV     R2,A_re?461+01H
0000E2 A900       F    1363             MOV     R1,A_re?461+02H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    22

0000E4 8F82            1364             MOV     DPL,R7
0000E6 F583            1365             MOV     DPH,A
0000E8 EC              1366             MOV     A,R4
0000E9 8DF0            1367             MOV     B,R5
0000EB 120000     E    1368             LCALL   ?C?ISTOPTR
                       1369     ;                               A_im[b] = u_im + t_im;
                       1370                             ; SOURCE LINE # 158
                       1371     
0000EE 750000     F    1372             MOV ECO_PAGE_ADDR,#HIGH (_fft_3)
0000F1 750000     F    1373         MOV ECO_PAGE_ADDR+01H,#LOW (_fft_3)
0000F4 020000     E    1374         LJMP   eco_page_manager
                       1375     
                       1376     
------                 1377         RSEG  ?PR?_fft_3?MAIN
000000                 1378     _fft_3:
                       1379         USING   0
                       1380     
000000 7900       F    1381             MOV     R1,#LOW (u_im?468+01H)
000002 E7              1382             MOV     A,@R1
000003 7800       F    1383             MOV     R0,#LOW (t_im?470+01H)
000005 26              1384             ADD     A,@R0
000006 FD              1385             MOV     R5,A
000007 19              1386             DEC     R1
000008 E7              1387             MOV     A,@R1
000009 18              1388             DEC     R0
00000A 36              1389             ADDC    A,@R0
00000B FC              1390             MOV     R4,A
00000C 7800       F    1391             MOV     R0,#LOW (b?473+01H)
00000E E6              1392             MOV     A,@R0
00000F 25E0            1393             ADD     A,ACC
000011 FF              1394             MOV     R7,A
000012 18              1395             DEC     R0
000013 E6              1396             MOV     A,@R0
000014 33              1397             RLC     A
000015 AB00       F    1398             MOV     R3,A_im?462
000017 AA00       F    1399             MOV     R2,A_im?462+01H
000019 A900       F    1400             MOV     R1,A_im?462+02H
00001B 8F82            1401             MOV     DPL,R7
00001D F583            1402             MOV     DPH,A
00001F EC              1403             MOV     A,R4
000020 8DF0            1404             MOV     B,R5
000022 120000     E    1405             LCALL   ?C?ISTOPTR
                       1406     ;                               A_re[b+mt] = u_re - t_re;
                       1407                             ; SOURCE LINE # 159
000025 C3              1408             CLR     C
000026 7900       F    1409             MOV     R1,#LOW (u_re?467+01H)
000028 E7              1410             MOV     A,@R1
000029 7800       F    1411             MOV     R0,#LOW (t_re?469+01H)
00002B 96              1412             SUBB    A,@R0
00002C FD              1413             MOV     R5,A
00002D 19              1414             DEC     R1
00002E E7              1415             MOV     A,@R1
00002F 18              1416             DEC     R0
000030 96              1417             SUBB    A,@R0
000031 FC              1418             MOV     R4,A
000032 7900       F    1419             MOV     R1,#LOW (b?473+01H)
000034 E7              1420             MOV     A,@R1
000035 7800       F    1421             MOV     R0,#LOW (mt?474+01H)
000037 26              1422             ADD     A,@R0
000038 FF              1423             MOV     R7,A
000039 19              1424             DEC     R1
00003A E7              1425             MOV     A,@R1
00003B 18              1426             DEC     R0
00003C 36              1427             ADDC    A,@R0
00003D FE              1428             MOV     R6,A
00003E EF              1429             MOV     A,R7
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    23

00003F 25E0            1430             ADD     A,ACC
000041 FF              1431             MOV     R7,A
000042 EE              1432             MOV     A,R6
000043 33              1433             RLC     A
000044 AB00       F    1434             MOV     R3,A_re?461
000046 AA00       F    1435             MOV     R2,A_re?461+01H
000048 A900       F    1436             MOV     R1,A_re?461+02H
00004A 8F82            1437             MOV     DPL,R7
00004C F583            1438             MOV     DPH,A
00004E EC              1439             MOV     A,R4
00004F 8DF0            1440             MOV     B,R5
000051 120000     E    1441             LCALL   ?C?ISTOPTR
                       1442     ;                               A_im[b+mt] = u_im - t_im;
                       1443                             ; SOURCE LINE # 160
000054 C3              1444             CLR     C
000055 7900       F    1445             MOV     R1,#LOW (u_im?468+01H)
000057 E7              1446             MOV     A,@R1
000058 7800       F    1447             MOV     R0,#LOW (t_im?470+01H)
00005A 96              1448             SUBB    A,@R0
00005B FD              1449             MOV     R5,A
00005C 19              1450             DEC     R1
00005D E7              1451             MOV     A,@R1
00005E 18              1452             DEC     R0
00005F 96              1453             SUBB    A,@R0
000060 FC              1454             MOV     R4,A
000061 7900       F    1455             MOV     R1,#LOW (b?473+01H)
000063 E7              1456             MOV     A,@R1
000064 7800       F    1457             MOV     R0,#LOW (mt?474+01H)
000066 26              1458             ADD     A,@R0
000067 FF              1459             MOV     R7,A
000068 19              1460             DEC     R1
000069 E7              1461             MOV     A,@R1
00006A 18              1462             DEC     R0
00006B 36              1463             ADDC    A,@R0
00006C FE              1464             MOV     R6,A
00006D EF              1465             MOV     A,R7
00006E 25E0            1466             ADD     A,ACC
000070 FF              1467             MOV     R7,A
000071 EE              1468             MOV     A,R6
000072 33              1469             RLC     A
000073 AB00       F    1470             MOV     R3,A_im?462
000075 AA00       F    1471             MOV     R2,A_im?462+01H
000077 A900       F    1472             MOV     R1,A_im?462+02H
000079 8F82            1473             MOV     DPL,R7
00007B F583            1474             MOV     DPH,A
00007D EC              1475             MOV     A,R4
00007E 8DF0            1476             MOV     B,R5
000080 120000     E    1477             LCALL   ?C?ISTOPTR
                       1478     ; 
                       1479     ;                               /*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b]
                               , A_im[b], A_re[b+mt], A_im[b+mt]);
                       1480     ;                                */         
                       1481     ;                               //printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1482     ;                       }
                       1483                             ; SOURCE LINE # 165
000083 7800       F    1484             MOV     R0,#LOW (b?473+01H)
000085 06              1485             INC     @R0
000086 E6              1486             MOV     A,@R0
000087 18              1487             DEC     R0
000088 7001            1488             JNZ     ?C0038
00008A 06              1489             INC     @R0
00008B                 1490     ?C0038:
                       1491             ;LJMP   ?C0024
00008B 750000     F    1492             MOV ECO_PAGE_ADDR,#HIGH (?C0024)
00008E 750000     F    1493         MOV ECO_PAGE_ADDR+01H,#LOW (?C0024)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    24

000091 020000     E    1494         LJMP   eco_page_manager
                       1495     ;               }
                       1496                             ; SOURCE LINE # 166
000094                 1497     ?C0023:
000094 7800       F    1498             MOV     R0,#LOW (m?471)
000096 E6              1499             MOV     A,@R0
000097 FE              1500             MOV     R6,A
000098 08              1501             INC     R0
000099 E6              1502             MOV     A,@R0
00009A 7800       F    1503             MOV     R0,#LOW (g?472+01H)
00009C 26              1504             ADD     A,@R0
00009D F6              1505             MOV     @R0,A
00009E 18              1506             DEC     R0
00009F EE              1507             MOV     A,R6
0000A0 36              1508             ADDC    A,@R0
0000A1 F6              1509             MOV     @R0,A
0000A2 7800       F    1510             MOV     R0,#LOW (k?475+01H)
0000A4 06              1511             INC     @R0
0000A5 E6              1512             MOV     A,@R0
0000A6 18              1513             DEC     R0
0000A7 6009            1514             JZ      $ + 0BH
                       1515             ;LJMP   ?C0021
0000A9 750000     F    1516             MOV ECO_PAGE_ADDR,#HIGH (?C0021)
0000AC 750000     F    1517         MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
0000AF 020000     E    1518         LJMP   eco_page_manager
0000B2 06              1519             INC     @R0
0000B3                 1520     ?C0039:
                       1521             ;LJMP   ?C0021
0000B3 750000     F    1522             MOV ECO_PAGE_ADDR,#HIGH (?C0021)
0000B6 750000     F    1523         MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
0000B9 020000     E    1524         LJMP   eco_page_manager
                       1525     ;       }
                       1526                             ; SOURCE LINE # 167
0000BC                 1527     ?C0020:
0000BC 7800       F    1528             MOV     R0,#LOW (m?471)
0000BE E6              1529             MOV     A,@R0
0000BF A2E7            1530             MOV     C,ACC.7
0000C1 13              1531             RRC     A
0000C2 7900       F    1532             MOV     R1,#LOW (m?471)
0000C4 F7              1533             MOV     @R1,A
0000C5 08              1534             INC     R0
0000C6 E6              1535             MOV     A,@R0
0000C7 13              1536             RRC     A
0000C8 09              1537             INC     R1
0000C9 F7              1538             MOV     @R1,A
                       1539             ;LJMP   ?C0018
0000CA 750000     F    1540             MOV ECO_PAGE_ADDR,#HIGH (?C0018)
0000CD 750000     F    1541         MOV ECO_PAGE_ADDR+01H,#LOW (?C0018)
0000D0 020000     E    1542         LJMP   eco_page_manager
                       1543     ; }
                       1544                             ; SOURCE LINE # 168
0000D3                 1545     ?C0027:
0000D3 22              1546             RET     
                       1547     ; END OF _fft
                       1548     
                       1549     ; 
                       1550     ; int main()
                       1551     
------                 1552             RSEG  ?PR?main?MAIN
000000                 1553     main:
                       1554             USING   0
                       1555                             ; SOURCE LINE # 170
                       1556     ; {
                       1557                             ; SOURCE LINE # 171
                       1558     ;       int idata n;
                       1559     ;       //int idata i;
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    25

                       1560     ;       int idata A_re[8];
                       1561     ;       int idata A_im[8];
                       1562     ;       int idata W_re[4];
                       1563     ;       int idata W_im[4]; 
                       1564     ;       //int idata A_re[16];
                       1565     ;       //int idata A_im[16];
                       1566     ;       //int idata W_re[8];
                       1567     ;       //int idata W_im[8]; 
                       1568     ; 
                       1569     ;       store_cpu_rate(16);
                       1570                             ; SOURCE LINE # 183
000000 7F10            1571             MOV     R7,#010H
000002 7E00            1572             MOV     R6,#00H
000004 120000     E    1573             LCALL   _store_cpu_rate
                       1574     ; 
                       1575     ;       P0_DIR &= ~0x28;
                       1576                             ; SOURCE LINE # 185
000007 5394D7          1577             ANL     P0_DIR,#0D7H
                       1578     ;       P0_ALT &= ~0x28;
                       1579                             ; SOURCE LINE # 186
00000A 5395D7          1580             ANL     P0_ALT,#0D7H
                       1581     ; 
                       1582     ;       test_counter = 0;       
                       1583                             ; SOURCE LINE # 188
00000D E4              1584             CLR     A
00000E F500       F    1585             MOV     test_counter,A
000010 F500       F    1586             MOV     test_counter+01H,A
                       1587     ; 
                       1588     ;       serial_init(19200);
                       1589                             ; SOURCE LINE # 190
000012 FF              1590             MOV     R7,A
000013 7E4B            1591             MOV     R6,#04BH
000015 120000     E    1592             LCALL   _serial_init
                       1593     ;       int_print(test_counter);
                       1594                             ; SOURCE LINE # 191
000018 AE00       F    1595             MOV     R6,test_counter
00001A AF00       F    1596             MOV     R7,test_counter+01H
00001C 120000     E    1597             LCALL   _?int_print
                       1598     ;       for(n=0;n<6;n++)
                       1599                             ; SOURCE LINE # 192
00001F E4              1600             CLR     A
000020 7800       F    1601             MOV     R0,#LOW (n?576)
000022 F6              1602             MOV     @R0,A
000023 08              1603             INC     R0
000024 F6              1604             MOV     @R0,A
000025                 1605     ?C0028:
                       1606     ;       {
                       1607                             ; SOURCE LINE # 193
                       1608     ;               blink_led();
                       1609                             ; SOURCE LINE # 194
000025 638020          1610             XRL     P0,#020H
                       1611     ;               mdelay(400);
                       1612                             ; SOURCE LINE # 195
000028 7F90            1613             MOV     R7,#090H
00002A 7E01            1614             MOV     R6,#01H
00002C 120000     E    1615             LCALL   _mdelay
                       1616     ;       }
                       1617                             ; SOURCE LINE # 196
00002F 7800       F    1618             MOV     R0,#LOW (n?576+01H)
000031 06              1619             INC     @R0
000032 E6              1620             MOV     A,@R0
000033 18              1621             DEC     R0
000034 7001            1622             JNZ     ?C0040
000036 06              1623             INC     @R0
000037                 1624     ?C0040:
000037 C3              1625             CLR     C
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    26

000038 7800       F    1626             MOV     R0,#LOW (n?576+01H)
00003A E6              1627             MOV     A,@R0
00003B 9406            1628             SUBB    A,#06H
00003D 18              1629             DEC     R0
00003E E6              1630             MOV     A,@R0
00003F 6480            1631             XRL     A,#080H
000041 9480            1632             SUBB    A,#080H
000043 40E0            1633             JC      ?C0028
000045                 1634     ?C0031:
                       1635     ;       //A_re = (double*)malloc(sizeof(double)*n); 
                       1636     ;       //A_im = (double*)malloc(sizeof(double)*n); 
                       1637     ;       //W_re = (double*)malloc(sizeof(double)*n/2); 
                       1638     ;       //W_im = (double*)malloc(sizeof(double)*n/2); 
                       1639     ;       //assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
                       1640     ;       
                       1641     ;       while(1)
                       1642                             ; SOURCE LINE # 203
                       1643     ;       {
                       1644                             ; SOURCE LINE # 204
                       1645     ;       //for (i=0; i<3; i++) {
                       1646     ;               //init_array(n, A_re, A_im); 
                       1647     ;               n = 8;
                       1648                             ; SOURCE LINE # 207
000045 7800       F    1649             MOV     R0,#LOW (n?576)
000047 7600            1650             MOV     @R0,#00H
000049 08              1651             INC     R0
00004A 7608            1652             MOV     @R0,#08H
                       1653     ;               blink_led();
                       1654                             ; SOURCE LINE # 208
00004C 638020          1655             XRL     P0,#020H
                       1656     ; 
                       1657     ;               compute_W(n, W_re, W_im); 
                       1658                             ; SOURCE LINE # 210
00004F 18              1659             DEC     R0
000050 E6              1660             MOV     A,@R0
000051 FE              1661             MOV     R6,A
000052 08              1662             INC     R0
000053 E6              1663             MOV     A,@R0
000054 FF              1664             MOV     R7,A
                       1665             
000055 7800       E    1666             MOV R0,#LOW (ECO_PAGE_REGISTER6)
000057 EE              1667         MOV A,R6 
000058 F6              1668         MOV @R0,A
000059 7800       E    1669         MOV R0,#LOW (ECO_PAGE_REGISTER7)
00005B EF              1670         MOV A,R7 
00005C F6              1671         MOV @R0,A
                       1672     
00005D 750000     F    1673             MOV     ?_compute_W?BYTE+05H,#00H
000060 750000     F    1674             MOV     ?_compute_W?BYTE+06H,#HIGH (W_im?580)
000063 750000     F    1675             MOV     ?_compute_W?BYTE+07H,#LOW (W_im?580)
                       1676             ;MOV    R3,#00H
                       1677             ;MOV    R2,#HIGH (W_re?579)
                       1678             ;MOV    R1,#LOW (W_re?579)
000066 7800       E    1679             MOV R0,#LOW (ECO_PAGE_REGISTER3)
000068 7600            1680         MOV @R0,#00H
                       1681     
00006A 7800       E    1682         MOV R0,#LOW (ECO_PAGE_REGISTER2)
00006C 7600       F    1683         MOV @R0,#HIGH (W_re?579)
                       1684     
00006E 7800       E    1685         MOV R0,#LOW (ECO_PAGE_REGISTER1)
000070 7600       F    1686         MOV @R0,#LOW (W_re?579)
                       1687     
                       1688             ;LCALL  _compute_W
000072 85B300     E    1689         MOV ECO_PAGE_SPI_CONN,SPI_CTRL
000075 750000     F    1690         MOV ECO_PAGE_ADDR,#HIGH (_compute_W)
000078 750000     F    1691         MOV ECO_PAGE_ADDR+01H,#LOW (_compute_W)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    27

00007B 120000     E    1692         LCALL   eco_page_manager
                       1693     
                       1694     
                       1695     ;               fft(n, A_re, A_im, W_re, W_im);
                       1696                             ; SOURCE LINE # 211
00007E 7800       F    1697             MOV     R0,#LOW (n?576)
000080 E6              1698             MOV     A,@R0
000081 FE              1699             MOV     R6,A
000082 08              1700             INC     R0
000083 E6              1701             MOV     A,@R0
000084 FF              1702             MOV     R7,A
                       1703             
000085 7800       E    1704             MOV R0,#LOW (ECO_PAGE_REGISTER6)
000087 EE              1705         MOV A,R6 
000088 F6              1706         MOV @R0,A
000089 7800       E    1707         MOV R0,#LOW (ECO_PAGE_REGISTER7)
00008B EF              1708         MOV A,R7 
00008C F6              1709         MOV @R0,A
                       1710     
00008D 750000     F    1711             MOV     ?_fft?BYTE+05H,#00H
000090 750000     F    1712             MOV     ?_fft?BYTE+06H,#HIGH (A_im?578)
000093 750000     F    1713             MOV     ?_fft?BYTE+07H,#LOW (A_im?578)
000096 750000     F    1714             MOV     ?_fft?BYTE+08H,#00H
000099 750000     F    1715             MOV     ?_fft?BYTE+09H,#HIGH (W_re?579)
00009C 750000     F    1716             MOV     ?_fft?BYTE+0AH,#LOW (W_re?579)
00009F 750000     F    1717             MOV     ?_fft?BYTE+0BH,#00H
0000A2 750000     F    1718             MOV     ?_fft?BYTE+0CH,#HIGH (W_im?580)
0000A5 750000     F    1719             MOV     ?_fft?BYTE+0DH,#LOW (W_im?580)
                       1720             ;MOV    R3,#00H
                       1721             ;MOV    R2,#HIGH (A_re?577)
                       1722             ;MOV    R1,#LOW (A_re?577)
0000A8 7800       E    1723             MOV R0,#LOW (ECO_PAGE_REGISTER3)
0000AA 7600            1724         MOV @R0,#00H
                       1725     
0000AC 7800       E    1726         MOV R0,#LOW (ECO_PAGE_REGISTER2)
0000AE 7600       F    1727         MOV @R0,#HIGH (A_re?577)
                       1728     
0000B0 7800       E    1729         MOV R0,#LOW (ECO_PAGE_REGISTER1)
0000B2 7600       F    1730         MOV @R0,#LOW (A_re?577)
                       1731             ;LCALL  _fft
0000B4 85B300     E    1732             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000B7 750000     F    1733         MOV ECO_PAGE_ADDR,#HIGH (_fft)
0000BA 750000     F    1734         MOV ECO_PAGE_ADDR+01H,#LOW (_fft)
0000BD 120000     E    1735         LCALL   eco_page_manager
                       1736     
                       1737     ;               permute_bitrev(n, A_re, A_im);
                       1738                             ; SOURCE LINE # 212
0000C0 7800       F    1739             MOV     R0,#LOW (n?576)
0000C2 E6              1740             MOV     A,@R0
0000C3 FE              1741             MOV     R6,A
0000C4 08              1742             INC     R0
0000C5 E6              1743             MOV     A,@R0
0000C6 FF              1744             MOV     R7,A
                       1745             
0000C7 7800       E    1746             MOV R0,#LOW (ECO_PAGE_REGISTER6)
0000C9 EE              1747         MOV A,R6
0000CA F6              1748         MOV @R0,A
0000CB 7800       E    1749         MOV R0,#LOW (ECO_PAGE_REGISTER7)
0000CD EF              1750         MOV A,R7
0000CE F6              1751         MOV @R0,A
                       1752     
0000CF 750000     F    1753             MOV     ?_permute_bitrev?BYTE+05H,#00H
0000D2 750000     F    1754             MOV     ?_permute_bitrev?BYTE+06H,#HIGH (A_im?578)
0000D5 750000     F    1755             MOV     ?_permute_bitrev?BYTE+07H,#LOW (A_im?578)
                       1756             ;MOV    R3,#00H
                       1757             ;MOV    R2,#HIGH (A_re?577)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    28

                       1758             ;MOV    R1,#LOW (A_re?577)
0000D8 7800       E    1759             MOV R0,#LOW (ECO_PAGE_REGISTER3)
0000DA 7600            1760         MOV @R0,#00H
                       1761     
0000DC 7800       E    1762         MOV R0,#LOW (ECO_PAGE_REGISTER2)
0000DE 7600       F    1763         MOV @R0,#HIGH (A_re?577)
                       1764     
0000E0 7800       E    1765         MOV R0,#LOW (ECO_PAGE_REGISTER1)
0000E2 7600       F    1766         MOV @R0,#LOW (A_re?577)
                       1767     
                       1768             ;LCALL  _permute_bitrev
0000E4 85B300     E    1769             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000E7 750000     F    1770         MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev)
0000EA 750000     F    1771         MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev)
0000ED 120000     E    1772         LCALL   eco_page_manager
                       1773     ; 
                       1774     ;               mdelay(100);
                       1775                             ; SOURCE LINE # 214
0000F0 7F64            1776             MOV     R7,#064H
0000F2 7E00            1777             MOV     R6,#00H
0000F4 120000     E    1778             LCALL   _mdelay
                       1779     ;               test_counter++;
                       1780                             ; SOURCE LINE # 215
0000F7 0500       F    1781             INC     test_counter+01H
0000F9 E500       F    1782             MOV     A,test_counter+01H
0000FB 7002            1783             JNZ     ?C0041
0000FD 0500       F    1784             INC     test_counter
0000FF                 1785     ?C0041:
                       1786     ;               int_print(test_counter);        
                       1787                             ; SOURCE LINE # 216
0000FF AE00       F    1788             MOV     R6,test_counter
000101 AF00       F    1789             MOV     R7,test_counter+01H
000103 120000     E    1790             LCALL   _?int_print
                       1791     ;       //}
                       1792     ;       }
                       1793                             ; SOURCE LINE # 218
000106 020000     F    1794             LJMP    ?C0031
                       1795     ; END OF main
                       1796     
                       1797             END
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    29

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?_BITREV?BYTE . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
?_COMPUTE_W?BYTE. . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
?_FFT?BYTE. . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
?_PERMUTE_BITREV?BYTE . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
?C0001. . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?_BITREV?MAIN
?C0002. . . . . . . . . . . . . . . . .    C  ADDR  004DH     R   SEG=?PR?_BITREV?MAIN
?C0004. . . . . . . . . . . . . . . . .    C  ADDR  0054H     R   SEG=?PR?_BITREV?MAIN
?C0005. . . . . . . . . . . . . . . . .    C  ADDR  0006H     R   SEG=?PR?_LOG_2?MAIN
?C0006. . . . . . . . . . . . . . . . .    C  ADDR  0023H     R   SEG=?PR?_LOG_2?MAIN
?C0008. . . . . . . . . . . . . . . . .    C  ADDR  002AH     R   SEG=?PR?_LOG_2?MAIN
?C0009. . . . . . . . . . . . . . . . .    C  ADDR  0017H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0012. . . . . . . . . . . . . . . . .    C  ADDR  00ECH     R   SEG=?PR?_COMPUTE_W?MAIN
?C0013. . . . . . . . . . . . . . . . .    C  ADDR  001AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0015. . . . . . . . . . . . . . . . .    C  ADDR  00A0H     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0016. . . . . . . . . . . . . . . . .    C  ADDR  0072H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0017. . . . . . . . . . . . . . . . .    C  ADDR  00BAH     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0018. . . . . . . . . . . . . . . . .    C  ADDR  0011H     R   SEG=?PR?_FFT?MAIN
?C0020. . . . . . . . . . . . . . . . .    C  ADDR  00BCH     R   SEG=?PR?_FFT_3?MAIN
?C0021. . . . . . . . . . . . . . . . .    C  ADDR  0040H     R   SEG=?PR?_FFT?MAIN
?C0023. . . . . . . . . . . . . . . . .    C  ADDR  0094H     R   SEG=?PR?_FFT_3?MAIN
?C0024. . . . . . . . . . . . . . . . .    C  ADDR  009AH     R   SEG=?PR?_FFT?MAIN
?C0027. . . . . . . . . . . . . . . . .    C  ADDR  00D3H     R   SEG=?PR?_FFT_3?MAIN
?C0028. . . . . . . . . . . . . . . . .    C  ADDR  0025H     R   SEG=?PR?MAIN?MAIN
?C0031. . . . . . . . . . . . . . . . .    C  ADDR  0045H     R   SEG=?PR?MAIN?MAIN
?C0034. . . . . . . . . . . . . . . . .    C  ADDR  004BH     R   SEG=?PR?_BITREV?MAIN
?C0035. . . . . . . . . . . . . . . . .    C  ADDR  0021H     R   SEG=?PR?_LOG_2?MAIN
?C0036. . . . . . . . . . . . . . . . .    C  ADDR  00E3H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0037. . . . . . . . . . . . . . . . .    C  ADDR  00B1H     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0038. . . . . . . . . . . . . . . . .    C  ADDR  008BH     R   SEG=?PR?_FFT_3?MAIN
?C0039. . . . . . . . . . . . . . . . .    C  ADDR  00B3H     R   SEG=?PR?_FFT_3?MAIN
?C0040. . . . . . . . . . . . . . . . .    C  ADDR  0037H     R   SEG=?PR?MAIN?MAIN
?C0041. . . . . . . . . . . . . . . . .    C  ADDR  00FFH     R   SEG=?PR?MAIN?MAIN
?C?CASTF. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?FCASTI . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDOPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IMUL . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTOPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?SIDIV. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C_STARTUP. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?DT?_BITREV?MAIN. . . . . . . . . . . .    D  SEG   000002H       REL=UNIT, ALN=BYTE
?DT?_COMPUTE_W?MAIN . . . . . . . . . .    D  SEG   00000AH       REL=UNIT, ALN=BYTE
?DT?_FFT?MAIN . . . . . . . . . . . . .    D  SEG   00000EH       REL=UNIT, ALN=BYTE
?DT?_PERMUTE_BITREV?MAIN. . . . . . . .    D  SEG   000008H       REL=UNIT, ALN=BYTE
?DT?MAIN. . . . . . . . . . . . . . . .    D  SEG   000002H       REL=UNIT, ALN=BYTE
?ID?_BITREV?MAIN. . . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_COMPUTE_W?MAIN . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_FFT?MAIN . . . . . . . . . . . . .    I  SEG   000016H       REL=UNIT, ALN=BYTE
?ID?_LOG_2?MAIN . . . . . . . . . . . .    I  SEG   000002H       REL=UNIT, ALN=BYTE
?ID?_PERMUTE_BITREV?MAIN. . . . . . . .    I  SEG   00000AH       REL=UNIT, ALN=BYTE
?ID?MAIN?MAIN . . . . . . . . . . . . .    I  SEG   000032H       REL=UNIT, ALN=BYTE
?PR?_BITREV?MAIN. . . . . . . . . . . .    C  SEG   000055H       REL=UNIT, ALN=BYTE
?PR?_COMPUTE_W?MAIN . . . . . . . . . .    C  SEG   0000EDH       REL=UNIT, ALN=BYTE
?PR?_FFT?MAIN . . . . . . . . . . . . .    C  SEG   0000EFH       REL=UNIT, ALN=BYTE
?PR?_FFT_2?MAIN . . . . . . . . . . . .    C  SEG   0000F7H       REL=UNIT, ALN=BYTE
?PR?_FFT_3?MAIN . . . . . . . . . . . .    C  SEG   0000D4H       REL=UNIT, ALN=BYTE
?PR?_LOG_2?MAIN . . . . . . . . . . . .    C  SEG   00002BH       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV?MAIN. . . . . . . .    C  SEG   000098H       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV_2?MAIN. . . . . . .    C  SEG   0000BBH       REL=UNIT, ALN=BYTE
?PR?MAIN?MAIN . . . . . . . . . . . . .    C  SEG   000109H       REL=UNIT, ALN=BYTE
_?INT_PRINT . . . . . . . . . . . . . .    C  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    30

_BITREV . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_BITREV?MAIN
_COMPUTE_W. . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_COMPUTE_W?MAIN
_COS. . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_FFT. . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT?MAIN
_FFT_2. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT_2?MAIN
_FFT_3. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT_3?MAIN
_LOG_2. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_LOG_2?MAIN
_MDELAY . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_PERMUTE_BITREV . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
_PERMUTE_BITREV_2 . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
_SERIAL_INIT. . . . . . . . . . . . . .    C  ADDR  -------       EXT
_SIN. . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_STORE_CPU_RATE . . . . . . . . . . . .    C  ADDR  -------       EXT
A_IM?354. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_IM?462. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_FFT?MAIN
A_IM?578. . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?MAIN?MAIN
A_RE?353. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_RE?461. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_FFT?MAIN
A_RE?577. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?MAIN?MAIN
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ADCCON. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
ADCDATAH. . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
ADCDATAL. . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
ADCSTATIC . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR6 . . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7 . . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
B?473 . . . . . . . . . . . . . . . . .    I  ADDR  0010H     R   SEG=?ID?_FFT?MAIN
BR?250. . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_COMPUTE_W?MAIN
BRI?356 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
C_T2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CE. . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
CK_CTRL . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CLK1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
CLK2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
CP_RL2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CS. . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DATA? . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
DEV_OFFSET. . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
DIN0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
DIO0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
DIO1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
DIO2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
DIO3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
DIO4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
DIO5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
DIO6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
DIO7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
DIO8. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
DIO9. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
DOUT2 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DR1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    31

DR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
DR2_CE. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
ECO_PAGE_ADDR . . . . . . . . . . . . .    D  ADDR  -------       EXT
ECO_PAGE_MANAGER. . . . . . . . . . . .    C  ADDR  -------       EXT
ECO_PAGE_REGISTER1. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER2. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER3. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER4. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER5. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER6. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER7. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_SPI_CONN . . . . . . . . . . .    D  ADDR  -------       EXT
EICON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
ES. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EX2 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EX3 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EX4 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EX5 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
EXIF. . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
G?472 . . . . . . . . . . . . . . . . .    I  ADDR  000EH     R   SEG=?ID?_FFT?MAIN
I?042 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_BITREV?MAIN
I?249 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_COMPUTE_W?MAIN
I?355 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0_N. . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
INT1_N. . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
K?475 . . . . . . . . . . . . . . . . .    I  ADDR  0014H     R   SEG=?ID?_FFT?MAIN
LOG2N?251 . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_COMPUTE_W?MAIN
LOG2N?357 . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
M?471 . . . . . . . . . . . . . . . . .    I  ADDR  000CH     R   SEG=?ID?_FFT?MAIN
MAIN. . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?MAIN?MAIN
MPAGE . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
MT?474. . . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?_FFT?MAIN
N?246 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
N?352 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
N?460 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
N?576 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?MAIN?MAIN
NUMBITS?041 . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    32

P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P0_ALT. . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
P0_DIR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_ALT. . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
P1_DIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PS. . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PWM . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
PWMCON. . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
PWMDUTY . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
PWR_UP. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
PX2 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PX3 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PX4 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PX5 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
RADIO . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
RB8 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RCAP2H. . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RCAP2L. . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
REGX_CTRL . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
REGX_LSB. . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
REGX_MSB. . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
REN . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
RES?145 . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_LOG_2?MAIN
REV?043 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_BITREV?MAIN
RI. . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RSTREAS . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
SBUF. . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SCON. . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SM0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM1 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM2 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPC_FNC . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
SPI_CTRL. . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
SPI_DATA. . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
SPICLK. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
T1_1V2. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
T2. . . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
T2_1V2. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T_IM?359. . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_IM?470. . . . . . . . . . . . . . . .    I  ADDR  000AH     R   SEG=?ID?_FFT?MAIN
T_RE?358. . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_RE?469. . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_FFT?MAIN
TB8 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TEST_COUNTER. . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?MAIN
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 15:40:28 PAGE    33

TEST_MODE . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI. . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TICK_DV . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
U_IM?468. . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_FFT?MAIN
U_RE?467. . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_FFT?MAIN
W_IM?248. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_COMPUTE_W?MAIN
W_IM?464. . . . . . . . . . . . . . . .    D  ADDR  000BH     R   SEG=?DT?_FFT?MAIN
W_IM?466. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_FFT?MAIN
W_IM?580. . . . . . . . . . . . . . . .    I  ADDR  002AH     R   SEG=?ID?MAIN?MAIN
W_RE?247. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_COMPUTE_W?MAIN
W_RE?463. . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_FFT?MAIN
W_RE?465. . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_FFT?MAIN
W_RE?579. . . . . . . . . . . . . . . .    I  ADDR  0022H     R   SEG=?ID?MAIN?MAIN
WDTI. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     1


MACRO ASSEMBLER AX51 V3.06a
OBJECT MODULE PLACED IN .\main.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.exe .\main.src EP DEBUG SYMBOLS OJ(.\main.obj) PR(.\main.ls1) 

LOC    OBJ             LINE     SOURCE

                          1     ; ./main.src generated from: .\main.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT
                                ROM(LARGE) INCDIR(../../Include) SRC(./main.src)
                          4     
                          5     $nomod51 
                          6     
                          7     NAME    MAIN
                          8     
 00A0.7                   9     PWR_UP  BIT     0A0H.7
 0080                    10     P0      DATA    080H
 0090                    11     P1      DATA    090H
 00D0.6                  12     AC      BIT     0D0H.6
 0080.5                  13     T0      BIT     080H.5
 00B3                    14     SPI_CTRL        DATA    0B3H
 0080.6                  15     T1      BIT     080H.6
 00A8.7                  16     EA      BIT     0A8H.7
 0090.0                  17     T2      BIT     090H.0
 00A0.6                  18     CE      BIT     0A0H.6
 00BE                    19     DEV_OFFSET      DATA    0BEH
 00A0.1                  20     CLK1    BIT     0A0H.1
 0090.2                  21     DIN0    BIT     090H.2
 00A0.5                  22     CLK2    BIT     0A0H.5
 0090.0                  23     DIO0    BIT     090H.0
 0083                    24     DPH0    DATA    083H
 0090.1                  25     DIO1    BIT     090H.1
 00A8                    26     IE      DATA    0A8H
 0085                    27     DPH1    DATA    085H
 0080.0                  28     DIO2    BIT     080H.0
 0080.1                  29     DIO3    BIT     080H.1
 0080.0                  30     P0_0    BIT     080H.0
 0090.0                  31     P1_0    BIT     090H.0
 0080.2                  32     DIO4    BIT     080H.2
 0080.1                  33     P0_1    BIT     080H.1
 0082                    34     DPL0    DATA    082H
 0090.1                  35     P1_1    BIT     090H.1
 0080.3                  36     DIO5    BIT     080H.3
 0080.2                  37     P0_2    BIT     080H.2
 0084                    38     DPL1    DATA    084H
 0090.2                  39     P1_2    BIT     090H.2
 0080.4                  40     DIO6    BIT     080H.4
 0080.3                  41     P0_3    BIT     080H.3
 0080.5                  42     DIO7    BIT     080H.5
 0080.4                  43     P0_4    BIT     080H.4
 00A4                    44     ADCSTATIC       DATA    0A4H
 0080.6                  45     DIO8    BIT     080H.6
 0080.5                  46     P0_5    BIT     080H.5
 00C8.6                  47     EXF2    BIT     0C8H.6
 00A0.3                  48     CS      BIT     0A0H.3
 0080.7                  49     DIO9    BIT     080H.7
 0080.6                  50     P0_6    BIT     080H.6
 0080.7                  51     P0_7    BIT     080H.7
 00A8.4                  52     ES      BIT     0A8H.4
 00B8                    53     IP      DATA    0B8H
 00A0.0                  54     DATA?   BIT     0A0H.0
 0098.0                  55     RI      BIT     098H.0
 00D0.7                  56     CY      BIT     0D0H.7
 0098.1                  57     TI      BIT     098H.1
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     2

 00BC                    58     T1_1V2  DATA    0BCH
 008F                    59     SPC_FNC DATA    08FH
 00BD                    60     T2_1V2  DATA    0BDH
 00CB                    61     RCAP2H  DATA    0CBH
 00B8.4                  62     PS      BIT     0B8H.4
 0081                    63     SP      DATA    081H
 00D0.2                  64     OV      BIT     0D0H.2
 00B6                    65     CK_CTRL DATA    0B6H
 00CA                    66     RCAP2L  DATA    0CAH
 00B5                    67     TICK_DV DATA    0B5H
 00B1                    68     RSTREAS DATA    0B1H
 00C8.1                  69     C_T2    BIT     0C8H.1
 00E8.4                  70     EWDI    BIT     0E8H.4
 00A1                    71     ADCCON  DATA    0A1H
 00C8.5                  72     RCLK    BIT     0C8H.5
 00A2                    73     ADCDATAH        DATA    0A2H
 0091                    74     EXIF    DATA    091H
 00C8.4                  75     TCLK    BIT     0C8H.4
 00A0.6                  76     DR2_CE  BIT     0A0H.6
 00A3                    77     ADCDATAL        DATA    0A3H
 0099                    78     SBUF    DATA    099H
 0087                    79     PCON    DATA    087H
 0098                    80     SCON    DATA    098H
 00F8.4                  81     PWDI    BIT     0F8H.4
 0089                    82     TMOD    DATA    089H
 0088                    83     TCON    DATA    088H
 00D8.3                  84     WDTI    BIT     0D8H.3
 00AA                    85     PWMDUTY DATA    0AAH
 0088.1                  86     IE0     BIT     088H.1
 0088.3                  87     IE1     BIT     088H.3
 0094                    88     P0_DIR  DATA    094H
 00F0                    89     B       DATA    0F0H
 0096                    90     P1_DIR  DATA    096H
 0095                    91     P0_ALT  DATA    095H
 0097                    92     P1_ALT  DATA    097H
 00C8.0                  93     CP_RL2  BIT     0C8H.0
 00A0.2                  94     DR1     BIT     0A0H.2
 00E0                    95     ACC     DATA    0E0H
 00A0.6                  96     DR2     BIT     0A0H.6
 00B7                    97     TEST_MODE       DATA    0B7H
 00B4                    98     SPICLK  DATA    0B4H
 00C8.1                  99     CT2     BIT     0C8H.1
 00A8.1                 100     ET0     BIT     0A8H.1
 00A8.3                 101     ET1     BIT     0A8H.3
 0088.5                 102     TF0     BIT     088H.5
 0080.3                 103     INT0_N  BIT     080H.3
 00A8.5                 104     ET2     BIT     0A8H.5
 0088.7                 105     TF1     BIT     088H.7
 0080.4                 106     INT1_N  BIT     080H.4
 00C8.7                 107     TF2     BIT     0C8H.7
 0098.2                 108     RB8     BIT     098H.2
 008C                   109     TH0     DATA    08CH
 00A8.0                 110     EX0     BIT     0A8H.0
 0088.0                 111     IT0     BIT     088H.0
 008D                   112     TH1     DATA    08DH
 00A8.2                 113     EX1     BIT     0A8H.2
 0098.3                 114     TB8     BIT     098H.3
 0088.2                 115     IT1     BIT     088H.2
 00CD                   116     TH2     DATA    0CDH
 00AD                   117     REGX_CTRL       DATA    0ADH
 00E8.0                 118     EX2     BIT     0E8H.0
 00D0.0                 119     P       BIT     0D0H.0
 00E8.1                 120     EX3     BIT     0E8H.1
 0098.7                 121     SM0     BIT     098H.7
 008A                   122     TL0     DATA    08AH
 00E8.2                 123     EX4     BIT     0E8H.2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     3

 0098.6                 124     SM1     BIT     098H.6
 008B                   125     TL1     DATA    08BH
 00E8.3                 126     EX5     BIT     0E8H.3
 0098.5                 127     SM2     BIT     098H.5
 00CC                   128     TL2     DATA    0CCH
 00E8                   129     EIE     DATA    0E8H
 00B8.1                 130     PT0     BIT     0B8H.1
 00D0.3                 131     RS0     BIT     0D0H.3
 00B8.3                 132     PT1     BIT     0B8H.3
 00D0.4                 133     RS1     BIT     0D0H.4
 00B8.5                 134     PT2     BIT     0B8H.5
 0088.4                 135     TR0     BIT     088H.4
 00A9                   136     PWMCON  DATA    0A9H
 0088.6                 137     TR1     BIT     088H.6
 00C8.2                 138     TR2     BIT     0C8H.2
 00B8.0                 139     PX0     BIT     0B8H.0
 00B8.2                 140     PX1     BIT     0B8H.2
 00F8.0                 141     PX2     BIT     0F8H.0
 00F8.1                 142     PX3     BIT     0F8H.1
 00F8.2                 143     PX4     BIT     0F8H.2
 0083                   144     DPH     DATA    083H
 00F8.3                 145     PX5     BIT     0F8H.3
 00F8                   146     EIP     DATA    0F8H
 0082                   147     DPL     DATA    082H
 00C8.3                 148     EXEN2   BIT     0C8H.3
 00C8.0                 149     CPRL2   BIT     0C8H.0
 0098.4                 150     REN     BIT     098H.4
 00C8                   151     T2CON   DATA    0C8H
 0086                   152     DPS     DATA    086H
 00B2                   153     SPI_DATA        DATA    0B2H
 0092                   154     MPAGE   DATA    092H
 0080.1                 155     RXD     BIT     080H.1
 00A0.4                 156     DOUT2   BIT     0A0H.4
 00D8                   157     EICON   DATA    0D8H
 008E                   158     CKCON   DATA    08EH
 0080.2                 159     TXD     BIT     080H.2
 00A0                   160     RADIO   DATA    0A0H
 0080.7                 161     PWM     BIT     080H.7
 00D0.5                 162     F0      BIT     0D0H.5
 00D0.1                 163     F1      BIT     0D0H.1
 00AC                   164     REGX_LSB        DATA    0ACH
 00D0                   165     PSW     DATA    0D0H
 00AB                   166     REGX_MSB        DATA    0ABH
------                  167     ?PR?_bitrev?MAIN     SEGMENT CODE 
------                  168     ?DT?_bitrev?MAIN     SEGMENT DATA OVERLAYABLE 
------                  169     ?PR?_log_2?MAIN      SEGMENT CODE 
------                  170     ?PR?_compute_W?MAIN  SEGMENT CODE 
------                  171     ?DT?_compute_W?MAIN  SEGMENT DATA OVERLAYABLE 
------                  172     ?PR?_permute_bitrev?MAIN                 SEGMENT CODE 
------                  173     ?DT?_permute_bitrev?MAIN                 SEGMENT DATA OVERLAYABLE 
------                  174     ?PR?_permute_bitrev_2?MAIN                 SEGMENT CODE 
------                  175     ?PR?_fft?MAIN        SEGMENT CODE 
------                  176     ?DT?_fft?MAIN        SEGMENT DATA OVERLAYABLE 
------                  177     ?PR?_fft_2?MAIN        SEGMENT CODE 
------                  178     ?PR?_fft_3?MAIN        SEGMENT CODE 
------                  179     ?PR?main?MAIN        SEGMENT CODE 
------                  180     ?ID?_bitrev?MAIN     SEGMENT IDATA OVERLAYABLE 
------                  181     ?ID?_log_2?MAIN      SEGMENT IDATA OVERLAYABLE 
------                  182     ?ID?_compute_W?MAIN  SEGMENT IDATA OVERLAYABLE 
------                  183     ?ID?_permute_bitrev?MAIN                 SEGMENT IDATA OVERLAYABLE 
------                  184     ?ID?_fft?MAIN        SEGMENT IDATA OVERLAYABLE 
------                  185     ?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
                        186             EXTRN   CODE (_mdelay)
                        187             EXTRN   CODE (_cos)
                        188             EXTRN   CODE (_sin)
                        189             EXTRN   CODE (_store_cpu_rate)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     4

                        190             EXTRN   CODE (?C?SIDIV)
                        191             EXTRN   CODE (?C?IMUL)
                        192             EXTRN   CODE (?C?FCASTI)
                        193             EXTRN   CODE (?C?CASTF)
                        194             EXTRN   CODE (?C?ISTOPTR)
                        195             EXTRN   CODE (?C?ILDOPTR)
                        196             EXTRN   CODE (?C_STARTUP)
                        197     
                        198             EXTRN   CODE (eco_page_manager)
                        199         EXTRN   DATA (ECO_PAGE_ADDR)
                        200         EXTRN   DATA (ECO_PAGE_SPI_CONN)
                        201         EXTRN   IDATA (ECO_PAGE_REGISTER1)
                        202         EXTRN   IDATA (ECO_PAGE_REGISTER2)
                        203         EXTRN   IDATA (ECO_PAGE_REGISTER3)
                        204         EXTRN   IDATA (ECO_PAGE_REGISTER4)
                        205         EXTRN   IDATA (ECO_PAGE_REGISTER5)
                        206         EXTRN   IDATA (ECO_PAGE_REGISTER6)
                        207         EXTRN   IDATA (ECO_PAGE_REGISTER7)
                        208     
                        209             PUBLIC  main
                        210             PUBLIC  ?_fft?BYTE
                        211             PUBLIC  _fft
                        212             PUBLIC  _fft_2
                        213             PUBLIC  _fft_3
                        214             PUBLIC  ?_permute_bitrev?BYTE
                        215             PUBLIC  _permute_bitrev
                        216             PUBLIC  _permute_bitrev_2
                        217             PUBLIC  ?_compute_W?BYTE
                        218             PUBLIC  _compute_W
                        219             PUBLIC  _log_2
                        220             PUBLIC  _bitrev
                        221     
------                  222             RSEG  ?DT?_bitrev?MAIN
000000                  223     ?_bitrev?BYTE:
000000                  224         numbits?041:   DS   2
                        225     
------                  226             RSEG  ?DT?_compute_W?MAIN
000000                  227     ?_compute_W?BYTE:
000000                  228               n?246:   DS   2
000002                  229             ORG  2
000002                  230            W_re?247:   DS   3
000005                  231             ORG  5
000005                  232            W_im?248:   DS   3
000008                  233             ORG  8
000008                  234           log2n?251:   DS   2
                        235     
------                  236             RSEG  ?DT?_fft?MAIN
000000                  237     ?_fft?BYTE:
000000                  238               n?460:   DS   2
000002                  239             ORG  2
000002                  240            A_re?461:   DS   3
000005                  241             ORG  5
000005                  242            A_im?462:   DS   3
000008                  243             ORG  8
000008                  244            W_re?463:   DS   3
00000B                  245             ORG  11
00000B                  246            W_im?464:   DS   3
                        247     
------                  248             RSEG  ?DT?_permute_bitrev?MAIN
000000                  249     ?_permute_bitrev?BYTE:
000000                  250               n?352:   DS   2
000002                  251             ORG  2
000002                  252            A_re?353:   DS   3
000005                  253             ORG  5
000005                  254            A_im?354:   DS   3
                        255     
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     5

------                  256             RSEG  ?ID?_bitrev?MAIN
000000                  257               i?042:   DS   2
                        258     
------                  259             RSEG  ?ID?_bitrev?MAIN
000002                  260             rev?043:   DS   2
                        261     
------                  262             RSEG  ?ID?_log_2?MAIN
000000                  263             res?145:   DS   2
                        264     
------                  265             RSEG  ?ID?_compute_W?MAIN
000000                  266               i?249:   DS   2
                        267     
------                  268             RSEG  ?ID?_compute_W?MAIN
000002                  269              br?250:   DS   2
                        270     
------                  271             RSEG  ?ID?_permute_bitrev?MAIN
000000                  272               i?355:   DS   2
                        273     
------                  274             RSEG  ?ID?_permute_bitrev?MAIN
000002                  275             bri?356:   DS   2
                        276     
------                  277             RSEG  ?ID?_permute_bitrev?MAIN
000004                  278           log2n?357:   DS   2
                        279     
------                  280             RSEG  ?ID?_permute_bitrev?MAIN
000006                  281            t_re?358:   DS   2
                        282     
------                  283             RSEG  ?ID?_permute_bitrev?MAIN
000008                  284            t_im?359:   DS   2
                        285     
------                  286             RSEG  ?ID?_fft?MAIN
000000                  287            w_re?465:   DS   2
                        288     
------                  289             RSEG  ?ID?_fft?MAIN
000002                  290            w_im?466:   DS   2
                        291     
------                  292             RSEG  ?ID?_fft?MAIN
000004                  293            u_re?467:   DS   2
                        294     
------                  295             RSEG  ?ID?_fft?MAIN
000006                  296            u_im?468:   DS   2
                        297     
------                  298             RSEG  ?ID?_fft?MAIN
000008                  299            t_re?469:   DS   2
                        300     
------                  301             RSEG  ?ID?_fft?MAIN
00000A                  302            t_im?470:   DS   2
                        303     
------                  304             RSEG  ?ID?_fft?MAIN
00000C                  305               m?471:   DS   2
                        306     
------                  307             RSEG  ?ID?_fft?MAIN
00000E                  308               g?472:   DS   2
                        309     
------                  310             RSEG  ?ID?_fft?MAIN
000010                  311               b?473:   DS   2
                        312     
------                  313             RSEG  ?ID?_fft?MAIN
000012                  314              mt?474:   DS   2
                        315     
------                  316             RSEG  ?ID?_fft?MAIN
000014                  317               k?475:   DS   2
                        318     
------                  319             RSEG  ?ID?main?MAIN
000000                  320               n?576:   DS   2
                        321     
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     6

------                  322             RSEG  ?ID?main?MAIN
000002                  323            A_re?577:   DS   16
                        324     
------                  325             RSEG  ?ID?main?MAIN
000012                  326            A_im?578:   DS   16
                        327     
------                  328             RSEG  ?ID?main?MAIN
000022                  329            W_re?579:   DS   8
                        330     
------                  331             RSEG  ?ID?main?MAIN
00002A                  332            W_im?580:   DS   8
                        333     ; /* gets no. of points from the user, initialize the points and roots of unity lookup t
                               able 
                        334     ;  * and lets fft go. finally bit-reverses the results and outputs them into a file. 
                        335     ;  * n should be a power of 2. 
                        336     ;  */
                        337     ; #include "Eco/reg24e1.h"
                        338     ; #include "Eco/eco_sys.h"
                        339     ; #include "utils/utils.h"
                        340     ; #include "serial/serial.h"
                        341     ; #include "isr/isr_rf.h"
                        342     ; #include "eeprom/eeprom.h"
                        343     ; #include "eco_page.h"
                        344     ; #include "adc/adc.h"
                        345     ; 
                        346     ; #include <math.h>
                        347     ; 
                        348     ; /* treats inp as a numbits number and bitreverses it. 
                        349     ;  * inp < 2^(numbits) for meaningful bit-reversal
                        350     ;  */ 
                        351     ; int bitrev(int idata inp, int idata numbits)
                        352     
------                  353             RSEG  ?PR?_bitrev?MAIN
000000                  354     _bitrev:
                        355             USING   0
                        356                             ; SOURCE LINE # 19
000000 8C00       F     357             MOV     numbits?041,R4
000002 8D00       F     358             MOV     numbits?041+01H,R5
                        359     ;---- Variable 'inp?040' assigned to Register 'R2/R3' ----
000004 AB07             360             MOV     R3,AR7
000006 AA06             361             MOV     R2,AR6
                        362     ; {
                        363                             ; SOURCE LINE # 20
                        364     ;       int idata i;
                        365     ;       int idata rev=0;
                        366                             ; SOURCE LINE # 22
000008 E4               367             CLR     A
000009 7800       F     368             MOV     R0,#LOW (rev?043)
00000B F6               369             MOV     @R0,A
00000C 08               370             INC     R0
00000D F6               371             MOV     @R0,A
                        372     ;       for (i=0; i < numbits; i++)
                        373                             ; SOURCE LINE # 23
00000E 7800       F     374             MOV     R0,#LOW (i?042)
000010 F6               375             MOV     @R0,A
000011 08               376             INC     R0
000012 F6               377             MOV     @R0,A
000013                  378     ?C0001:
000013 C3               379             CLR     C
000014 7800       F     380             MOV     R0,#LOW (i?042+01H)
000016 E6               381             MOV     A,@R0
000017 9500       F     382             SUBB    A,numbits?041+01H
000019 E500       F     383             MOV     A,numbits?041
00001B 6480             384             XRL     A,#080H
00001D F5F0             385             MOV     B,A
00001F 18               386             DEC     R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     7

000020 E6               387             MOV     A,@R0
000021 6480             388             XRL     A,#080H
000023 95F0             389             SUBB    A,B
000025 5026             390             JNC     ?C0002
                        391     ;       {
                        392                             ; SOURCE LINE # 24
                        393     ;               rev = (rev << 1) | (inp & 1);
                        394                             ; SOURCE LINE # 25
000027 7800       F     395             MOV     R0,#LOW (rev?043+01H)
000029 E6               396             MOV     A,@R0
00002A 25E0             397             ADD     A,ACC
00002C FF               398             MOV     R7,A
00002D 18               399             DEC     R0
00002E E6               400             MOV     A,@R0
00002F 33               401             RLC     A
000030 FE               402             MOV     R6,A
000031 EB               403             MOV     A,R3
000032 5401             404             ANL     A,#01H
000034 FD               405             MOV     R5,A
000035 EE               406             MOV     A,R6
000036 F6               407             MOV     @R0,A
000037 EF               408             MOV     A,R7
000038 4D               409             ORL     A,R5
000039 08               410             INC     R0
00003A F6               411             MOV     @R0,A
                        412     ;               inp >>= 1;
                        413                             ; SOURCE LINE # 26
00003B EA               414             MOV     A,R2
00003C A2E7             415             MOV     C,ACC.7
00003E 13               416             RRC     A
00003F FA               417             MOV     R2,A
000040 EB               418             MOV     A,R3
000041 13               419             RRC     A
000042 FB               420             MOV     R3,A
                        421     ;       }
                        422                             ; SOURCE LINE # 27
000043 7800       F     423             MOV     R0,#LOW (i?042+01H)
000045 06               424             INC     @R0
000046 E6               425             MOV     A,@R0
000047 18               426             DEC     R0
000048 70C9             427             JNZ     ?C0001
00004A 06               428             INC     @R0
00004B                  429     ?C0034:
00004B 80C6             430             SJMP    ?C0001
00004D                  431     ?C0002:
                        432     ;       return rev;
                        433                             ; SOURCE LINE # 28
00004D 7800       F     434             MOV     R0,#LOW (rev?043)
00004F E6               435             MOV     A,@R0
000050 FE               436             MOV     R6,A
000051 08               437             INC     R0
000052 E6               438             MOV     A,@R0
000053 FF               439             MOV     R7,A
                        440     ; }
                        441                             ; SOURCE LINE # 29
000054                  442     ?C0004:
000054 22               443             RET     
                        444     ; END OF _bitrev
                        445     
                        446     ; 
                        447     ; 
                        448     ; /* returns log n (to the base 2), if n is positive and power of 2 */ 
                        449     ; int log_2(int idata n) 
                        450     
------                  451             RSEG  ?PR?_log_2?MAIN
000000                  452     _log_2:
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     8

                        453             USING   0
                        454                             ; SOURCE LINE # 33
                        455     ;---- Variable 'n?144' assigned to Register 'R6/R7' ----
                        456     ; {
                        457                             ; SOURCE LINE # 34
                        458     ;       int idata res; 
                        459     ;       for (res=0; n >= 2; res++) 
                        460                             ; SOURCE LINE # 36
000000 E4               461             CLR     A
000001 7800       F     462             MOV     R0,#LOW (res?145)
000003 F6               463             MOV     @R0,A
000004 08               464             INC     R0
000005 F6               465             MOV     @R0,A
000006                  466     ?C0005:
000006 C3               467             CLR     C
000007 EF               468             MOV     A,R7
000008 9402             469             SUBB    A,#02H
00000A EE               470             MOV     A,R6
00000B 6480             471             XRL     A,#080H
00000D 9480             472             SUBB    A,#080H
00000F 4012             473             JC      ?C0006
                        474     ;               n = n >> 1; 
                        475                             ; SOURCE LINE # 37
000011 EE               476             MOV     A,R6
000012 A2E7             477             MOV     C,ACC.7
000014 13               478             RRC     A
000015 FE               479             MOV     R6,A
000016 EF               480             MOV     A,R7
000017 13               481             RRC     A
000018 FF               482             MOV     R7,A
000019 7800       F     483             MOV     R0,#LOW (res?145+01H)
00001B 06               484             INC     @R0
00001C E6               485             MOV     A,@R0
00001D 18               486             DEC     R0
00001E 70E6             487             JNZ     ?C0005
000020 06               488             INC     @R0
000021                  489     ?C0035:
000021 80E3             490             SJMP    ?C0005
000023                  491     ?C0006:
                        492     ;       return res; 
                        493                             ; SOURCE LINE # 38
000023 7800       F     494             MOV     R0,#LOW (res?145)
000025 E6               495             MOV     A,@R0
000026 FE               496             MOV     R6,A
000027 08               497             INC     R0
000028 E6               498             MOV     A,@R0
000029 FF               499             MOV     R7,A
                        500     ; }
                        501                             ; SOURCE LINE # 39
00002A                  502     ?C0008:
00002A 22               503             RET     
                        504     ; END OF _log_2
                        505     
                        506     ; 
                        507     ; 
                        508     ; 
                        509     ; /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
                        510     ;  * n should be a power of 2
                        511     ;  * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
                        512     ;  *       see that function for more details on why we treat 'i' as a (log2n-1) bit num
                               ber.
                        513     ;  */
                        514     ; void compute_W(int idata n, int idata W_re[], int idata W_im[])
                        515     
------                  516             RSEG  ?PR?_compute_W?MAIN
000000                  517     _compute_W:
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE     9

                        518             USING   0
                        519                             ; SOURCE LINE # 48
000000 8E00       F     520             MOV     n?246,R6
000002 8F00       F     521             MOV     n?246+01H,R7
000004 8B00       F     522             MOV     W_re?247,R3
000006 8A00       F     523             MOV     W_re?247+01H,R2
000008 8900       F     524             MOV     W_re?247+02H,R1
                        525     ; {
                        526                             ; SOURCE LINE # 49
                        527     ;       int idata i;
                        528     ;       int idata br;
                        529     ;       int log2n = log_2(n);
                        530                             ; SOURCE LINE # 52
00000A 120000     F     531             LCALL   _log_2
00000D 8E00       F     532             MOV     log2n?251,R6
00000F 8F00       F     533             MOV     log2n?251+01H,R7
                        534     ; 
                        535     ;       for (i=0; i<(n/2); i++)
                        536                             ; SOURCE LINE # 54
000011 E4               537             CLR     A
000012 7800       F     538             MOV     R0,#LOW (i?249)
000014 F6               539             MOV     @R0,A
000015 08               540             INC     R0
000016 F6               541             MOV     @R0,A
000017                  542     ?C0009:
000017 AE00       F     543             MOV     R6,n?246
000019 AF00       F     544             MOV     R7,n?246+01H
00001B 7C00             545             MOV     R4,#00H
00001D 7D02             546             MOV     R5,#02H
00001F 120000     E     547             LCALL   ?C?SIDIV
000022 AC06             548             MOV     R4,AR6
000024 AD07             549             MOV     R5,AR7
000026 7800       F     550             MOV     R0,#LOW (i?249)
000028 E6               551             MOV     A,@R0
000029 FE               552             MOV     R6,A
00002A 08               553             INC     R0
00002B E6               554             MOV     A,@R0
00002C FF               555             MOV     R7,A
00002D C3               556             CLR     C
00002E 9D               557             SUBB    A,R5
00002F EC               558             MOV     A,R4
000030 6480             559             XRL     A,#080H
000032 F8               560             MOV     R0,A
000033 EE               561             MOV     A,R6
000034 6480             562             XRL     A,#080H
000036 98               563             SUBB    A,R0
000037 4003             564             JC      $ + 5H
000039 020000     F     565             LJMP    ?C0012
                        566     ;       {
                        567                             ; SOURCE LINE # 55
                        568     ;               br = bitrev(i,log2n-1); 
                        569                             ; SOURCE LINE # 56
00003C E500       F     570             MOV     A,log2n?251+01H
00003E 24FF             571             ADD     A,#0FFH
000040 FD               572             MOV     R5,A
000041 E500       F     573             MOV     A,log2n?251
000043 34FF             574             ADDC    A,#0FFH
000045 FC               575             MOV     R4,A
000046 120000     F     576             LCALL   _bitrev
000049 7800       F     577             MOV     R0,#LOW (br?250)
00004B A606             578             MOV     @R0,AR6
00004D 08               579             INC     R0
00004E A607             580             MOV     @R0,AR7
                        581     ;               W_re[br] = cos((i*2*3)/(n));  
                        582                             ; SOURCE LINE # 57
000050 7800       F     583             MOV     R0,#LOW (i?249)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    10

000052 E6               584             MOV     A,@R0
000053 FE               585             MOV     R6,A
000054 08               586             INC     R0
000055 E6               587             MOV     A,@R0
000056 FF               588             MOV     R7,A
000057 7C00             589             MOV     R4,#00H
000059 7D06             590             MOV     R5,#06H
00005B 120000     E     591             LCALL   ?C?IMUL
00005E AC00       F     592             MOV     R4,n?246
000060 AD00       F     593             MOV     R5,n?246+01H
000062 120000     E     594             LCALL   ?C?SIDIV
000065 AC06             595             MOV     R4,AR6
000067 AD07             596             MOV     R5,AR7
000069 EC               597             MOV     A,R4
00006A 120000     E     598             LCALL   ?C?FCASTI
00006D 120000     E     599             LCALL   _cos
000070 120000     E     600             LCALL   ?C?CASTF
000073 AD07             601             MOV     R5,AR7
000075 7800       F     602             MOV     R0,#LOW (br?250+01H)
000077 E6               603             MOV     A,@R0
000078 25E0             604             ADD     A,ACC
00007A FF               605             MOV     R7,A
00007B 18               606             DEC     R0
00007C E6               607             MOV     A,@R0
00007D 33               608             RLC     A
00007E AB00       F     609             MOV     R3,W_re?247
000080 AA00       F     610             MOV     R2,W_re?247+01H
000082 A900       F     611             MOV     R1,W_re?247+02H
000084 8F82             612             MOV     DPL,R7
000086 F583             613             MOV     DPH,A
000088 EE               614             MOV     A,R6
000089 8DF0             615             MOV     B,R5
00008B 120000     E     616             LCALL   ?C?ISTOPTR
                        617     ;               W_im[br] = sin((i*2*3)/(n));  
                        618                             ; SOURCE LINE # 58
00008E 7800       F     619             MOV     R0,#LOW (i?249)
000090 E6               620             MOV     A,@R0
000091 FE               621             MOV     R6,A
000092 08               622             INC     R0
000093 E6               623             MOV     A,@R0
000094 FF               624             MOV     R7,A
000095 7C00             625             MOV     R4,#00H
000097 7D06             626             MOV     R5,#06H
000099 120000     E     627             LCALL   ?C?IMUL
00009C AC00       F     628             MOV     R4,n?246
00009E AD00       F     629             MOV     R5,n?246+01H
0000A0 120000     E     630             LCALL   ?C?SIDIV
0000A3 AC06             631             MOV     R4,AR6
0000A5 AD07             632             MOV     R5,AR7
0000A7 EC               633             MOV     A,R4
0000A8 120000     E     634             LCALL   ?C?FCASTI
0000AB 120000     E     635             LCALL   _sin
0000AE 120000     E     636             LCALL   ?C?CASTF
0000B1 AD07             637             MOV     R5,AR7
0000B3 7800       F     638             MOV     R0,#LOW (br?250+01H)
0000B5 E6               639             MOV     A,@R0
0000B6 25E0             640             ADD     A,ACC
0000B8 FF               641             MOV     R7,A
0000B9 18               642             DEC     R0
0000BA E6               643             MOV     A,@R0
0000BB 33               644             RLC     A
0000BC AB00       F     645             MOV     R3,W_im?248
0000BE AA00       F     646             MOV     R2,W_im?248+01H
0000C0 A900       F     647             MOV     R1,W_im?248+02H
0000C2 8F82             648             MOV     DPL,R7
0000C4 F583             649             MOV     DPH,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    11

0000C6 EE               650             MOV     A,R6
0000C7 8DF0             651             MOV     B,R5
0000C9 120000     E     652             LCALL   ?C?ISTOPTR
                        653     ;       }
                        654                             ; SOURCE LINE # 59
0000CC 7800       F     655             MOV     R0,#LOW (i?249+01H)
0000CE 06               656             INC     @R0
0000CF E6               657             MOV     A,@R0
0000D0 18               658             DEC     R0
0000D1 6003             659             JZ      $ + 5H
0000D3 020000     F     660             LJMP    ?C0009
0000D6 06               661             INC     @R0
0000D7                  662     ?C0036:
0000D7 020000     F     663             LJMP    ?C0009
                        664     ; //#ifdef COMMENT_ONLY 
                        665     ; //    for (i=0;i<(n/2);i++)
                        666     ; //    { 
                        667     ; //            br = i; //bitrev(i,log2n-1); 
                        668     ; //            printf("(%g\t%g)\n", W_re[br], W_im[br]);
                        669     ; //    }  
                        670     ; //#endif 
                        671     ; }
                        672                             ; SOURCE LINE # 67
0000DA                  673     ?C0012:
0000DA 22               674             RET     
                        675     ; END OF _compute_W
                        676     
                        677     ; 
                        678     ; 
                        679     ; /* permutes the array using a bit-reversal permutation */ 
                        680     ; void permute_bitrev(int n, int *A_re, int *A_im) 
                        681     
------                  682             RSEG  ?PR?_permute_bitrev?MAIN
000000                  683     _permute_bitrev:
                        684             USING   0
                        685                             ; SOURCE LINE # 71
000000 8E00       F     686             MOV     n?352,R6
000002 8F00       F     687             MOV     n?352+01H,R7
000004 8B00       F     688             MOV     A_re?353,R3
000006 8A00       F     689             MOV     A_re?353+01H,R2
000008 8900       F     690             MOV     A_re?353+02H,R1
                        691     ; { 
                        692                             ; SOURCE LINE # 72
                        693     ;       int idata i;
                        694     ;       int idata bri;
                        695     ;       int idata log2n;
                        696     ;       int idata t_re;
                        697     ;       int idata t_im;
                        698     ; 
                        699     ;       log2n = log_2(n); 
                        700                             ; SOURCE LINE # 79
00000A 120000     F     701             LCALL   _log_2
00000D 7800       F     702             MOV     R0,#LOW (log2n?357)
00000F A606             703             MOV     @R0,AR6
000011 08               704             INC     R0
000012 A607             705             MOV     @R0,AR7
                        706     ; 
                        707     ;       for (i=0; i<n; i++)
                        708                             ; SOURCE LINE # 81
000014 E4               709             CLR     A
000015 7800       F     710             MOV     R0,#LOW (i?355)
000017 F6               711             MOV     @R0,A
000018 08               712             INC     R0
000019 F6               713             MOV     @R0,A
00001A                  714     ?C0013:
00001A 7800       F     715             MOV     R0,#LOW (i?355)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    12

00001C E6               716             MOV     A,@R0
00001D FE               717             MOV     R6,A
00001E 08               718             INC     R0
00001F E6               719             MOV     A,@R0
000020 FF               720             MOV     R7,A
000021 C3               721             CLR     C
000022 9500       F     722             SUBB    A,n?352+01H
000024 E500       F     723             MOV     A,n?352
000026 6480             724             XRL     A,#080H
000028 F8               725             MOV     R0,A
000029 EE               726             MOV     A,R6
00002A 6480             727             XRL     A,#080H
00002C 98               728             SUBB    A,R0
00002D 4009             729             JC      $ + 0BH
00002F 750000     F     730             MOV ECO_PAGE_ADDR,#HIGH (?C0017)
000032 750000     F     731         MOV ECO_PAGE_ADDR+01H,#LOW (?C0017)
000035 020000     E     732         LJMP   eco_page_manager
                        733             ;LJMP   ?C0017
                        734     ;       {
                        735                             ; SOURCE LINE # 82
                        736     ;               bri  = bitrev(i, log2n);
                        737                             ; SOURCE LINE # 83
000038 7800       F     738             MOV     R0,#LOW (log2n?357)
00003A E6               739             MOV     A,@R0
                        740             ;MOV    R4,A
00003B 7800       E     741             MOV R0,#LOW (ECO_PAGE_REGISTER4)
00003D F6               742         MOV @R0,A
00003E 08               743             INC     R0
00003F E6               744             MOV     A,@R0
                        745             ;MOV    R5,A
000040 7800       E     746             MOV R0,#LOW (ECO_PAGE_REGISTER5)
000042 F6               747         MOV @R0,A
                        748             ;LCALL  _bitrev
                        749     
000043 750000     F     750             MOV ECO_PAGE_ADDR,#HIGH (?C0017)
000046 750000     F     751         MOV ECO_PAGE_ADDR+01H,#LOW (?C0017)
000049 120000     E     752         LCALL   eco_page_manager
                        753     
00004C 7800       F     754             MOV     R0,#LOW (bri?356)
00004E EE               755             MOV     A,R6
00004F F6               756             MOV     @R0,A
000050 08               757             INC     R0
000051 EF               758             MOV     A,R7
000052 F6               759             MOV     @R0,A
                        760     ; 
                        761     ;               /* skip already swapped elements */
                        762     ;               if (bri <= i) continue;
                        763                             ; SOURCE LINE # 86
000053 7800       F     764             MOV     R0,#LOW (i?355)
000055 E6               765             MOV     A,@R0
000056 FC               766             MOV     R4,A
000057 08               767             INC     R0
000058 E6               768             MOV     A,@R0
000059 FD               769             MOV     R5,A
00005A D3               770             SETB    C
00005B EF               771             MOV     A,R7
00005C 9D               772             SUBB    A,R5
00005D EC               773             MOV     A,R4
00005E 6480             774             XRL     A,#080H
000060 F8               775             MOV     R0,A
000061 EE               776             MOV     A,R6
000062 6480             777             XRL     A,#080H
000064 98               778             SUBB    A,R0
000065 5009             779             JNC     $ + 0BH
                        780             ;LJMP   ?C0015
000067 750000     F     781             MOV ECO_PAGE_ADDR,#HIGH (?C0015)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    13

00006A 750000     F     782         MOV ECO_PAGE_ADDR+01H,#LOW (?C0015)
00006D 020000     E     783         LJMP   eco_page_manager
000070                  784     ?C0016:
                        785     ; 
                        786     ;               t_re = A_re[i];
                        787                             ; SOURCE LINE # 88
000070 7800       F     788             MOV     R0,#LOW (i?355+01H)
000072 E6               789             MOV     A,@R0
000073 25E0             790             ADD     A,ACC
000075 FF               791             MOV     R7,A
000076 18               792             DEC     R0
000077 E6               793             MOV     A,@R0
000078 33               794             RLC     A
000079 FE               795             MOV     R6,A
00007A AB00       F     796             MOV     R3,A_re?353
00007C AA00       F     797             MOV     R2,A_re?353+01H
00007E A900       F     798             MOV     R1,A_re?353+02H
000080 8F82             799             MOV     DPL,R7
000082 F583             800             MOV     DPH,A
000084 120000     E     801             LCALL   ?C?ILDOPTR
000087 7800       F     802             MOV     R0,#LOW (t_re?358)
000089 A6F0             803             MOV     @R0,B
00008B 08               804             INC     R0
00008C F6               805             MOV     @R0,A
                        806     ;               t_im = A_im[i];
                        807                             ; SOURCE LINE # 89
00008D AB00       F     808             MOV     R3,A_im?354
00008F AA00       F     809             MOV     R2,A_im?354+01H
000091 A900       F     810             MOV     R1,A_im?354+02H
000093 8F82             811             MOV     DPL,R7
000095 8E83             812             MOV     DPH,R6
000097 120000     E     813             LCALL   ?C?ILDOPTR
00009A 7800       F     814             MOV     R0,#LOW (t_im?359)
00009C A6F0             815             MOV     @R0,B
00009E 08               816             INC     R0
00009F F6               817             MOV     @R0,A
                        818     ;               A_re[i]= A_re[bri];
                        819                             ; SOURCE LINE # 90
0000A0 750000     F     820             MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev_2)
0000A3 750000     F     821         MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev_2)
0000A6 020000     E     822         LJMP   eco_page_manager
                        823     
                        824     
                        825     
------                  826         RSEG  ?PR?_permute_bitrev_2?MAIN
000000                  827     _permute_bitrev_2:
                        828         USING   0
                        829             
000000 7800       F     830             MOV     R0,#LOW (bri?356+01H)
000002 E6               831             MOV     A,@R0
000003 25E0             832             ADD     A,ACC
000005 FF               833             MOV     R7,A
000006 18               834             DEC     R0
000007 E6               835             MOV     A,@R0
000008 33               836             RLC     A
000009 AB00       F     837             MOV     R3,A_re?353
00000B AA00       F     838             MOV     R2,A_re?353+01H
00000D A900       F     839             MOV     R1,A_re?353+02H
00000F 8F82             840             MOV     DPL,R7
000011 F583             841             MOV     DPH,A
000013 120000     E     842             LCALL   ?C?ILDOPTR
000016 FD               843             MOV     R5,A
000017 7800       F     844             MOV     R0,#LOW (i?355+01H)
000019 E6               845             MOV     A,@R0
00001A 25E0             846             ADD     A,ACC
00001C FF               847             MOV     R7,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    14

00001D 18               848             DEC     R0
00001E E6               849             MOV     A,@R0
00001F 33               850             RLC     A
000020 8F82             851             MOV     DPL,R7
000022 F583             852             MOV     DPH,A
000024 E5F0             853             MOV     A,B
000026 8DF0             854             MOV     B,R5
000028 120000     E     855             LCALL   ?C?ISTOPTR
                        856     ;               A_im[i]= A_im[bri];
                        857                             ; SOURCE LINE # 91
00002B 7800       F     858             MOV     R0,#LOW (bri?356+01H)
00002D E6               859             MOV     A,@R0
00002E 25E0             860             ADD     A,ACC
000030 FF               861             MOV     R7,A
000031 18               862             DEC     R0
000032 E6               863             MOV     A,@R0
000033 33               864             RLC     A
000034 AB00       F     865             MOV     R3,A_im?354
000036 AA00       F     866             MOV     R2,A_im?354+01H
000038 A900       F     867             MOV     R1,A_im?354+02H
00003A 8F82             868             MOV     DPL,R7
00003C F583             869             MOV     DPH,A
00003E 120000     E     870             LCALL   ?C?ILDOPTR
000041 FD               871             MOV     R5,A
000042 7800       F     872             MOV     R0,#LOW (i?355+01H)
000044 E6               873             MOV     A,@R0
000045 25E0             874             ADD     A,ACC
000047 FF               875             MOV     R7,A
000048 18               876             DEC     R0
000049 E6               877             MOV     A,@R0
00004A 33               878             RLC     A
00004B 8F82             879             MOV     DPL,R7
00004D F583             880             MOV     DPH,A
00004F E5F0             881             MOV     A,B
000051 8DF0             882             MOV     B,R5
000053 120000     E     883             LCALL   ?C?ISTOPTR
                        884     ;               A_re[bri]= t_re;
                        885                             ; SOURCE LINE # 92
000056 7800       F     886             MOV     R0,#LOW (t_re?358)
000058 E6               887             MOV     A,@R0
000059 FC               888             MOV     R4,A
00005A 08               889             INC     R0
00005B E6               890             MOV     A,@R0
00005C FD               891             MOV     R5,A
00005D 7800       F     892             MOV     R0,#LOW (bri?356+01H)
00005F E6               893             MOV     A,@R0
000060 25E0             894             ADD     A,ACC
000062 FF               895             MOV     R7,A
000063 18               896             DEC     R0
000064 E6               897             MOV     A,@R0
000065 33               898             RLC     A
000066 FE               899             MOV     R6,A
000067 AB00       F     900             MOV     R3,A_re?353
000069 AA00       F     901             MOV     R2,A_re?353+01H
00006B A900       F     902             MOV     R1,A_re?353+02H
00006D 8F82             903             MOV     DPL,R7
00006F F583             904             MOV     DPH,A
000071 EC               905             MOV     A,R4
000072 8DF0             906             MOV     B,R5
000074 120000     E     907             LCALL   ?C?ISTOPTR
                        908     ;               A_im[bri]= t_im;
                        909                             ; SOURCE LINE # 93
000077 7800       F     910             MOV     R0,#LOW (t_im?359)
000079 E6               911             MOV     A,@R0
00007A FD               912             MOV     R5,A
00007B 08               913             INC     R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    15

00007C E6               914             MOV     A,@R0
00007D AB00       F     915             MOV     R3,A_im?354
00007F AA00       F     916             MOV     R2,A_im?354+01H
000081 A900       F     917             MOV     R1,A_im?354+02H
000083 8F82             918             MOV     DPL,R7
000085 8E83             919             MOV     DPH,R6
000087 CD               920             XCH     A,R5
000088 8DF0             921             MOV     B,R5
00008A 120000     E     922             LCALL   ?C?ISTOPTR
                        923     ;       }  
                        924                             ; SOURCE LINE # 94
00008D                  925     ?C0015:
00008D 7800       F     926             MOV     R0,#LOW (i?355+01H)
00008F 06               927             INC     @R0
000090 E6               928             MOV     A,@R0
000091 18               929             DEC     R0
000092 6009             930             JZ      $ + 0BH
                        931             ;LJMP   ?C0013
000094 750000     F     932             MOV ECO_PAGE_ADDR,#HIGH (?C0013)
000097 750000     F     933         MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
00009A 020000     E     934         LJMP   eco_page_manager
00009D 06               935             INC     @R0
00009E                  936     ?C0037:
                        937             ;LJMP   ?C0013
00009E 750000     F     938             MOV ECO_PAGE_ADDR,#HIGH (?C0013)
0000A1 750000     F     939         MOV ECO_PAGE_ADDR+01H,#LOW (?C0013)
0000A4 020000     E     940         LJMP   eco_page_manager
                        941     ; } 
                        942                             ; SOURCE LINE # 95
0000A7                  943     ?C0017:
0000A7 22               944             RET     
                        945     ; END OF _permute_bitrev
                        946     
                        947     ; 
                        948     ; 
                        949     ; /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-uni
                               ty lookup table
                        950     ;  * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth root
                               s of unity stored
                        951     ;  * in a permuted bitreversal order.
                        952     ;  *
                        953     ;  * FFT - Decimation In Time FFT with input array in correct order and output array in 
                               bit-reversed order.
                        954     ;  *
                        955     ;  * REQ: n should be a power of 2 to work. 
                        956     ;  *
                        957     ;  * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other deta
                               ils about VHALF section of the algo
                        958     ;  *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
                        959     ;  *       - See the foll. CS267 website for details of the Decimation In Time FFT imple
                               mented here.
                        960     ;  *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
                        961     ;  *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" boo
                               k for another variant of Iterative-FFT
                        962     ;  */
                        963     ; 
                        964     ; //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
                        965     ; void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 
                        966     
------                  967             RSEG  ?PR?_fft?MAIN
000000                  968     _fft:
                        969             USING   0
                        970                             ; SOURCE LINE # 114
000000 8E00       F     971             MOV     n?460,R6
000002 8F00       F     972             MOV     n?460+01H,R7
000004 8B00       F     973             MOV     A_re?461,R3
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    16

000006 8A00       F     974             MOV     A_re?461+01H,R2
000008 8900       F     975             MOV     A_re?461+02H,R1
                        976     ; {
                        977                             ; SOURCE LINE # 115
                        978     ;       int idata w_re, w_im, u_re, u_im, t_re, t_im;
                        979     ;       int idata m, g, b;
                        980     ;       //int i;
                        981     ;       int idata mt, k;
                        982     ; 
                        983     ;       /* for each stage */  
                        984     ;       for (m=n; m>=2; m=m>>1) 
                        985                             ; SOURCE LINE # 122
00000A 7800       F     986             MOV     R0,#LOW (m?471)
00000C A600       F     987             MOV     @R0,n?460
00000E 08               988             INC     R0
00000F A600       F     989             MOV     @R0,n?460+01H
000011                  990     ?C0018:
000011 7800       F     991             MOV     R0,#LOW (m?471)
000013 E6               992             MOV     A,@R0
000014 FE               993             MOV     R6,A
000015 08               994             INC     R0
000016 E6               995             MOV     A,@R0
000017 FF               996             MOV     R7,A
000018 C3               997             CLR     C
000019 9402             998             SUBB    A,#02H
00001B EE               999             MOV     A,R6
00001C 6480            1000             XRL     A,#080H
00001E 9480            1001             SUBB    A,#080H
000020 5009            1002             JNC     $ + 0BH
                       1003             ;LJMP   ?C0027
000022 750000     F    1004         MOV ECO_PAGE_ADDR,#HIGH (?C0027)
000025 750000     F    1005         MOV ECO_PAGE_ADDR+01H,#LOW (?C0027)
000028 020000     E    1006         LJMP   eco_page_manager
                       1007     ;       {
                       1008                             ; SOURCE LINE # 123
                       1009     ;               /* m = n/2^s; mt = m/2; */
                       1010     ;               mt = m >> 1;
                       1011                             ; SOURCE LINE # 125
00002B EE              1012             MOV     A,R6
00002C A2E7            1013             MOV     C,ACC.7
00002E 13              1014             RRC     A
00002F 7900       F    1015             MOV     R1,#LOW (mt?474)
000031 F7              1016             MOV     @R1,A
000032 EF              1017             MOV     A,R7
000033 13              1018             RRC     A
000034 09              1019             INC     R1
000035 F7              1020             MOV     @R1,A
                       1021     ; 
                       1022     ;               /* for each group of butterfly */ 
                       1023     ;               for (g=0,k=0; g<n; g+=m,k++) 
                       1024                             ; SOURCE LINE # 128
000036 E4              1025             CLR     A
000037 08              1026             INC     R0
000038 F6              1027             MOV     @R0,A
000039 08              1028             INC     R0
00003A F6              1029             MOV     @R0,A
00003B 7800       F    1030             MOV     R0,#LOW (k?475)
00003D F6              1031             MOV     @R0,A
00003E 08              1032             INC     R0
00003F F6              1033             MOV     @R0,A
000040                 1034     ?C0021:
000040 C3              1035             CLR     C
000041 7800       F    1036             MOV     R0,#LOW (g?472+01H)
000043 E6              1037             MOV     A,@R0
000044 9500       F    1038             SUBB    A,n?460+01H
000046 E500       F    1039             MOV     A,n?460
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    17

000048 6480            1040             XRL     A,#080H
00004A F5F0            1041             MOV     B,A
00004C 18              1042             DEC     R0
00004D E6              1043             MOV     A,@R0
00004E 6480            1044             XRL     A,#080H
000050 95F0            1045             SUBB    A,B
000052 4009            1046             JC      $ + 0BH
                       1047             ;LJMP   ?C0020
000054 85B300     E    1048             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
000057 750000     F    1049         MOV ECO_PAGE_ADDR,#HIGH (?C0020)
00005A 750000     F    1050         MOV ECO_PAGE_ADDR+01H,#LOW (?C0020)
00005D 020000     E    1051         LJMP   eco_page_manager
                       1052     ;               {
                       1053                             ; SOURCE LINE # 129
                       1054     ;                       /* each butterfly group uses only one root of unity. actually, i
                               t is the bitrev of this group's number k.
                       1055     ;                        * BUT 'bitrev' it as a log2n-1 bit number because we are using 
                               a lookup array of nth root of unity and
                       1056     ;                        * using cancellation lemma to scale nth root to n/2, n/4,... th
                                root.
                       1057     ;                        *
                       1058     ;                        * It turns out like the foll.
                       1059     ;                        *   w.re = W[bitrev(k, log2n-1)].re;
                       1060     ;                        *   w.im = W[bitrev(k, log2n-1)].im;
                       1061     ;                        * Still, we just use k, because the lookup array itself is bit-
                               reversal permuted. 
                       1062     ;                        */
                       1063     ;                       w_re = W_re[k];
                       1064                             ; SOURCE LINE # 139
000060 7800       F    1065             MOV     R0,#LOW (k?475+01H)
000062 E6              1066             MOV     A,@R0
000063 25E0            1067             ADD     A,ACC
000065 FF              1068             MOV     R7,A
000066 18              1069             DEC     R0
000067 E6              1070             MOV     A,@R0
000068 33              1071             RLC     A
000069 FE              1072             MOV     R6,A
00006A AB00       F    1073             MOV     R3,W_re?463
00006C AA00       F    1074             MOV     R2,W_re?463+01H
00006E A900       F    1075             MOV     R1,W_re?463+02H
000070 8F82            1076             MOV     DPL,R7
000072 F583            1077             MOV     DPH,A
000074 120000     E    1078             LCALL   ?C?ILDOPTR
000077 7800       F    1079             MOV     R0,#LOW (w_re?465)
000079 A6F0            1080             MOV     @R0,B
00007B 08              1081             INC     R0
00007C F6              1082             MOV     @R0,A
                       1083     ;                       w_im = W_im[k];
                       1084                             ; SOURCE LINE # 140
00007D AB00       F    1085             MOV     R3,W_im?464
00007F AA00       F    1086             MOV     R2,W_im?464+01H
000081 A900       F    1087             MOV     R1,W_im?464+02H
000083 8F82            1088             MOV     DPL,R7
000085 8E83            1089             MOV     DPH,R6
000087 120000     E    1090             LCALL   ?C?ILDOPTR
00008A 7800       F    1091             MOV     R0,#LOW (w_im?466)
00008C A6F0            1092             MOV     @R0,B
00008E 08              1093             INC     R0
00008F F6              1094             MOV     @R0,A
                       1095     ; 
                       1096     ;                       /* for each butterfly */ 
                       1097     ;                       for (b=g; b<(g+mt); b++) 
                       1098                             ; SOURCE LINE # 143
000090 7800       F    1099             MOV     R0,#LOW (g?472)
000092 E6              1100             MOV     A,@R0
000093 FE              1101             MOV     R6,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    18

000094 08              1102             INC     R0
000095 E6              1103             MOV     A,@R0
000096 FF              1104             MOV     R7,A
000097 08              1105             INC     R0
000098 A606            1106             MOV     @R0,AR6
00009A 08              1107             INC     R0
00009B A607            1108             MOV     @R0,AR7
00009D                 1109     ?C0024:
00009D 7900       F    1110             MOV     R1,#LOW (g?472+01H)
00009F E7              1111             MOV     A,@R1
0000A0 7800       F    1112             MOV     R0,#LOW (mt?474+01H)
0000A2 26              1113             ADD     A,@R0
0000A3 FF              1114             MOV     R7,A
0000A4 19              1115             DEC     R1
0000A5 E7              1116             MOV     A,@R1
0000A6 18              1117             DEC     R0
0000A7 36              1118             ADDC    A,@R0
0000A8 FE              1119             MOV     R6,A
0000A9 C3              1120             CLR     C
0000AA 18              1121             DEC     R0
0000AB E6              1122             MOV     A,@R0
0000AC 9F              1123             SUBB    A,R7
0000AD EE              1124             MOV     A,R6
0000AE 6480            1125             XRL     A,#080H
0000B0 F5F0            1126             MOV     B,A
0000B2 18              1127             DEC     R0
0000B3 E6              1128             MOV     A,@R0
0000B4 6480            1129             XRL     A,#080H
0000B6 95F0            1130             SUBB    A,B
0000B8 4009            1131             JC      $ + 0BH
                       1132             ;LJMP   ?C0023
0000BA 85B300     E    1133             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000BD 750000     F    1134         MOV ECO_PAGE_ADDR,#HIGH (?C0023)
0000C0 750000     F    1135         MOV ECO_PAGE_ADDR+01H,#LOW (?C0023)
0000C3 020000     E    1136         LJMP   eco_page_manager
                       1137     ;                       {
                       1138                             ; SOURCE LINE # 144
                       1139     ;                               /* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b],
                                A_im[b], A_re[b+mt], A_im[b+mt]);
                       1140     ;                                */ 
                       1141     ;                               //printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1142     ; 
                       1143     ;                               /* t = w * A[b+mt] */
                       1144     ;                               t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
                       1145                             ; SOURCE LINE # 150
0000C6 7900       F    1146             MOV     R1,#LOW (b?473+01H)
0000C8 E7              1147             MOV     A,@R1
0000C9 7800       F    1148             MOV     R0,#LOW (mt?474+01H)
0000CB 26              1149             ADD     A,@R0
0000CC FF              1150             MOV     R7,A
0000CD 19              1151             DEC     R1
0000CE E7              1152             MOV     A,@R1
0000CF 18              1153             DEC     R0
0000D0 36              1154             ADDC    A,@R0
0000D1 FE              1155             MOV     R6,A
0000D2 EF              1156             MOV     A,R7
0000D3 25E0            1157             ADD     A,ACC
0000D5 FF              1158             MOV     R7,A
0000D6 EE              1159             MOV     A,R6
0000D7 33              1160             RLC     A
0000D8 AB00       F    1161             MOV     R3,A_im?462
0000DA AA00       F    1162             MOV     R2,A_im?462+01H
0000DC A900       F    1163             MOV     R1,A_im?462+02H
0000DE 8F82            1164             MOV     DPL,R7
0000E0 F583            1165             MOV     DPH,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    19

0000E2 120000     E    1166             LCALL   ?C?ILDOPTR
                       1167             ;MOV    R5,A
                       1168             ;MOV    R4,B
0000E5 7800       E    1169             MOV R0,#LOW (ECO_PAGE_REGISTER5)
0000E7 F6              1170         MOV @R0,A
0000E8 7800       E    1171         MOV R0,#LOW (ECO_PAGE_REGISTER4)
0000EA A6F0            1172         MOV @R0,B
                       1173         ;XRL    P0,#020H
                       1174     
                       1175         ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000EC 750000     F    1176         MOV ECO_PAGE_ADDR,#HIGH (_fft_2)
0000EF 750000     F    1177         MOV ECO_PAGE_ADDR+01H,#LOW (_fft_2)
0000F2 020000     E    1178         LJMP   eco_page_manager
                       1179     
                       1180     
------                 1181         RSEG  ?PR?_fft_2?MAIN
000000                 1182     _fft_2:
                       1183         USING   0
                       1184     
000000 7800       F    1185             MOV     R0,#LOW (w_im?466)
000002 E6              1186             MOV     A,@R0
000003 FE              1187             MOV     R6,A
000004 08              1188             INC     R0
000005 E6              1189             MOV     A,@R0
000006 FF              1190             MOV     R7,A
000007 120000     E    1191             LCALL   ?C?IMUL
00000A C006            1192             PUSH    AR6
00000C C007            1193             PUSH    AR7
00000E 7900       F    1194             MOV     R1,#LOW (b?473+01H)
000010 E7              1195             MOV     A,@R1
000011 7800       F    1196             MOV     R0,#LOW (mt?474+01H)
000013 26              1197             ADD     A,@R0
000014 FF              1198             MOV     R7,A
000015 19              1199             DEC     R1
000016 E7              1200             MOV     A,@R1
000017 18              1201             DEC     R0
000018 36              1202             ADDC    A,@R0
000019 FE              1203             MOV     R6,A
00001A EF              1204             MOV     A,R7
00001B 25E0            1205             ADD     A,ACC
00001D FF              1206             MOV     R7,A
00001E EE              1207             MOV     A,R6
00001F 33              1208             RLC     A
000020 AB00       F    1209             MOV     R3,A_re?461
000022 AA00       F    1210             MOV     R2,A_re?461+01H
000024 A900       F    1211             MOV     R1,A_re?461+02H
000026 8F82            1212             MOV     DPL,R7
000028 F583            1213             MOV     DPH,A
00002A 120000     E    1214             LCALL   ?C?ILDOPTR
00002D FB              1215             MOV     R3,A
00002E AAF0            1216             MOV     R2,B
000030 7800       F    1217             MOV     R0,#LOW (w_re?465)
000032 E6              1218             MOV     A,@R0
000033 FE              1219             MOV     R6,A
000034 08              1220             INC     R0
000035 E6              1221             MOV     A,@R0
000036 FF              1222             MOV     R7,A
000037 AD03            1223             MOV     R5,AR3
000039 AC02            1224             MOV     R4,AR2
00003B 120000     E    1225             LCALL   ?C?IMUL
00003E AC06            1226             MOV     R4,AR6
000040 AD07            1227             MOV     R5,AR7
000042 D007            1228             POP     AR7
000044 D006            1229             POP     AR6
000046 C3              1230             CLR     C
000047 ED              1231             MOV     A,R5
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    20

000048 9F              1232             SUBB    A,R7
000049 7800       F    1233             MOV     R0,#LOW (t_re?469+01H)
00004B F6              1234             MOV     @R0,A
00004C EC              1235             MOV     A,R4
00004D 9E              1236             SUBB    A,R6
00004E 18              1237             DEC     R0
00004F F6              1238             MOV     @R0,A
                       1239     ;                               t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
                       1240                             ; SOURCE LINE # 151
000050 7800       F    1241             MOV     R0,#LOW (w_im?466)
000052 E6              1242             MOV     A,@R0
000053 FE              1243             MOV     R6,A
000054 08              1244             INC     R0
000055 E6              1245             MOV     A,@R0
000056 FF              1246             MOV     R7,A
000057 AD03            1247             MOV     R5,AR3
000059 AC02            1248             MOV     R4,AR2
00005B 120000     E    1249             LCALL   ?C?IMUL
00005E C006            1250             PUSH    AR6
000060 C007            1251             PUSH    AR7
000062 7900       F    1252             MOV     R1,#LOW (b?473+01H)
000064 E7              1253             MOV     A,@R1
000065 7800       F    1254             MOV     R0,#LOW (mt?474+01H)
000067 26              1255             ADD     A,@R0
000068 FF              1256             MOV     R7,A
000069 19              1257             DEC     R1
00006A E7              1258             MOV     A,@R1
00006B 18              1259             DEC     R0
00006C 36              1260             ADDC    A,@R0
00006D FE              1261             MOV     R6,A
00006E EF              1262             MOV     A,R7
00006F 25E0            1263             ADD     A,ACC
000071 FF              1264             MOV     R7,A
000072 EE              1265             MOV     A,R6
000073 33              1266             RLC     A
000074 AB00       F    1267             MOV     R3,A_im?462
000076 AA00       F    1268             MOV     R2,A_im?462+01H
000078 A900       F    1269             MOV     R1,A_im?462+02H
00007A 8F82            1270             MOV     DPL,R7
00007C F583            1271             MOV     DPH,A
00007E 120000     E    1272             LCALL   ?C?ILDOPTR
000081 FD              1273             MOV     R5,A
000082 ACF0            1274             MOV     R4,B
000084 7800       F    1275             MOV     R0,#LOW (w_re?465)
000086 E6              1276             MOV     A,@R0
000087 FE              1277             MOV     R6,A
000088 08              1278             INC     R0
000089 E6              1279             MOV     A,@R0
00008A FF              1280             MOV     R7,A
00008B 120000     E    1281             LCALL   ?C?IMUL
00008E D0E0            1282             POP     ACC
000090 2F              1283             ADD     A,R7
000091 7800       F    1284             MOV     R0,#LOW (t_im?470+01H)
000093 F6              1285             MOV     @R0,A
000094 D0E0            1286             POP     ACC
000096 3E              1287             ADDC    A,R6
000097 18              1288             DEC     R0
000098 F6              1289             MOV     @R0,A
                       1290     ; 
                       1291     ;                               /* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
                       1292     ;                               u_re = A_re[b];
                       1293                             ; SOURCE LINE # 154
000099 7800       F    1294             MOV     R0,#LOW (b?473+01H)
00009B E6              1295             MOV     A,@R0
00009C 25E0            1296             ADD     A,ACC
00009E FF              1297             MOV     R7,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    21

00009F 18              1298             DEC     R0
0000A0 E6              1299             MOV     A,@R0
0000A1 33              1300             RLC     A
0000A2 FE              1301             MOV     R6,A
0000A3 AB00       F    1302             MOV     R3,A_re?461
0000A5 AA00       F    1303             MOV     R2,A_re?461+01H
0000A7 A900       F    1304             MOV     R1,A_re?461+02H
0000A9 8F82            1305             MOV     DPL,R7
0000AB F583            1306             MOV     DPH,A
0000AD 120000     E    1307             LCALL   ?C?ILDOPTR
0000B0 7800       F    1308             MOV     R0,#LOW (u_re?467)
0000B2 A6F0            1309             MOV     @R0,B
0000B4 08              1310             INC     R0
0000B5 F6              1311             MOV     @R0,A
                       1312     ;                               u_im = A_im[b];
                       1313                             ; SOURCE LINE # 155
0000B6 AB00       F    1314             MOV     R3,A_im?462
0000B8 AA00       F    1315             MOV     R2,A_im?462+01H
0000BA A900       F    1316             MOV     R1,A_im?462+02H
0000BC 8F82            1317             MOV     DPL,R7
0000BE 8E83            1318             MOV     DPH,R6
0000C0 120000     E    1319             LCALL   ?C?ILDOPTR
0000C3 7800       F    1320             MOV     R0,#LOW (u_im?468)
0000C5 A6F0            1321             MOV     @R0,B
0000C7 08              1322             INC     R0
0000C8 F6              1323             MOV     @R0,A
                       1324     ;                               A_re[b] = u_re + t_re;
                       1325                             ; SOURCE LINE # 156
0000C9 7900       F    1326             MOV     R1,#LOW (u_re?467+01H)
0000CB E7              1327             MOV     A,@R1
0000CC 7800       F    1328             MOV     R0,#LOW (t_re?469+01H)
0000CE 26              1329             ADD     A,@R0
0000CF FD              1330             MOV     R5,A
0000D0 19              1331             DEC     R1
0000D1 E7              1332             MOV     A,@R1
0000D2 18              1333             DEC     R0
0000D3 36              1334             ADDC    A,@R0
0000D4 FC              1335             MOV     R4,A
0000D5 7800       F    1336             MOV     R0,#LOW (b?473+01H)
0000D7 E6              1337             MOV     A,@R0
0000D8 25E0            1338             ADD     A,ACC
0000DA FF              1339             MOV     R7,A
0000DB 18              1340             DEC     R0
0000DC E6              1341             MOV     A,@R0
0000DD 33              1342             RLC     A
0000DE AB00       F    1343             MOV     R3,A_re?461
0000E0 AA00       F    1344             MOV     R2,A_re?461+01H
0000E2 A900       F    1345             MOV     R1,A_re?461+02H
0000E4 8F82            1346             MOV     DPL,R7
0000E6 F583            1347             MOV     DPH,A
0000E8 EC              1348             MOV     A,R4
0000E9 8DF0            1349             MOV     B,R5
0000EB 120000     E    1350             LCALL   ?C?ISTOPTR
                       1351     ;                               A_im[b] = u_im + t_im;
                       1352                             ; SOURCE LINE # 157
                       1353     
                       1354             ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000EE 750000     F    1355         MOV ECO_PAGE_ADDR,#HIGH (_fft_3)
0000F1 750000     F    1356         MOV ECO_PAGE_ADDR+01H,#LOW (_fft_3)
0000F4 020000     E    1357         LJMP   eco_page_manager
                       1358     
                       1359     
------                 1360         RSEG  ?PR?_fft_3?MAIN
000000                 1361     _fft_3:
                       1362         USING   0
                       1363     
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    22

                       1364     
000000 7900       F    1365             MOV     R1,#LOW (u_im?468+01H)
000002 E7              1366             MOV     A,@R1
000003 7800       F    1367             MOV     R0,#LOW (t_im?470+01H)
000005 26              1368             ADD     A,@R0
000006 FD              1369             MOV     R5,A
000007 19              1370             DEC     R1
000008 E7              1371             MOV     A,@R1
000009 18              1372             DEC     R0
00000A 36              1373             ADDC    A,@R0
00000B FC              1374             MOV     R4,A
00000C 7800       F    1375             MOV     R0,#LOW (b?473+01H)
00000E E6              1376             MOV     A,@R0
00000F 25E0            1377             ADD     A,ACC
000011 FF              1378             MOV     R7,A
000012 18              1379             DEC     R0
000013 E6              1380             MOV     A,@R0
000014 33              1381             RLC     A
000015 AB00       F    1382             MOV     R3,A_im?462
000017 AA00       F    1383             MOV     R2,A_im?462+01H
000019 A900       F    1384             MOV     R1,A_im?462+02H
00001B 8F82            1385             MOV     DPL,R7
00001D F583            1386             MOV     DPH,A
00001F EC              1387             MOV     A,R4
000020 8DF0            1388             MOV     B,R5
000022 120000     E    1389             LCALL   ?C?ISTOPTR
                       1390     ;                               A_re[b+mt] = u_re - t_re;
                       1391                             ; SOURCE LINE # 158
000025 C3              1392             CLR     C
000026 7900       F    1393             MOV     R1,#LOW (u_re?467+01H)
000028 E7              1394             MOV     A,@R1
000029 7800       F    1395             MOV     R0,#LOW (t_re?469+01H)
00002B 96              1396             SUBB    A,@R0
00002C FD              1397             MOV     R5,A
00002D 19              1398             DEC     R1
00002E E7              1399             MOV     A,@R1
00002F 18              1400             DEC     R0
000030 96              1401             SUBB    A,@R0
000031 FC              1402             MOV     R4,A
000032 7900       F    1403             MOV     R1,#LOW (b?473+01H)
000034 E7              1404             MOV     A,@R1
000035 7800       F    1405             MOV     R0,#LOW (mt?474+01H)
000037 26              1406             ADD     A,@R0
000038 FF              1407             MOV     R7,A
000039 19              1408             DEC     R1
00003A E7              1409             MOV     A,@R1
00003B 18              1410             DEC     R0
00003C 36              1411             ADDC    A,@R0
00003D FE              1412             MOV     R6,A
00003E EF              1413             MOV     A,R7
00003F 25E0            1414             ADD     A,ACC
000041 FF              1415             MOV     R7,A
000042 EE              1416             MOV     A,R6
000043 33              1417             RLC     A
000044 AB00       F    1418             MOV     R3,A_re?461
000046 AA00       F    1419             MOV     R2,A_re?461+01H
000048 A900       F    1420             MOV     R1,A_re?461+02H
00004A 8F82            1421             MOV     DPL,R7
00004C F583            1422             MOV     DPH,A
00004E EC              1423             MOV     A,R4
00004F 8DF0            1424             MOV     B,R5
000051 120000     E    1425             LCALL   ?C?ISTOPTR
                       1426     ;                               A_im[b+mt] = u_im - t_im;
                       1427                             ; SOURCE LINE # 159
000054 C3              1428             CLR     C
000055 7900       F    1429             MOV     R1,#LOW (u_im?468+01H)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    23

000057 E7              1430             MOV     A,@R1
000058 7800       F    1431             MOV     R0,#LOW (t_im?470+01H)
00005A 96              1432             SUBB    A,@R0
00005B FD              1433             MOV     R5,A
00005C 19              1434             DEC     R1
00005D E7              1435             MOV     A,@R1
00005E 18              1436             DEC     R0
00005F 96              1437             SUBB    A,@R0
000060 FC              1438             MOV     R4,A
000061 7900       F    1439             MOV     R1,#LOW (b?473+01H)
000063 E7              1440             MOV     A,@R1
000064 7800       F    1441             MOV     R0,#LOW (mt?474+01H)
000066 26              1442             ADD     A,@R0
000067 FF              1443             MOV     R7,A
000068 19              1444             DEC     R1
000069 E7              1445             MOV     A,@R1
00006A 18              1446             DEC     R0
00006B 36              1447             ADDC    A,@R0
00006C FE              1448             MOV     R6,A
00006D EF              1449             MOV     A,R7
00006E 25E0            1450             ADD     A,ACC
000070 FF              1451             MOV     R7,A
000071 EE              1452             MOV     A,R6
000072 33              1453             RLC     A
000073 AB00       F    1454             MOV     R3,A_im?462
000075 AA00       F    1455             MOV     R2,A_im?462+01H
000077 A900       F    1456             MOV     R1,A_im?462+02H
000079 8F82            1457             MOV     DPL,R7
00007B F583            1458             MOV     DPH,A
00007D EC              1459             MOV     A,R4
00007E 8DF0            1460             MOV     B,R5
000080 120000     E    1461             LCALL   ?C?ISTOPTR
                       1462     ; 
                       1463     ;                               /*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b]
                               , A_im[b], A_re[b+mt], A_im[b+mt]);
                       1464     ;                                */         
                       1465     ;                               //printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1466     ;                       }
                       1467                             ; SOURCE LINE # 164
000083 7800       F    1468             MOV     R0,#LOW (b?473+01H)
000085 06              1469             INC     @R0
000086 E6              1470             MOV     A,@R0
000087 18              1471             DEC     R0
000088 7001            1472             JNZ     ?C0038
00008A 06              1473             INC     @R0
00008B                 1474     ?C0038:
                       1475             ;LJMP   ?C0024
                       1476             ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
00008B 750000     F    1477         MOV ECO_PAGE_ADDR,#HIGH (?C0024)
00008E 750000     F    1478         MOV ECO_PAGE_ADDR+01H,#LOW (?C0024)
000091 020000     E    1479         LJMP   eco_page_manager
                       1480     ;               }
                       1481                             ; SOURCE LINE # 165
000094                 1482     ?C0023:
000094 7800       F    1483             MOV     R0,#LOW (m?471)
000096 E6              1484             MOV     A,@R0
000097 FE              1485             MOV     R6,A
000098 08              1486             INC     R0
000099 E6              1487             MOV     A,@R0
00009A 7800       F    1488             MOV     R0,#LOW (g?472+01H)
00009C 26              1489             ADD     A,@R0
00009D F6              1490             MOV     @R0,A
00009E 18              1491             DEC     R0
00009F EE              1492             MOV     A,R6
0000A0 36              1493             ADDC    A,@R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    24

0000A1 F6              1494             MOV     @R0,A
0000A2 7800       F    1495             MOV     R0,#LOW (k?475+01H)
0000A4 06              1496             INC     @R0
0000A5 E6              1497             MOV     A,@R0
0000A6 18              1498             DEC     R0
0000A7 6009            1499             JZ      $ + 0BH
                       1500             ;LJMP   ?C0021
                       1501             ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000A9 750000     F    1502         MOV ECO_PAGE_ADDR,#HIGH (?C0021)
0000AC 750000     F    1503         MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
0000AF 020000     E    1504         LJMP   eco_page_manager
0000B2 06              1505             INC     @R0
0000B3                 1506     ?C0039:
                       1507             ;LJMP   ?C0021
                       1508             ;MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000B3 750000     F    1509         MOV ECO_PAGE_ADDR,#HIGH (?C0021)
0000B6 750000     F    1510         MOV ECO_PAGE_ADDR+01H,#LOW (?C0021)
0000B9 020000     E    1511         LJMP   eco_page_manager
                       1512     ;       }
                       1513                             ; SOURCE LINE # 166
0000BC                 1514     ?C0020:
0000BC 7800       F    1515             MOV     R0,#LOW (m?471)
0000BE E6              1516             MOV     A,@R0
0000BF A2E7            1517             MOV     C,ACC.7
0000C1 13              1518             RRC     A
0000C2 7900       F    1519             MOV     R1,#LOW (m?471)
0000C4 F7              1520             MOV     @R1,A
0000C5 08              1521             INC     R0
0000C6 E6              1522             MOV     A,@R0
0000C7 13              1523             RRC     A
0000C8 09              1524             INC     R1
0000C9 F7              1525             MOV     @R1,A
                       1526             ;LJMP   ?C0018
0000CA 85B300     E    1527             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000CD 750000     F    1528         MOV ECO_PAGE_ADDR,#HIGH (?C0018)
0000D0 750000     F    1529         MOV ECO_PAGE_ADDR+01H,#LOW (?C0018)
0000D3 020000     E    1530         LJMP   eco_page_manager
                       1531     ; }
                       1532                             ; SOURCE LINE # 167
0000D6                 1533     ?C0027:
0000D6 22              1534             RET     
                       1535     ; END OF _fft
                       1536     
                       1537     ; 
                       1538     ; int main()
                       1539     
------                 1540             RSEG  ?PR?main?MAIN
000000                 1541     main:
                       1542             USING   0
                       1543                             ; SOURCE LINE # 169
                       1544     ; {
                       1545                             ; SOURCE LINE # 170
                       1546     ;       int idata n;
                       1547     ;       //int idata i;
                       1548     ;       int idata A_re[8];
                       1549     ;       int idata A_im[8];
                       1550     ;       int idata W_re[4];
                       1551     ;       int idata W_im[4]; 
                       1552     ;       //int idata A_re[16];
                       1553     ;       //int idata A_im[16];
                       1554     ;       //int idata W_re[8];
                       1555     ;       //int idata W_im[8]; 
                       1556     ; 
                       1557     ;       
                       1558     ;       store_cpu_rate(16);
                       1559                             ; SOURCE LINE # 183
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    25

000000 7F10            1560             MOV     R7,#010H
000002 7E00            1561             MOV     R6,#00H
000004 120000     E    1562             LCALL   _store_cpu_rate
                       1563     ; 
                       1564     ;       P0_DIR &= ~0x28;
                       1565                             ; SOURCE LINE # 185
000007 5394D7          1566             ANL     P0_DIR,#0D7H
                       1567     ;       P0_ALT &= ~0x28;
                       1568                             ; SOURCE LINE # 186
00000A 5395D7          1569             ANL     P0_ALT,#0D7H
                       1570     ; 
                       1571     ;       for(n=0;n<6;n++)
                       1572                             ; SOURCE LINE # 188
00000D E4              1573             CLR     A
00000E 7800       F    1574             MOV     R0,#LOW (n?576)
000010 F6              1575             MOV     @R0,A
000011 08              1576             INC     R0
000012 F6              1577             MOV     @R0,A
000013                 1578     ?C0028:
                       1579     ;       {
                       1580                             ; SOURCE LINE # 189
                       1581     ;               blink_led();
                       1582                             ; SOURCE LINE # 190
000013 638020          1583             XRL     P0,#020H
                       1584     ;               mdelay(400);
                       1585                             ; SOURCE LINE # 191
000016 7F90            1586             MOV     R7,#090H
000018 7E01            1587             MOV     R6,#01H
00001A 120000     E    1588             LCALL   _mdelay
                       1589     ;       }
                       1590                             ; SOURCE LINE # 192
00001D 7800       F    1591             MOV     R0,#LOW (n?576+01H)
00001F 06              1592             INC     @R0
000020 E6              1593             MOV     A,@R0
000021 18              1594             DEC     R0
000022 7001            1595             JNZ     ?C0040
000024 06              1596             INC     @R0
000025                 1597     ?C0040:
000025 C3              1598             CLR     C
000026 7800       F    1599             MOV     R0,#LOW (n?576+01H)
000028 E6              1600             MOV     A,@R0
000029 9406            1601             SUBB    A,#06H
00002B 18              1602             DEC     R0
00002C E6              1603             MOV     A,@R0
00002D 6480            1604             XRL     A,#080H
00002F 9480            1605             SUBB    A,#080H
000031 40E0            1606             JC      ?C0028
000033                 1607     ?C0031:
                       1608     ;       //A_re = (double*)malloc(sizeof(double)*n); 
                       1609     ;       //A_im = (double*)malloc(sizeof(double)*n); 
                       1610     ;       //W_re = (double*)malloc(sizeof(double)*n/2); 
                       1611     ;       //W_im = (double*)malloc(sizeof(double)*n/2); 
                       1612     ;       //assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
                       1613     ;       
                       1614     ;       while(1)
                       1615                             ; SOURCE LINE # 199
                       1616     ;       {
                       1617                             ; SOURCE LINE # 200
                       1618     ;       //for (i=0; i<3; i++) {
                       1619     ;               //init_array(n, A_re, A_im); 
                       1620     ;               n = 8;
                       1621                             ; SOURCE LINE # 203
000033 7800       F    1622             MOV     R0,#LOW (n?576)
000035 7600            1623             MOV     @R0,#00H
000037 08              1624             INC     R0
000038 7608            1625             MOV     @R0,#08H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    26

                       1626     ;               blink_led();
                       1627                             ; SOURCE LINE # 204
00003A 638020          1628             XRL     P0,#020H
                       1629     ; 
                       1630     ;               compute_W(n, W_re, W_im); 
                       1631                             ; SOURCE LINE # 206
00003D 18              1632             DEC     R0
00003E E6              1633             MOV     A,@R0
00003F FE              1634             MOV     R6,A
000040 08              1635             INC     R0
000041 E6              1636             MOV     A,@R0
000042 FF              1637             MOV     R7,A
                       1638     
000043 7800       E    1639             MOV R0,#LOW (ECO_PAGE_REGISTER6)
000045 EE              1640         MOV A,R6
000046 F6              1641         MOV @R0,A
000047 7800       E    1642         MOV R0,#LOW (ECO_PAGE_REGISTER7)
000049 EF              1643         MOV A,R7
00004A F6              1644         MOV @R0,A
                       1645     
00004B 750000     F    1646             MOV     ?_compute_W?BYTE+05H,#00H
00004E 750000     F    1647             MOV     ?_compute_W?BYTE+06H,#HIGH (W_im?580)
000051 750000     F    1648             MOV     ?_compute_W?BYTE+07H,#LOW (W_im?580)
                       1649             ;MOV    R3,#00H
                       1650             ;MOV    R2,#HIGH (W_re?579)
                       1651             ;MOV    R1,#LOW (W_re?579)
                       1652             ;LCALL  _compute_W
                       1653             
000054 7800       E    1654             MOV R0,#LOW (ECO_PAGE_REGISTER3)
000056 7600            1655         MOV @R0,#00H
                       1656     
000058 7800       E    1657         MOV R0,#LOW (ECO_PAGE_REGISTER2)
00005A 7600       F    1658         MOV @R0,#HIGH (W_re?579)
                       1659     
00005C 7800       E    1660         MOV R0,#LOW (ECO_PAGE_REGISTER1)
00005E 7600       F    1661         MOV @R0,#LOW (W_re?579)
                       1662     
000060 85B300     E    1663             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
000063 750000     F    1664         MOV ECO_PAGE_ADDR,#HIGH (_compute_W)
000066 750000     F    1665         MOV ECO_PAGE_ADDR+01H,#LOW (_compute_W)
000069 120000     E    1666         LCALL   eco_page_manager
                       1667     
                       1668     
                       1669     ;               fft(n, A_re, A_im, W_re, W_im);
                       1670                             ; SOURCE LINE # 207
00006C 7800       F    1671             MOV     R0,#LOW (n?576)
00006E E6              1672             MOV     A,@R0
00006F FE              1673             MOV     R6,A
000070 08              1674             INC     R0
000071 E6              1675             MOV     A,@R0
000072 FF              1676             MOV     R7,A
                       1677     
000073 7800       E    1678             MOV R0,#LOW (ECO_PAGE_REGISTER6)
000075 EE              1679         MOV A,R6
000076 F6              1680         MOV @R0,A
000077 7800       E    1681         MOV R0,#LOW (ECO_PAGE_REGISTER7)
000079 EF              1682         MOV A,R7
00007A F6              1683         MOV @R0,A
                       1684     
00007B 750000     F    1685             MOV     ?_fft?BYTE+05H,#00H
00007E 750000     F    1686             MOV     ?_fft?BYTE+06H,#HIGH (A_im?578)
000081 750000     F    1687             MOV     ?_fft?BYTE+07H,#LOW (A_im?578)
000084 750000     F    1688             MOV     ?_fft?BYTE+08H,#00H
000087 750000     F    1689             MOV     ?_fft?BYTE+09H,#HIGH (W_re?579)
00008A 750000     F    1690             MOV     ?_fft?BYTE+0AH,#LOW (W_re?579)
00008D 750000     F    1691             MOV     ?_fft?BYTE+0BH,#00H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    27

000090 750000     F    1692             MOV     ?_fft?BYTE+0CH,#HIGH (W_im?580)
000093 750000     F    1693             MOV     ?_fft?BYTE+0DH,#LOW (W_im?580)
                       1694             ;MOV    R3,#00H
                       1695             ;MOV    R2,#HIGH (A_re?577)
                       1696             ;MOV    R1,#LOW (A_re?577)
                       1697     
000096 7800       E    1698             MOV R0,#LOW (ECO_PAGE_REGISTER3)
000098 7600            1699         MOV @R0,#00H
                       1700     
00009A 7800       E    1701         MOV R0,#LOW (ECO_PAGE_REGISTER2)
00009C 7600       F    1702         MOV @R0,#HIGH (A_re?577)
                       1703     
00009E 7800       E    1704         MOV R0,#LOW (ECO_PAGE_REGISTER1)
0000A0 7600       F    1705         MOV @R0,#LOW (A_re?577)
                       1706     
0000A2 85B300     E    1707             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000A5 750000     F    1708         MOV ECO_PAGE_ADDR,#HIGH (_fft)
0000A8 750000     F    1709         MOV ECO_PAGE_ADDR+01H,#LOW (_fft)
0000AB 120000     E    1710         LCALL   eco_page_manager
                       1711     
                       1712             ;LCALL  _fft
                       1713     ;               permute_bitrev(n, A_re, A_im);
                       1714                             ; SOURCE LINE # 208
0000AE 7800       F    1715             MOV     R0,#LOW (n?576)
0000B0 E6              1716             MOV     A,@R0
0000B1 FE              1717             MOV     R6,A
0000B2 08              1718             INC     R0
0000B3 E6              1719             MOV     A,@R0
0000B4 FF              1720             MOV     R7,A
                       1721     
0000B5 7800       E    1722             MOV R0,#LOW (ECO_PAGE_REGISTER6)
0000B7 EE              1723         MOV A,R6
0000B8 F6              1724         MOV @R0,A
0000B9 7800       E    1725         MOV R0,#LOW (ECO_PAGE_REGISTER7)
0000BB EF              1726         MOV A,R7
0000BC F6              1727         MOV @R0,A
                       1728             
0000BD 750000     F    1729             MOV     ?_permute_bitrev?BYTE+05H,#00H
0000C0 750000     F    1730             MOV     ?_permute_bitrev?BYTE+06H,#HIGH (A_im?578)
0000C3 750000     F    1731             MOV     ?_permute_bitrev?BYTE+07H,#LOW (A_im?578)
                       1732             ;MOV    R3,#00H
                       1733             ;MOV    R2,#HIGH (A_re?577)
                       1734             ;MOV    R1,#LOW (A_re?577)
                       1735     
0000C6 7800       E    1736             MOV R0,#LOW (ECO_PAGE_REGISTER3)
0000C8 7600            1737         MOV @R0,#00H
                       1738     
0000CA 7800       E    1739         MOV R0,#LOW (ECO_PAGE_REGISTER2)
0000CC 7600       F    1740         MOV @R0,#HIGH (A_re?577)
                       1741     
0000CE 7800       E    1742         MOV R0,#LOW (ECO_PAGE_REGISTER1)
0000D0 7600       F    1743         MOV @R0,#LOW (A_re?577)
                       1744     
0000D2 85B300     E    1745             MOV ECO_PAGE_SPI_CONN,SPI_CTRL
0000D5 750000     F    1746         MOV ECO_PAGE_ADDR,#HIGH (_permute_bitrev)
0000D8 750000     F    1747         MOV ECO_PAGE_ADDR+01H,#LOW (_permute_bitrev)
0000DB 120000     E    1748         LCALL   eco_page_manager    
                       1749             ;LCALL  _permute_bitrev
                       1750     ; 
                       1751     ;               mdelay(100);
                       1752                             ; SOURCE LINE # 210
0000DE 7F64            1753             MOV     R7,#064H
0000E0 7E00            1754             MOV     R6,#00H
0000E2 120000     E    1755             LCALL   _mdelay
                       1756     ;       //}
                       1757     ;       }
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    28

                       1758                             ; SOURCE LINE # 212
0000E5 020000     F    1759             LJMP    ?C0031
                       1760     ; END OF main
                       1761     
                       1762             END
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    29

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                    T Y P E  V A L U E     ATTRIBUTES

?_BITREV?BYTE . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
?_COMPUTE_W?BYTE. . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
?_FFT?BYTE. . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
?_PERMUTE_BITREV?BYTE . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
?C0001. . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?_BITREV?MAIN
?C0002. . . . . . . . . . . . . . . . .    C  ADDR  004DH     R   SEG=?PR?_BITREV?MAIN
?C0004. . . . . . . . . . . . . . . . .    C  ADDR  0054H     R   SEG=?PR?_BITREV?MAIN
?C0005. . . . . . . . . . . . . . . . .    C  ADDR  0006H     R   SEG=?PR?_LOG_2?MAIN
?C0006. . . . . . . . . . . . . . . . .    C  ADDR  0023H     R   SEG=?PR?_LOG_2?MAIN
?C0008. . . . . . . . . . . . . . . . .    C  ADDR  002AH     R   SEG=?PR?_LOG_2?MAIN
?C0009. . . . . . . . . . . . . . . . .    C  ADDR  0017H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0012. . . . . . . . . . . . . . . . .    C  ADDR  00DAH     R   SEG=?PR?_COMPUTE_W?MAIN
?C0013. . . . . . . . . . . . . . . . .    C  ADDR  001AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0015. . . . . . . . . . . . . . . . .    C  ADDR  008DH     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0016. . . . . . . . . . . . . . . . .    C  ADDR  0070H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0017. . . . . . . . . . . . . . . . .    C  ADDR  00A7H     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0018. . . . . . . . . . . . . . . . .    C  ADDR  0011H     R   SEG=?PR?_FFT?MAIN
?C0020. . . . . . . . . . . . . . . . .    C  ADDR  00BCH     R   SEG=?PR?_FFT_3?MAIN
?C0021. . . . . . . . . . . . . . . . .    C  ADDR  0040H     R   SEG=?PR?_FFT?MAIN
?C0023. . . . . . . . . . . . . . . . .    C  ADDR  0094H     R   SEG=?PR?_FFT_3?MAIN
?C0024. . . . . . . . . . . . . . . . .    C  ADDR  009DH     R   SEG=?PR?_FFT?MAIN
?C0027. . . . . . . . . . . . . . . . .    C  ADDR  00D6H     R   SEG=?PR?_FFT_3?MAIN
?C0028. . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?MAIN?MAIN
?C0031. . . . . . . . . . . . . . . . .    C  ADDR  0033H     R   SEG=?PR?MAIN?MAIN
?C0034. . . . . . . . . . . . . . . . .    C  ADDR  004BH     R   SEG=?PR?_BITREV?MAIN
?C0035. . . . . . . . . . . . . . . . .    C  ADDR  0021H     R   SEG=?PR?_LOG_2?MAIN
?C0036. . . . . . . . . . . . . . . . .    C  ADDR  00D7H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0037. . . . . . . . . . . . . . . . .    C  ADDR  009EH     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
?C0038. . . . . . . . . . . . . . . . .    C  ADDR  008BH     R   SEG=?PR?_FFT_3?MAIN
?C0039. . . . . . . . . . . . . . . . .    C  ADDR  00B3H     R   SEG=?PR?_FFT_3?MAIN
?C0040. . . . . . . . . . . . . . . . .    C  ADDR  0025H     R   SEG=?PR?MAIN?MAIN
?C?CASTF. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?FCASTI . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDOPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IMUL . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTOPTR. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?SIDIV. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C_STARTUP. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?DT?_BITREV?MAIN. . . . . . . . . . . .    D  SEG   000002H       REL=UNIT, ALN=BYTE
?DT?_COMPUTE_W?MAIN . . . . . . . . . .    D  SEG   00000AH       REL=UNIT, ALN=BYTE
?DT?_FFT?MAIN . . . . . . . . . . . . .    D  SEG   00000EH       REL=UNIT, ALN=BYTE
?DT?_PERMUTE_BITREV?MAIN. . . . . . . .    D  SEG   000008H       REL=UNIT, ALN=BYTE
?ID?_BITREV?MAIN. . . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_COMPUTE_W?MAIN . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_FFT?MAIN . . . . . . . . . . . . .    I  SEG   000016H       REL=UNIT, ALN=BYTE
?ID?_LOG_2?MAIN . . . . . . . . . . . .    I  SEG   000002H       REL=UNIT, ALN=BYTE
?ID?_PERMUTE_BITREV?MAIN. . . . . . . .    I  SEG   00000AH       REL=UNIT, ALN=BYTE
?ID?MAIN?MAIN . . . . . . . . . . . . .    I  SEG   000032H       REL=UNIT, ALN=BYTE
?PR?_BITREV?MAIN. . . . . . . . . . . .    C  SEG   000055H       REL=UNIT, ALN=BYTE
?PR?_COMPUTE_W?MAIN . . . . . . . . . .    C  SEG   0000DBH       REL=UNIT, ALN=BYTE
?PR?_FFT?MAIN . . . . . . . . . . . . .    C  SEG   0000F5H       REL=UNIT, ALN=BYTE
?PR?_FFT_2?MAIN . . . . . . . . . . . .    C  SEG   0000F7H       REL=UNIT, ALN=BYTE
?PR?_FFT_3?MAIN . . . . . . . . . . . .    C  SEG   0000D7H       REL=UNIT, ALN=BYTE
?PR?_LOG_2?MAIN . . . . . . . . . . . .    C  SEG   00002BH       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV?MAIN. . . . . . . .    C  SEG   0000A9H       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV_2?MAIN. . . . . . .    C  SEG   0000A8H       REL=UNIT, ALN=BYTE
?PR?MAIN?MAIN . . . . . . . . . . . . .    C  SEG   0000E8H       REL=UNIT, ALN=BYTE
_BITREV . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_BITREV?MAIN
_COMPUTE_W. . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_COMPUTE_W?MAIN
_COS. . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    30

_FFT. . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT?MAIN
_FFT_2. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT_2?MAIN
_FFT_3. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT_3?MAIN
_LOG_2. . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_LOG_2?MAIN
_MDELAY . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_PERMUTE_BITREV . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
_PERMUTE_BITREV_2 . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV_2?MAIN
_SIN. . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_STORE_CPU_RATE . . . . . . . . . . . .    C  ADDR  -------       EXT
A_IM?354. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_IM?462. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_FFT?MAIN
A_IM?578. . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?MAIN?MAIN
A_RE?353. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_RE?461. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_FFT?MAIN
A_RE?577. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?MAIN?MAIN
AC. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC . . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ADCCON. . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
ADCDATAH. . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
ADCDATAL. . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
ADCSTATIC . . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
AR2 . . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3 . . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR6 . . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7 . . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
B . . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
B?473 . . . . . . . . . . . . . . . . .    I  ADDR  0010H     R   SEG=?ID?_FFT?MAIN
BR?250. . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_COMPUTE_W?MAIN
BRI?356 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
C_T2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CE. . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
CK_CTRL . . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
CKCON . . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CLK1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
CLK2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
CP_RL2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CPRL2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CS. . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
CT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DATA? . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
DEV_OFFSET. . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
DIN0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
DIO0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
DIO1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
DIO2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
DIO3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
DIO4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
DIO5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
DIO6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
DIO7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
DIO8. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
DIO9. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
DOUT2 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
DPH . . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1. . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL . . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1. . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS . . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DR1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
DR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
DR2_CE. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
EA. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
ECO_PAGE_ADDR . . . . . . . . . . . . .    D  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    31

ECO_PAGE_MANAGER. . . . . . . . . . . .    C  ADDR  -------       EXT
ECO_PAGE_REGISTER1. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER2. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER3. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER4. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER5. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER6. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_REGISTER7. . . . . . . . . . .    I  ADDR  -------       EXT
ECO_PAGE_SPI_CONN . . . . . . . . . . .    D  ADDR  -------       EXT
EICON . . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
EIE . . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIP . . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
ES. . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ET0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
EWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EX2 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EX3 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EX4 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EX5 . . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EXEN2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
EXIF. . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
F0. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
G?472 . . . . . . . . . . . . . . . . .    I  ADDR  000EH     R   SEG=?ID?_FFT?MAIN
I?042 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_BITREV?MAIN
I?249 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_COMPUTE_W?MAIN
I?355 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
IE. . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0_N. . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
INT1_N. . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
IP. . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
K?475 . . . . . . . . . . . . . . . . .    I  ADDR  0014H     R   SEG=?ID?_FFT?MAIN
LOG2N?251 . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_COMPUTE_W?MAIN
LOG2N?357 . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
M?471 . . . . . . . . . . . . . . . . .    I  ADDR  000CH     R   SEG=?ID?_FFT?MAIN
MAIN. . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?MAIN?MAIN
MPAGE . . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
MT?474. . . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?_FFT?MAIN
N?246 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
N?352 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
N?460 . . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
N?576 . . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?MAIN?MAIN
NUMBITS?041 . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
OV. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
P . . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0. . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P0_ALT. . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
P0_DIR. . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
P1. . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    32

P1_0. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2. . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_ALT. . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
P1_DIR. . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
PCON. . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PS. . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PSW . . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PWM . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
PWMCON. . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
PWMDUTY . . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
PWR_UP. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
PX0 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1 . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
PX2 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PX3 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PX4 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PX5 . . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
RADIO . . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
RB8 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RCAP2H. . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RCAP2L. . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
REGX_CTRL . . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
REGX_LSB. . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
REGX_MSB. . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
REN . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
RES?145 . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_LOG_2?MAIN
REV?043 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_BITREV?MAIN
RI. . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RS0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RSTREAS . . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
RXD . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
SBUF. . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SCON. . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SM0 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM1 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM2 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SP. . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPC_FNC . . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
SPI_CTRL. . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
SPI_DATA. . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
SPICLK. . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
T0. . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
T1. . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
T1_1V2. . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
T2. . . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
T2_1V2. . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
T2CON . . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T_IM?359. . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_IM?470. . . . . . . . . . . . . . . .    I  ADDR  000AH     R   SEG=?ID?_FFT?MAIN
T_RE?358. . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_RE?469. . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_FFT?MAIN
TB8 . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TCLK. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON. . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TEST_MODE . . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
TF0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0 . . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/08/09 01:21:43 PAGE    33

TH1 . . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI. . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TICK_DV . . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
TL0 . . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1 . . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2 . . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD. . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1 . . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2 . . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
U_IM?468. . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_FFT?MAIN
U_RE?467. . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_FFT?MAIN
W_IM?248. . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_COMPUTE_W?MAIN
W_IM?464. . . . . . . . . . . . . . . .    D  ADDR  000BH     R   SEG=?DT?_FFT?MAIN
W_IM?466. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_FFT?MAIN
W_IM?580. . . . . . . . . . . . . . . .    I  ADDR  002AH     R   SEG=?ID?MAIN?MAIN
W_RE?247. . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_COMPUTE_W?MAIN
W_RE?463. . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_FFT?MAIN
W_RE?465. . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_FFT?MAIN
W_RE?579. . . . . . . . . . . . . . . .    I  ADDR  0022H     R   SEG=?ID?MAIN?MAIN
WDTI. . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).

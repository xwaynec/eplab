; ./adc.src generated from: ..\..\include\adc\adc.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.exe ..\..\include\adc\adc.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT INCDIR(../../Include) PRINT(./adc.lst) PREPRINT(./adc.i) SRC(./adc.src)

$NOMOD51

NAME	ADC

PWR_UP	BIT	0A0H.7
P0	DATA	080H
P1	DATA	090H
AC	BIT	0D0H.6
T0	BIT	080H.5
SPI_CTRL	DATA	0B3H
T1	BIT	080H.6
EA	BIT	0A8H.7
T2	BIT	090H.0
CE	BIT	0A0H.6
DEV_OFFSET	DATA	0BEH
CLK1	BIT	0A0H.1
DIN0	BIT	090H.2
CLK2	BIT	0A0H.5
DIO0	BIT	090H.0
DPH0	DATA	083H
DIO1	BIT	090H.1
IE	DATA	0A8H
DPH1	DATA	085H
DIO2	BIT	080H.0
DIO3	BIT	080H.1
P0_0	BIT	080H.0
P1_0	BIT	090H.0
DIO4	BIT	080H.2
P0_1	BIT	080H.1
DPL0	DATA	082H
P1_1	BIT	090H.1
DIO5	BIT	080H.3
P0_2	BIT	080H.2
DPL1	DATA	084H
P1_2	BIT	090H.2
DIO6	BIT	080H.4
P0_3	BIT	080H.3
DIO7	BIT	080H.5
P0_4	BIT	080H.4
ADCSTATIC	DATA	0A4H
DIO8	BIT	080H.6
P0_5	BIT	080H.5
EXF2	BIT	0C8H.6
CS	BIT	0A0H.3
DIO9	BIT	080H.7
P0_6	BIT	080H.6
P0_7	BIT	080H.7
ES	BIT	0A8H.4
IP	DATA	0B8H
DATA?	BIT	0A0H.0
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
T1_1V2	DATA	0BCH
SPC_FNC	DATA	08FH
T2_1V2	DATA	0BDH
RCAP2H	DATA	0CBH
PS	BIT	0B8H.4
SP	DATA	081H
OV	BIT	0D0H.2
CK_CTRL	DATA	0B6H
RCAP2L	DATA	0CAH
TICK_DV	DATA	0B5H
RSTREAS	DATA	0B1H
C_T2	BIT	0C8H.1
EWDI	BIT	0E8H.4
ADCCON	DATA	0A1H
RCLK	BIT	0C8H.5
ADCDATAH	DATA	0A2H
EXIF	DATA	091H
TCLK	BIT	0C8H.4
DR2_CE	BIT	0A0H.6
ADCDATAL	DATA	0A3H
SBUF	DATA	099H
PCON	DATA	087H
SCON	DATA	098H
PWDI	BIT	0F8H.4
TMOD	DATA	089H
TCON	DATA	088H
WDTI	BIT	0D8H.3
PWMDUTY	DATA	0AAH
IE0	BIT	088H.1
IE1	BIT	088H.3
P0_DIR	DATA	094H
B	DATA	0F0H
P1_DIR	DATA	096H
P0_ALT	DATA	095H
P1_ALT	DATA	097H
CP_RL2	BIT	0C8H.0
DR1	BIT	0A0H.2
ACC	DATA	0E0H
DR2	BIT	0A0H.6
TEST_MODE	DATA	0B7H
SPICLK	DATA	0B4H
CT2	BIT	0C8H.1
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
INT0_N	BIT	080H.3
ET2	BIT	0A8H.5
TF1	BIT	088H.7
INT1_N	BIT	080H.4
TF2	BIT	0C8H.7
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
IT0	BIT	088H.0
TH1	DATA	08DH
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
TH2	DATA	0CDH
REGX_CTRL	DATA	0ADH
EX2	BIT	0E8H.0
P	BIT	0D0H.0
EX3	BIT	0E8H.1
SM0	BIT	098H.7
TL0	DATA	08AH
EX4	BIT	0E8H.2
SM1	BIT	098H.6
TL1	DATA	08BH
EX5	BIT	0E8H.3
SM2	BIT	098H.5
TL2	DATA	0CCH
EIE	DATA	0E8H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
PT2	BIT	0B8H.5
TR0	BIT	088H.4
PWMCON	DATA	0A9H
TR1	BIT	088H.6
TR2	BIT	0C8H.2
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
PX2	BIT	0F8H.0
PX3	BIT	0F8H.1
PX4	BIT	0F8H.2
DPH	DATA	083H
PX5	BIT	0F8H.3
EIP	DATA	0F8H
DPL	DATA	082H
EXEN2	BIT	0C8H.3
CPRL2	BIT	0C8H.0
REN	BIT	098H.4
T2CON	DATA	0C8H
DPS	DATA	086H
SPI_DATA	DATA	0B2H
MPAGE	DATA	092H
RXD	BIT	080H.1
DOUT2	BIT	0A0H.4
EICON	DATA	0D8H
CKCON	DATA	08EH
TXD	BIT	080H.2
RADIO	DATA	0A0H
PWM	BIT	080H.7
F0	BIT	0D0H.5
F1	BIT	0D0H.1
REGX_LSB	DATA	0ACH
PSW	DATA	0D0H
REGX_MSB	DATA	0ABH
?PR?_adc_init?ADC    SEGMENT CODE 
?PR?p_adc_read?ADC   SEGMENT CODE 
?PR?_adc_read?ADC    SEGMENT CODE 
	PUBLIC	_adc_read
	PUBLIC	_adc_init
; /*
;  * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
;  * Copyright (c) 2008 National Tsing Hua University (NTHU) 
;  * Permission to copy, modify, and distribute this program is granted 
;  * for noncommercial purposes, provided the author(s) and copyright 
;  * notice are retained. All other uses require explicit written 
;  * permission from NTHU. 
;  *
;  * A/D converter driver 
;  * Min-Hua Chen <orca.chen@gmail.com> 
;  * 2007/8/1
;  */
; 
; #include <Eco/reg24e1.h>
; #include <adc/adc.h>
; 
; /* adc_init - initialize A/D converter
;  * @CLK: clock rate, 1/n of CPU clock rate
;  * @resol: data resolution
;  * @extref: internal or external reference voltage
;  */
; void adc_init(char clk, char resol, char extref)

	RSEG  ?PR?_adc_init?ADC
_adc_init:
			; SOURCE LINE # 22
;---- Variable 'clk?040' assigned to Register 'R7' ----
;---- Variable 'extref?042' assigned to Register 'R3' ----
;---- Variable 'resol?041' assigned to Register 'R5' ----
; {
			; SOURCE LINE # 23
; 	/* ADCCON init value: 0x80 */
; 	ADCCON |= ADC_PWR_ON;	/* power on */
			; SOURCE LINE # 25
	ORL  	ADCCON,#020H
; 	ADCCON |= extref;	/* use external reference */
			; SOURCE LINE # 26
	MOV  	A,R3
	ORL  	ADCCON,A
; 	ADCSTATIC &= ~(1 << 5);	/* clean [5] bit */
			; SOURCE LINE # 27
	ANL  	ADCSTATIC,#0DFH
; 	ADCSTATIC |= clk;	/* setup ADC clock */
			; SOURCE LINE # 28
	MOV  	A,R7
	ORL  	ADCSTATIC,A
; 	ADCSTATIC &= ~0x03;	/* clean [0:1] bits */
			; SOURCE LINE # 29
	ANL  	ADCSTATIC,#0FCH
; 	ADCSTATIC |= resol;	/* 12-bit resolution */
			; SOURCE LINE # 30
	MOV  	A,R5
	ORL  	ADCSTATIC,A
; }
			; SOURCE LINE # 31
	RET  	
; END OF _adc_init

; 
; static int p_adc_read()

	RSEG  ?PR?p_adc_read?ADC
p_adc_read:
	USING	0
			; SOURCE LINE # 33
; {
			; SOURCE LINE # 34
; 	int resol = ADCSTATIC & 0x03;	/* get resolution */
			; SOURCE LINE # 35
	MOV  	A,ADCSTATIC
	ANL  	A,#03H
	MOV  	R7,A
;---- Variable 'resol?143' assigned to Register 'R6/R7' ----
; 	int val = 0;
			; SOURCE LINE # 36
;---- Variable 'val?144' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
; 	switch (resol) {
			; SOURCE LINE # 37
	JNZ  	?C0002
	MOV  	A,R7
	DEC  	A
	JZ   	?C0004
	DEC  	A
	JZ   	?C0005
	DEC  	A
	JZ   	?C0006
	ADD  	A,#03H
	JNZ  	?C0002
; 	case 0:
			; SOURCE LINE # 38
; 	case 1:
			; SOURCE LINE # 39
?C0004:
; 		/* data is in ADCDATAH only */
; 		val = ADCDATAH;
			; SOURCE LINE # 41
	MOV  	R7,ADCDATAH
	MOV  	R4,#00H
	MOV  	R5,AR7
; 		break;
			; SOURCE LINE # 42
	SJMP 	?C0002
; 	case 2:
			; SOURCE LINE # 43
?C0005:
; 		/* data is ADCDATAH + ADCDATA[7:6] */
; 		val = (ADCDATAH << 2);
			; SOURCE LINE # 45
	MOV  	R7,ADCDATAH
	MOV  	A,R7
	MOV  	B,#04H
	MUL  	AB
	MOV  	R5,A
	MOV  	R4,B
; 		val += (ADCDATAL >> 6);
			; SOURCE LINE # 46
	MOV  	A,ADCDATAL
	SWAP 	A
	RRC  	A
	RRC  	A
	ANL  	A,#03H
	ADD  	A,R5
	CLR  	A
	ADDC 	A,R4
; 	case 3:
			; SOURCE LINE # 47
?C0006:
; 		/* data is ADCDATAH + ADCDATA[7:4] */
; 		val = (ADCDATAH << 4);
			; SOURCE LINE # 49
	MOV  	R7,ADCDATAH
	MOV  	A,R7
	MOV  	B,#010H
	MUL  	AB
	MOV  	R5,A
	MOV  	R4,B
; 		val += (ADCDATAL >> 4);
			; SOURCE LINE # 50
	MOV  	A,ADCDATAL
	SWAP 	A
	ANL  	A,#0FH
	ADD  	A,R5
	MOV  	R5,A
	CLR  	A
	ADDC 	A,R4
	MOV  	R4,A
; 	}
			; SOURCE LINE # 51
?C0002:
; 	return val;
			; SOURCE LINE # 52
	MOV  	R6,AR4
	MOV  	R7,AR5
; }
			; SOURCE LINE # 53
?C0007:
	RET  	
; END OF p_adc_read

; 
; int adc_read(char in_pin)

	RSEG  ?PR?_adc_read?ADC
_adc_read:
	USING	0
			; SOURCE LINE # 55
;---- Variable 'in_pin?245' assigned to Register 'R7' ----
; {
			; SOURCE LINE # 56
; 	int ret = 0;
			; SOURCE LINE # 57
;---- Variable 'ret?246' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
; 	/* check data if necessary */
; 	ADCCON &= ~0x07;	/* clean [0:2] bits */
			; SOURCE LINE # 59
	ANL  	ADCCON,#0F8H
; 	ADCCON |= in_pin;	/* select input pin */
			; SOURCE LINE # 60
	MOV  	A,R7
	ORL  	ADCCON,A
; 	ADC_START();	/* start A/D conversion */
			; SOURCE LINE # 61
	ANL  	ADCCON,#07FH
	ORL  	ADCCON,#080H
?C0011:
; 
; 	while (!(EXIF & ADC_EOC))	/* wait until done */
			; SOURCE LINE # 63
	MOV  	A,EXIF
	JNB  	ACC.4,?C0011
?C0012:
; 		;
; 
; 	ret = p_adc_read();	/* read ADCDATAH/L register */
			; SOURCE LINE # 66
	;LCALL----------start----------
;	LCALL	p_adc_read

	MOV	ECO_PAGE_SPI_CONN,SPI_CTRL
	MOV	ECO_PAGE_ADDR,#HIGH (p_adc_read)
	MOV	ECO_PAGE_ADDR,#LOW (p_adc_read)
	LCALL	eco_page_manager
	;LCALL----------end----------

; 
; 	EXIF &= ~ADC_EOC;	/* clear EXIF.4 */
			; SOURCE LINE # 68
	ANL  	EXIF,#0EFH
; 	return ret;
			; SOURCE LINE # 69
; }
			; SOURCE LINE # 70
?C0013:
	RET  	
; END OF _adc_read

	END

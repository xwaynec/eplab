C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE ECO_PAGE
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe .\eco_page.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT INCDIR(../../In
                    -clude) SRC(./eco_page.src)

line level    source

   1          /*
   2           * Author(s): Wei-Han Chen (Embedded Platform Lab, NTHU)
   3           * Copyright (c) 2009 National Tsing Hua University (NTHU) 
   4           * Permission to copy, modify, and distribute this program is granted 
   5           * for noncommercial purposes, provided the author(s) and copyright
   6           * notice are retained. All other uses require explicit written
   7           * permission from NTHU. 
   8           *
   9           * Eco Paging Library 
  10           *
  11           * Wei-Han Chen <xwaynec@gmail.com> 
  12           * 2009/2/13
  13           */
  14          
  15          #include "eco_page.h"
   1      =1  /*
   2      =1   * Author(s): Wei-Han Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2009 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * Eco Paging Library
  10      =1   *
  11      =1   * Wei-Han Chen <xwaynec@gmail.com> 
  12      =1   * 2009/2/13
  13      =1   */
  14      =1  
  15      =1  #ifndef __ECO_PAGE_H
  16      =1  #define __ECO_PAGE_H
  17      =1  
  18      =1  
  19      =1  #include "Eco/reg24e1.h"
   1      =2  #ifndef REGnRF24E1_H
   2      =2  #define REGnRF24E1_H
   3      =2  
   4      =2  /*  BYTE Registers  */
   5      =2  sfr P0                  = 0x80 ;
   6      =2  sfr SP                  = 0x81 ;
   7      =2  sfr DPL                 = 0x82 ;
   8      =2  sfr DPL0                = 0x82 ;
   9      =2  sfr DPH                 = 0x83 ;
  10      =2  sfr DPH0                = 0x83 ;
  11      =2  sfr DPL1                = 0x84 ;
  12      =2  sfr DPH1                = 0x85 ;
  13      =2  sfr DPS                 = 0x86 ;
  14      =2  sfr PCON                = 0x87 ;
  15      =2  sfr TCON                = 0x88 ;
  16      =2  sfr TMOD                = 0x89 ;
  17      =2  sfr TL0                 = 0x8A ;
  18      =2  sfr TL1                 = 0x8B ;
  19      =2  sfr TH0                 = 0x8C ;
  20      =2  sfr TH1                 = 0x8D ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 2   

  21      =2  sfr CKCON               = 0x8E ;
  22      =2  sfr SPC_FNC             = 0x8F ;
  23      =2  sfr P1          = 0x90 ;
  24      =2  sfr EXIF                = 0x91 ;
  25      =2  sfr MPAGE               = 0x92 ;
  26      =2  sfr P0_DIR              = 0x94 ;
  27      =2  sfr P0_ALT              = 0x95 ;
  28      =2  sfr P1_DIR              = 0x96 ;
  29      =2  sfr P1_ALT              = 0x97 ;
  30      =2  sfr SCON                = 0x98 ;
  31      =2  sfr SBUF                = 0x99 ;
  32      =2  sfr RADIO               = 0xA0 ;
  33      =2  sfr ADCCON              = 0xA1 ;
  34      =2  sfr ADCDATAH    = 0xA2 ;
  35      =2  sfr ADCDATAL    = 0xA3 ;
  36      =2  sfr ADCSTATIC   = 0xA4 ;
  37      =2  sfr IE                  = 0xA8 ;
  38      =2  sfr PWMCON              = 0xA9 ;
  39      =2  sfr PWMDUTY             = 0xAA ;
  40      =2  sfr REGX_MSB    = 0xAB ;
  41      =2  sfr REGX_LSB    = 0xAC ;
  42      =2  sfr REGX_CTRL   = 0xAD ;
  43      =2  sfr RSTREAS             = 0xB1 ;
  44      =2  sfr SPI_DATA    = 0xB2 ;
  45      =2  sfr SPI_CTRL    = 0xB3 ;
  46      =2  sfr SPICLK              = 0xB4 ;
  47      =2  sfr TICK_DV             = 0xB5 ;
  48      =2  sfr CK_CTRL             = 0xB6 ;
  49      =2  sfr TEST_MODE   = 0xB7 ;
  50      =2  sfr IP                  = 0xB8 ;
  51      =2  sfr T1_1V2              = 0xBC ;
  52      =2  sfr T2_1V2              = 0xBD ;
  53      =2  sfr DEV_OFFSET  = 0xBE ;
  54      =2  sfr T2CON               = 0xC8 ;
  55      =2  sfr RCAP2L              = 0xCA ;
  56      =2  sfr RCAP2H              = 0xCB ;
  57      =2  sfr TL2                 = 0xCC ;
  58      =2  sfr TH2                 = 0xCD ;
  59      =2  sfr PSW                 = 0xD0 ;
  60      =2  sfr EICON               = 0xD8 ;
  61      =2  sfr ACC                 = 0xE0 ;
  62      =2  sfr EIE                 = 0xE8 ;
  63      =2  sfr B                   = 0xF0 ;
  64      =2  sfr EIP                 = 0xF8 ;
  65      =2  
  66      =2  
  67      =2  /*  BIT Registers  */
  68      =2  /* P0 */
  69      =2  sbit P0_0       = 0x80  ;
  70      =2  sbit DIO2       = 0x80  ;
  71      =2  sbit P0_1       = 0x81  ;
  72      =2  sbit RXD        = 0x81  ;
  73      =2  sbit DIO3       = 0x81  ;
  74      =2  sbit P0_2       = 0x82  ;
  75      =2  sbit TXD        = 0x82  ;
  76      =2  sbit DIO4       = 0x82  ;
  77      =2  sbit P0_3       = 0x83  ;
  78      =2  sbit INT0_N     = 0x83  ;
  79      =2  sbit DIO5       = 0x83  ;
  80      =2  sbit P0_4       = 0x84  ;
  81      =2  sbit INT1_N     = 0x84  ;
  82      =2  sbit DIO6       = 0x84  ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 3   

  83      =2  sbit P0_5       = 0x85  ;
  84      =2  sbit T0         = 0x85  ;
  85      =2  sbit DIO7       = 0x85  ;
  86      =2  sbit P0_6       = 0x86  ;
  87      =2  sbit T1         = 0x86  ;
  88      =2  sbit DIO8       = 0x86  ;
  89      =2  sbit P0_7       = 0x87  ;
  90      =2  sbit PWM        = 0x87  ;
  91      =2  sbit DIO9       = 0x87  ;
  92      =2  
  93      =2  /*  TCON  */
  94      =2  sbit IT0        = 0x88 ;
  95      =2  sbit IE0        = 0x89 ;
  96      =2  sbit IT1        = 0x8A ;
  97      =2  sbit IE1        = 0x8B ;
  98      =2  sbit TR0        = 0x8C ;
  99      =2  sbit TF0        = 0x8D ;
 100      =2  sbit TR1        = 0x8E ;
 101      =2  sbit TF1        = 0x8F ;
 102      =2  
 103      =2  /* P1 */
 104      =2  sbit P1_0       = 0x90 ;
 105      =2  sbit T2         = 0x90 ;
 106      =2  sbit DIO0       = 0x90 ;
 107      =2  sbit P1_1       = 0x91 ;
 108      =2  sbit DIO1       = 0x91 ;
 109      =2  sbit P1_2       = 0x92 ;
 110      =2  sbit DIN0       = 0x92 ;
 111      =2  
 112      =2  /*  SCON  */
 113      =2  sbit RI         = 0x98 ;
 114      =2  sbit TI         = 0x99 ;
 115      =2  sbit RB8        = 0x9A ;
 116      =2  sbit TB8        = 0x9B ;
 117      =2  sbit REN        = 0x9C ;
 118      =2  sbit SM2        = 0x9D ;
 119      =2  sbit SM1        = 0x9E ;
 120      =2  sbit SM0        = 0x9F ;
 121      =2  
 122      =2  /* P2 */
 123      =2  sbit DATA       = 0xA0 ;
 124      =2  sbit CLK1       = 0xA1 ;
 125      =2  sbit DR1        = 0xA2 ;
 126      =2  sbit CS         = 0xA3 ;
 127      =2  sbit DOUT2      = 0xA4 ;
 128      =2  sbit CLK2       = 0xA5 ;
 129      =2  sbit DR2_CE     = 0xA6 ;
 130      =2  sbit DR2        = 0xA6 ;
 131      =2  sbit CE         = 0xA6 ;
 132      =2  sbit PWR_UP     = 0xA7 ;
 133      =2  
 134      =2  /*  IE   */
 135      =2  sbit EX0        = 0xA8 ;
 136      =2  sbit ET0        = 0xA9 ;
 137      =2  sbit EX1        = 0xAA ;
 138      =2  sbit ET1        = 0xAB ;
 139      =2  sbit ES         = 0xAC ;
 140      =2  sbit ET2        = 0xAD ;
 141      =2  sbit EA         = 0xAF ;
 142      =2  
 143      =2  /*  IP   */
 144      =2  sbit PX0        = 0xB8 ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 4   

 145      =2  sbit PT0        = 0xB9 ;
 146      =2  sbit PX1        = 0xBA ;
 147      =2  sbit PT1        = 0xBB ;
 148      =2  sbit PS         = 0xBC ;
 149      =2  sbit PT2        = 0xBD ;
 150      =2  
 151      =2  /*  T2CON  */
 152      =2  sbit CP_RL2     = 0xC8 ;
 153      =2  sbit CPRL2      = 0xC8 ;
 154      =2  sbit C_T2       = 0xC9 ;
 155      =2  sbit CT2        = 0xC9 ;
 156      =2  sbit TR2        = 0xCA ;
 157      =2  sbit EXEN2      = 0xCB ;
 158      =2  sbit TCLK       = 0xCC ;
 159      =2  sbit RCLK       = 0xCD ;
 160      =2  sbit EXF2       = 0xCE ;
 161      =2  sbit TF2        = 0xCF ;
 162      =2  
 163      =2  /*  PSW   */
 164      =2  sbit P          = 0xD0 ;
 165      =2  sbit F1         = 0xD1 ;
 166      =2  sbit OV         = 0xD2 ;
 167      =2  sbit RS0        = 0xD3 ;
 168      =2  sbit RS1        = 0xD4 ;
 169      =2  sbit F0         = 0xD5 ;
 170      =2  sbit AC         = 0xD6 ;
 171      =2  sbit CY         = 0xD7 ;
 172      =2  
 173      =2  /*  EICON  */
 174      =2  sbit WDTI       = 0xDB ;
 175      =2  
 176      =2  /*  EIE  */
 177      =2  sbit EX2        = 0xE8 ;
 178      =2  sbit EX3        = 0xE9 ;
 179      =2  sbit EX4        = 0xEA ;
 180      =2  sbit EX5        = 0xEB ;
 181      =2  sbit EWDI       = 0xEC ;
 182      =2  
 183      =2  /*  EIP  */
 184      =2  sbit PX2        = 0xF8 ;
 185      =2  sbit PX3        = 0xF9 ;
 186      =2  sbit PX4        = 0xFA ;
 187      =2  sbit PX5        = 0xFB ;
 188      =2  sbit PWDI       = 0xFC ;
 189      =2  
 190      =2  
 191      =2  /* BIT definitions for bits that are not directly accessible */
 192      =2  /* PCON bits */
 193      =2  #define IDL             0x01
 194      =2  #define PD              0x02
 195      =2  #define GF0             0x04
 196      =2  #define GF1             0x08
 197      =2  #define SMOD            0x80
 198      =2  
 199      =2  /* TMOD bits */
 200      =2  #define T0_M0           0x01
 201      =2  #define T0_M1           0x02
 202      =2  #define T0_CT           0x04
 203      =2  #define T0_GATE         0x08
 204      =2  #define T1_M0           0x10
 205      =2  #define T1_M1           0x20
 206      =2  #define T1_CT           0x40
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 5   

 207      =2  #define T1_GATE         0x80
 208      =2  
 209      =2  #define T0_MASK         0x0F
 210      =2  #define T1_MASK         0xF0
 211      =2  
 212      =2  /* Interrupt numbers: address = (number * 8) + 3 */
 213      =2  #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
 214      =2  #define TF0_VECTOR      1       /* 0x0b timer 0 */
 215      =2  #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
 216      =2  #define TF1_VECTOR      3       /* 0x1b timer 1 */
 217      =2  #define SI0_VECTOR      4       /* 0x23 serial port 0 */
 218      =2  
 219      =2  #endif
  20      =1  #include "Eco/eco_sys.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  10      =2   */
  11      =2  #ifndef _ECO_SYS_H_
  12      =2  #define _ECO_SYS_H_
  13      =2  
  14      =2  #include <Eco/reg24e1.h>
   1      =3  #ifndef REGnRF24E1_H
           =3 #define REGnRF24E1_H
           =3 
           =3 /*  BYTE Registers  */
           =3 sfr P0                  = 0x80 ;
           =3 sfr SP                  = 0x81 ;
           =3 sfr DPL                 = 0x82 ;
           =3 sfr DPL0                = 0x82 ;
           =3 sfr DPH                 = 0x83 ;
           =3 sfr DPH0                = 0x83 ;
           =3 sfr DPL1                = 0x84 ;
           =3 sfr DPH1                = 0x85 ;
           =3 sfr DPS                 = 0x86 ;
           =3 sfr PCON                = 0x87 ;
           =3 sfr TCON                = 0x88 ;
           =3 sfr TMOD                = 0x89 ;
           =3 sfr TL0                 = 0x8A ;
           =3 sfr TL1                 = 0x8B ;
           =3 sfr TH0                 = 0x8C ;
           =3 sfr TH1                 = 0x8D ;
           =3 sfr CKCON               = 0x8E ;
           =3 sfr SPC_FNC             = 0x8F ;
           =3 sfr P1          = 0x90 ;
           =3 sfr EXIF                = 0x91 ;
           =3 sfr MPAGE               = 0x92 ;
           =3 sfr P0_DIR              = 0x94 ;
           =3 sfr P0_ALT              = 0x95 ;
           =3 sfr P1_DIR              = 0x96 ;
           =3 sfr P1_ALT              = 0x97 ;
           =3 sfr SCON                = 0x98 ;
           =3 sfr SBUF                = 0x99 ;
           =3 sfr RADIO               = 0xA0 ;
           =3 sfr ADCCON              = 0xA1 ;
           =3 sfr ADCDATAH    = 0xA2 ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 6   

           =3 sfr ADCDATAL    = 0xA3 ;
           =3 sfr ADCSTATIC   = 0xA4 ;
           =3 sfr IE                  = 0xA8 ;
           =3 sfr PWMCON              = 0xA9 ;
           =3 sfr PWMDUTY             = 0xAA ;
           =3 sfr REGX_MSB    = 0xAB ;
           =3 sfr REGX_LSB    = 0xAC ;
           =3 sfr REGX_CTRL   = 0xAD ;
           =3 sfr RSTREAS             = 0xB1 ;
           =3 sfr SPI_DATA    = 0xB2 ;
           =3 sfr SPI_CTRL    = 0xB3 ;
           =3 sfr SPICLK              = 0xB4 ;
           =3 sfr TICK_DV             = 0xB5 ;
           =3 sfr CK_CTRL             = 0xB6 ;
           =3 sfr TEST_MODE   = 0xB7 ;
           =3 sfr IP                  = 0xB8 ;
           =3 sfr T1_1V2              = 0xBC ;
           =3 sfr T2_1V2              = 0xBD ;
           =3 sfr DEV_OFFSET  = 0xBE ;
           =3 sfr T2CON               = 0xC8 ;
           =3 sfr RCAP2L              = 0xCA ;
           =3 sfr RCAP2H              = 0xCB ;
           =3 sfr TL2                 = 0xCC ;
           =3 sfr TH2                 = 0xCD ;
           =3 sfr PSW                 = 0xD0 ;
           =3 sfr EICON               = 0xD8 ;
           =3 sfr ACC                 = 0xE0 ;
           =3 sfr EIE                 = 0xE8 ;
           =3 sfr B                   = 0xF0 ;
           =3 sfr EIP                 = 0xF8 ;
           =3 
           =3 
           =3 /*  BIT Registers  */
           =3 /* P0 */
           =3 sbit P0_0       = 0x80  ;
           =3 sbit DIO2       = 0x80  ;
           =3 sbit P0_1       = 0x81  ;
           =3 sbit RXD        = 0x81  ;
           =3 sbit DIO3       = 0x81  ;
           =3 sbit P0_2       = 0x82  ;
           =3 sbit TXD        = 0x82  ;
           =3 sbit DIO4       = 0x82  ;
           =3 sbit P0_3       = 0x83  ;
           =3 sbit INT0_N     = 0x83  ;
           =3 sbit DIO5       = 0x83  ;
           =3 sbit P0_4       = 0x84  ;
           =3 sbit INT1_N     = 0x84  ;
           =3 sbit DIO6       = 0x84  ;
           =3 sbit P0_5       = 0x85  ;
           =3 sbit T0         = 0x85  ;
           =3 sbit DIO7       = 0x85  ;
           =3 sbit P0_6       = 0x86  ;
           =3 sbit T1         = 0x86  ;
           =3 sbit DIO8       = 0x86  ;
           =3 sbit P0_7       = 0x87  ;
           =3 sbit PWM        = 0x87  ;
           =3 sbit DIO9       = 0x87  ;
           =3 
           =3 /*  TCON  */
           =3 sbit IT0        = 0x88 ;
           =3 sbit IE0        = 0x89 ;
           =3 sbit IT1        = 0x8A ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 7   

           =3 sbit IE1        = 0x8B ;
           =3 sbit TR0        = 0x8C ;
           =3 sbit TF0        = 0x8D ;
           =3 sbit TR1        = 0x8E ;
           =3 sbit TF1        = 0x8F ;
           =3 
           =3 /* P1 */
           =3 sbit P1_0       = 0x90 ;
           =3 sbit T2         = 0x90 ;
           =3 sbit DIO0       = 0x90 ;
           =3 sbit P1_1       = 0x91 ;
           =3 sbit DIO1       = 0x91 ;
           =3 sbit P1_2       = 0x92 ;
           =3 sbit DIN0       = 0x92 ;
           =3 
           =3 /*  SCON  */
           =3 sbit RI         = 0x98 ;
           =3 sbit TI         = 0x99 ;
           =3 sbit RB8        = 0x9A ;
           =3 sbit TB8        = 0x9B ;
           =3 sbit REN        = 0x9C ;
           =3 sbit SM2        = 0x9D ;
           =3 sbit SM1        = 0x9E ;
           =3 sbit SM0        = 0x9F ;
           =3 
           =3 /* P2 */
           =3 sbit DATA       = 0xA0 ;
           =3 sbit CLK1       = 0xA1 ;
           =3 sbit DR1        = 0xA2 ;
           =3 sbit CS         = 0xA3 ;
           =3 sbit DOUT2      = 0xA4 ;
           =3 sbit CLK2       = 0xA5 ;
           =3 sbit DR2_CE     = 0xA6 ;
           =3 sbit DR2        = 0xA6 ;
           =3 sbit CE         = 0xA6 ;
           =3 sbit PWR_UP     = 0xA7 ;
           =3 
           =3 /*  IE   */
           =3 sbit EX0        = 0xA8 ;
           =3 sbit ET0        = 0xA9 ;
           =3 sbit EX1        = 0xAA ;
           =3 sbit ET1        = 0xAB ;
           =3 sbit ES         = 0xAC ;
           =3 sbit ET2        = 0xAD ;
           =3 sbit EA         = 0xAF ;
           =3 
           =3 /*  IP   */
           =3 sbit PX0        = 0xB8 ;
           =3 sbit PT0        = 0xB9 ;
           =3 sbit PX1        = 0xBA ;
           =3 sbit PT1        = 0xBB ;
           =3 sbit PS         = 0xBC ;
           =3 sbit PT2        = 0xBD ;
           =3 
           =3 /*  T2CON  */
           =3 sbit CP_RL2     = 0xC8 ;
           =3 sbit CPRL2      = 0xC8 ;
           =3 sbit C_T2       = 0xC9 ;
           =3 sbit CT2        = 0xC9 ;
           =3 sbit TR2        = 0xCA ;
           =3 sbit EXEN2      = 0xCB ;
           =3 sbit TCLK       = 0xCC ;
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 8   

           =3 sbit RCLK       = 0xCD ;
           =3 sbit EXF2       = 0xCE ;
           =3 sbit TF2        = 0xCF ;
           =3 
           =3 /*  PSW   */
           =3 sbit P          = 0xD0 ;
           =3 sbit F1         = 0xD1 ;
           =3 sbit OV         = 0xD2 ;
           =3 sbit RS0        = 0xD3 ;
           =3 sbit RS1        = 0xD4 ;
           =3 sbit F0         = 0xD5 ;
           =3 sbit AC         = 0xD6 ;
           =3 sbit CY         = 0xD7 ;
           =3 
           =3 /*  EICON  */
           =3 sbit WDTI       = 0xDB ;
           =3 
           =3 /*  EIE  */
           =3 sbit EX2        = 0xE8 ;
           =3 sbit EX3        = 0xE9 ;
           =3 sbit EX4        = 0xEA ;
           =3 sbit EX5        = 0xEB ;
           =3 sbit EWDI       = 0xEC ;
           =3 
           =3 /*  EIP  */
           =3 sbit PX2        = 0xF8 ;
           =3 sbit PX3        = 0xF9 ;
           =3 sbit PX4        = 0xFA ;
           =3 sbit PX5        = 0xFB ;
           =3 sbit PWDI       = 0xFC ;
           =3 
           =3 
           =3 /* BIT definitions for bits that are not directly accessible */
           =3 /* PCON bits */
           =3 #define IDL             0x01
           =3 #define PD              0x02
           =3 #define GF0             0x04
           =3 #define GF1             0x08
           =3 #define SMOD            0x80
           =3 
           =3 /* TMOD bits */
           =3 #define T0_M0           0x01
           =3 #define T0_M1           0x02
           =3 #define T0_CT           0x04
           =3 #define T0_GATE         0x08
           =3 #define T1_M0           0x10
           =3 #define T1_M1           0x20
           =3 #define T1_CT           0x40
           =3 #define T1_GATE         0x80
           =3 
           =3 #define T0_MASK         0x0F
           =3 #define T1_MASK         0xF0
           =3 
           =3 /* Interrupt numbers: address = (number * 8) + 3 */
           =3 #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
           =3 #define TF0_VECTOR      1       /* 0x0b timer 0 */
           =3 #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
           =3 #define TF1_VECTOR      3       /* 0x1b timer 1 */
           =3 #define SI0_VECTOR      4       /* 0x23 serial port 0 */
           =3 
           =3 #endif
  15      =2  
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 9   

  16      =2  #define blink_led() P0 ^= 0x20
  17      =2  
  18      =2  #define eco_dev_blink_led() P0 ^= 0x08
  19      =2  
  20      =2  #endif 
  21      =1  #include "utils/utils.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   *
   9      =2   * utils.h
  10      =2   * utility functions
  11      =2   * Min-Hua Chen <orca.chen@gmail.com> 
  12      =2   * 2007/11/20
  13      =2   */
  14      =2  
  15      =2  void store_cpu_rate(int mhz);
  16      =2  void mdelay(unsigned int msec);
  17      =2  void wdt_load(unsigned int cnt);
  18      =2  void strncpy(char *src, char *dst, int n);
  22      =1  #include "eeprom/eeprom.h"
   1      =2  /*
   2      =2   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =2   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =2   * Permission to copy, modify, and distribute this program is granted 
   5      =2   * for noncommercial purposes, provided the author(s) and copyright
   6      =2   * notice are retained. All other uses require explicit written
   7      =2   * permission from NTHU. 
   8      =2   */
   9      =2  #ifndef _EEPROM_H_
  10      =2  #define _EEPROM_H_
  11      =2  
  12      =2  /* instruction for eeprom AT25320A */
  13      =2  #define EE_WREN         0x06
  14      =2  #define EE_WRDI         0x04
  15      =2  #define EE_RDSR         0x05
  16      =2  #define EE_WRSR         0x01
  17      =2  #define EE_READ         0x03
  18      =2  #define EE_WRITE        0x02
  19      =2  #define ERASE_ALL       0x62    /* erase all page for flash memory */
  20      =2  /* the eeprom chip select is connected to P0_0, and
  21      =2   * the eeprom is active when CS is set low */
  22      =2  #define EE_CS           P0_0
  23      =2  
  24      =2  void eeprom_init();
  25      =2  void eeprom_write(unsigned int addr, char byte);
  26      =2  char eeprom_read(unsigned int addr);
  27      =2  char eeprom_status();
  28      =2  
  29      =2  #endif 
  23      =1  
  24      =1  #define EEPROM_HEADER 3
  25      =1  #define ECO_ADDR_SHIFT(x)       ((unsigned int)(x) + 3)
  26      =1  
  27      =1  
  28      =1  /*
  29      =1  static unsigned char ECO_PAGE_TABLE[10];
  30      =1  
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 10  

  31      =1  static unsigned int ECO_PAGE_ADDR;
  32      =1  
  33      =1  static unsigned int ECO_PAGE_TABLE_INDEX;
  34      =1  */
  35      =1  
  36      =1  void eco_page_init();
  37      =1  void eco_page_manager();
  38      =1  
  39      =1  
  40      =1  #endif
  16          #include "eeprom/eeprom.h"
   1      =1  /*
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
   7      =1   * permission from NTHU. 
   8      =1   */
   9      =1  #ifndef _EEPROM_H_
           =1 #define _EEPROM_H_
           =1 
           =1 /* instruction for eeprom AT25320A */
           =1 #define EE_WREN         0x06
           =1 #define EE_WRDI         0x04
           =1 #define EE_RDSR         0x05
           =1 #define EE_WRSR         0x01
           =1 #define EE_READ         0x03
           =1 #define EE_WRITE        0x02
           =1 #define ERASE_ALL       0x62    /* erase all page for flash memory */
           =1 /* the eeprom chip select is connected to P0_0, and
           =1  * the eeprom is active when CS is set low */
           =1 #define EE_CS           P0_0
           =1 
           =1 void eeprom_init();
           =1 void eeprom_write(unsigned int addr, char byte);
           =1 char eeprom_read(unsigned int addr);
           =1 char eeprom_status();
           =1 
           =1 #endif 
  17          
  18          #define ECO_PAGE_SIZE 128
  19          #define ECO_PAGE_ADDR_OFFSET    9       
  20          
  21          #if ECO_PAGE_SIZE == 64
                      
                      #define ECO_PAGE_ENTRY  48
                      #define ECO_PAGE_SHIFT  6
                      #define ECO_PAGE_MASK   0x003F
              
                      unsigned int idata ECO_PAGE_TABLE[48] = {0};
                      //Eco page virtual address id
                      unsigned int ECO_PAGE_PREV_VID;
                      //Eco page physical address id 
                      unsigned int ECO_PAGE_PREV_PID;
              
              #elif ECO_PAGE_SIZE == 128
  34                  
  35                  #define ECO_PAGE_ENTRY 24       
  36                  #define ECO_PAGE_SHIFT  7
  37                  #define ECO_PAGE_MASK   0x007F
  38          
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 11  

  39                  unsigned int idata ECO_PAGE_TABLE[24] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24};
  40                  //Eco page virtual address id
  41                  unsigned int ECO_PAGE_PREV_VID;
  42                  //Eco page physical address id 
  43                  unsigned int ECO_PAGE_PREV_PID;
  44          
  45          #elif ECO_PAGE_SIZE == 256
                      
                      #define ECO_PAGE_ENTRY 12       
                      #define ECO_PAGE_SHIFT  8       
                      #define ECO_PAGE_MASK   0x00FF
              
                      unsigned int ECO_PAGE_TABLE[12] = {1,2,3,4,5,6,7,8,9,10,11,12};
                      //Eco page virtual address id
                      unsigned char ECO_PAGE_PREV_VID;
                      //Eco page physical address id 
                      unsigned char ECO_PAGE_PREV_PID;
              
              #endif
  58          
  59          unsigned char ECO_PAGE_TABLE_INDEX;
  60          
  61          unsigned int ECO_PAGE_ADDR;
  62          
  63          unsigned char ECO_PAGE_SPI_CONN;
  64          
  65          unsigned char idata ECO_PAGE_REGISTER1;
  66          unsigned char idata ECO_PAGE_REGISTER2;
  67          unsigned char idata ECO_PAGE_REGISTER3;
  68          unsigned char idata ECO_PAGE_REGISTER4;
  69          unsigned char idata ECO_PAGE_REGISTER5;
  70          unsigned char idata ECO_PAGE_REGISTER6;
  71          unsigned char idata ECO_PAGE_REGISTER7;
  72          
  73          
  74          void eco_page_init()
  75          {
  76   1              ECO_PAGE_TABLE_INDEX = 0;
  77   1              
  78   1              ECO_PAGE_ADDR = 0;
  79   1              ECO_PAGE_PREV_VID = 0;
  80   1              ECO_PAGE_PREV_PID = 0;
  81   1      
  82   1              /*
  83   1              ECO_PAGE_TABLE[0] = 0; 
  84   1              ECO_PAGE_TABLE[1] = 0; 
  85   1              ECO_PAGE_TABLE[2] = 0;
  86   1              ECO_PAGE_TABLE[3] = 0; 
  87   1              ECO_PAGE_TABLE[4] = 0; 
  88   1              ECO_PAGE_TABLE[5] = 0; 
  89   1              ECO_PAGE_TABLE[6] = 0; 
  90   1              ECO_PAGE_TABLE[7] = 0; 
  91   1              ECO_PAGE_TABLE[8] = 0; 
  92   1              ECO_PAGE_TABLE[9] = 0;
  93   1              ECO_PAGE_TABLE[10] = 0; 
  94   1              ECO_PAGE_TABLE[11] = 0; 
  95   1              ECO_PAGE_TABLE[12] = 0;
  96   1              */      
  97   1      }
  98          
  99          //LRU page replacement
 100          /*void eco_page_manager()
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 12  

 101          {
 102                  unsigned int i;
 103                  unsigned int page_index = -1;
 104          
 105                  //if page id is the same with the last page id
 106                  if(((ECO_PAGE_ADDR >> 8) & 0x7F) == (ECO_PAGE_PREV_PID & 0x7F))
 107                  {
 108                          //virtual address id + function offset
 109                          ECO_PAGE_ADDR = (ECO_PAGE_PREV_VID << 8) + (ECO_PAGE_ADDR & 0x00FF);
 110                          #pragma asm
 111                          //eco_page_function_call        
 112                          //MOV     DPH,ECO_PAGE_ADDR
 113                          //MOV     DPL,ECO_PAGE_ADDR+01H
 114                          //LCALL ?C?ICALL2
 115                          #pragma endasm
 116                          return ;
 117                  }       
 118                  
 119                  //check page table
 120                  for(i=0;i<ECO_PAGE_ENTRY;i++)
 121                  {
 122                          if((ECO_PAGE_ADDR >> 8) == ECO_PAGE_TABLE[i])
 123                          {
 124                                  page_index = i;
 125                                  
 126                                  //set LRU bit is 1
 127                                  ECO_PAGE_TABLE[i] = ECO_PAGE_TABLE[i] | 0x80;
 128                                  break;
 129                          }
 130                  }
 131          
 132                  if(page_index != -1)
 133                  {
 134                          //store function physical addres id 
 135                          ECO_PAGE_PREV_PID = ECO_PAGE_ADDR >> 8;
 136                  
 137                          //memory page is in ram
 138                          ECO_PAGE_ADDR = ((page_index + ECO_PAGE_ADDR_OFFSET) << 8) + (ECO_PAGE_ADDR & 0x00FF);
 139          
 140                          //cache the virtual address id
 141                          ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> 8;
 142          
 143                          #pragma asm
 144                          //eco_page_function_call
 145                          //MOV     DPH,ECO_PAGE_ADDR
 146                          //MOV     DPL,ECO_PAGE_ADDR+01H
 147                          //LCALL ?C?ICALL2
 148                          #pragma endasm
 149          
 150                          return ;
 151                  }       
 152                  else
 153                  {
 154                          //page fault
 155                          for(i=ECO_PAGE_TABLE_INDEX+1; ;i=(i+1)%10)
 156                          {
 157                                  if((ECO_PAGE_TABLE[i] & 0x80) == 0x80)
 158                                  {
 159                                          //LRU bit is 1 and then set this bit is 0
 160                                          ECO_PAGE_TABLE[i] = ECO_PAGE_TABLE[i] & 0x7F;
 161                                  }
 162                                  else
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 13  

 163                                  {
 164                                          unsigned char xdata *seg = (unsigned char xdata *)((i + ECO_PAGE_ADDR_OFFSET)<<8);
 165                                          unsigned int j;
 166                                          
 167                                          //memory page is in ram
 168                                          eeprom_init();
 169          
 170                                          //mov code from eeprom to external ram
 171                                          for(j=0;j<256;j++)
 172                                          {
 173                                                  *(seg+j) = eeprom_read(ECO_ADDR_SHIFT(ECO_PAGE_ADDR & 0xFF00 ) +j);
 174                                          }
 175                                          
 176                                          //update page table to connect this physical address id with virtual address id 
 177                                          ECO_PAGE_TABLE[i] = ECO_PAGE_ADDR >> 8;
 178          
 179                                          //store physical address id
 180                                          ECO_PAGE_PREV_PID = ECO_PAGE_TABLE[i];
 181          
 182                                          //update page address e.g.  (page_id<<8) + page_offset
 183                                          ECO_PAGE_ADDR = ((i + ECO_PAGE_ADDR_OFFSET) << 8) + (ECO_PAGE_ADDR & 0x00FF);
 184          
 185                                          //store virtual address id 
 186                                          ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> 8; 
 187          
 188                                          //mov to the next index
 189                                          ECO_PAGE_TABLE_INDEX = i;
 190          
 191                                          //jump  to function address
 192                                          #pragma asm
 193                                          //eco_page_function_call
 194                                          //MOV     DPH,ECO_PAGE_ADDR
 195                                          //MOV     DPL,ECO_PAGE_ADDR+01H
 196                                          //LCALL        ?C?ICALL2               
 197                                          #pragma endasm
 198                                          
 199                                          return ;
 200                                          
 201                                  }
 202                          }
 203                                  
 204                  }
 205                                          
 206          }
 207          */
 208          
 209          void eco_page_manager()
 210          {
 211   1              unsigned int i;
 212   1              unsigned int page_index = -1; 
 213   1      
 214   1              //Check POP instruction 
 215   1              //for(i=0;i<10;i++)
 216   1              //{    
 217   1              //      blink_led();
 218   1              //      mdelay(200);
 219   1              //}    
 220   1              //mdelay(1000);
 221   1              
 222   1              //if page id is the same with the last page id
 223   1              if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == ECO_PAGE_PREV_PID)
 224   1              {
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 14  

 225   2                      //virtual address id + function offset
 226   2                      ECO_PAGE_ADDR = (ECO_PAGE_PREV_VID << 8) + (ECO_PAGE_ADDR & 0x00FF);
 227   2                      #pragma asm
 228   2                      //eco_page_function_call
 229   2                      #pragma endasm
 230   2                      return ;
 231   2              }       
 232   1                                      
 233   1              //Check Table   
 234   1              for(i=0;i<ECO_PAGE_ENTRY;i++)
 235   1              {   
 236   2                      if((ECO_PAGE_ADDR >> ECO_PAGE_SHIFT) == ECO_PAGE_TABLE[i])
 237   2                      {
 238   3                              page_index = i;
 239   3                              break;
 240   3                      }
 241   2              }
 242   1      
 243   1              if(page_index != -1) 
 244   1              {  
 245   2                      //store function physical addres id 
 246   2                      ECO_PAGE_PREV_PID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
 247   2              
 248   2                      //memory page is in ram
 249   2                      ECO_PAGE_ADDR = ((page_index + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO_PAGE_MASK
             -);
 250   2      
 251   2                      //cache the virtual address id
 252   2                      ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
 253   2      
 254   2                      #pragma asm
 255   2                      //eco_page_function_call
 256   2                      //MOV     DPH,ECO_PAGE_ADDR
 257   2                      //MOV     DPL,ECO_PAGE_ADDR+01H
 258   2                      //LCALL ?C?ICALL2
 259   2                      #pragma endasm
 260   2              }   
 261   1              else
 262   1              {
 263   2                      //page fault
 264   2                      // Move Data from EEPROM to iRAM 
 265   2                      unsigned char xdata *seg = (unsigned char xdata *)((ECO_PAGE_TABLE_INDEX + ECO_PAGE_ADDR_OFFSET) << ECO_
             -PAGE_SHIFT);
 266   2                      
 267   2                      //memory page is in ram
 268   2                      eeprom_init();
 269   2      
 270   2                      //mov code from eeprom to external ram
 271   2                      for(i=0;i<ECO_PAGE_SIZE;i++)
 272   2                      {
 273   3                              *(seg+i) = eeprom_read(ECO_ADDR_SHIFT(ECO_PAGE_ADDR & ECO_PAGE_MASK) +i);
 274   3                      }
 275   2                      
 276   2                      //update page table to connect this physical address id with virtual address id 
 277   2                      ECO_PAGE_TABLE[ECO_PAGE_TABLE_INDEX] = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;
 278   2      
 279   2                      //store physical address id
 280   2                      ECO_PAGE_PREV_PID = ECO_PAGE_TABLE[ECO_PAGE_TABLE_INDEX];
 281   2      
 282   2                      //update page address
 283   2                      ECO_PAGE_ADDR = ((ECO_PAGE_TABLE_INDEX + ECO_PAGE_ADDR_OFFSET) << ECO_PAGE_SHIFT) + (ECO_PAGE_ADDR & ECO
             -_PAGE_MASK);
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 15  

 284   2      
 285   2                      //store virtual address id 
 286   2                      ECO_PAGE_PREV_VID = ECO_PAGE_ADDR >> ECO_PAGE_SHIFT;    
 287   2      
 288   2                      //mov to the next index
 289   2                      ECO_PAGE_TABLE_INDEX++;
 290   2                              
 291   2                      //jump  to function address
 292   2                      #pragma asm
 293   2                      //eco_page_function_call
 294   2                      //MOV     DPH,ECO_PAGE_ADDR
 295   2                      //MOV     DPL,ECO_PAGE_ADDR+01H
 296   2                      //LCALL        ?C?ICALL2               
 297   2                      #pragma endasm
 298   2      
 299   2              }
 300   1      
 301   1      }
 302          
C51 COMPILER V8.16   ECO_PAGE                                                              04/15/2009 17:19:30 PAGE 16  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_eeprom_read . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ECO_PAGE_TABLE . . . . . . . . . . . .  PUBLIC   IDATA  ARRAY    0000H  48
eeprom_init. . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
ECO_PAGE_SPI_CONN. . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
ECO_PAGE_PREV_PID. . . . . . . . . . .  PUBLIC   DATA   U_INT    0001H  2
ECO_PAGE_PREV_VID. . . . . . . . . . .  PUBLIC   DATA   U_INT    0003H  2
eco_page_init. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
ECO_PAGE_REGISTER1 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0030H  1
ECO_PAGE_REGISTER2 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0031H  1
ECO_PAGE_REGISTER3 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0032H  1
ECO_PAGE_ADDR. . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0005H  2
ECO_PAGE_REGISTER4 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0033H  1
ECO_PAGE_REGISTER5 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0034H  1
ECO_PAGE_REGISTER6 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0035H  1
ECO_PAGE_REGISTER7 . . . . . . . . . .  PUBLIC   IDATA  U_CHAR   0036H  1
eco_page_manager . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  seg?140. . . . . . . . . . . . . . .  AUTO     DATA   PTR      0004H  2
  i?141. . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  page_index?142 . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
ECO_PAGE_TABLE_INDEX . . . . . . . . .  PUBLIC   DATA   U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    389    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       6
   IDATA SIZE       =     55    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

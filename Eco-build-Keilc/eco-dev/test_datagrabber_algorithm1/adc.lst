C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE ADC
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe ..\..\include\adc\adc.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT INCD
                    -IR(../../Include) PRINT(./adc.lst) PREPRINT(./adc.i) SRC(./adc.src)

line level    source

   1          /*
   2           * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3           * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4           * Permission to copy, modify, and distribute this program is granted 
   5           * for noncommercial purposes, provided the author(s) and copyright 
   6           * notice are retained. All other uses require explicit written 
   7           * permission from NTHU. 
   8           *
   9           * A/D converter driver 
  10           * Min-Hua Chen <orca.chen@gmail.com> 
  11           * 2007/8/1
  12           */
  13          
  14          #include <Eco/reg24e1.h>
   1      =1  #ifndef REGnRF24E1_H
   2      =1  #define REGnRF24E1_H
   3      =1  
   4      =1  /*  BYTE Registers  */
   5      =1  sfr P0                  = 0x80 ;
   6      =1  sfr SP                  = 0x81 ;
   7      =1  sfr DPL                 = 0x82 ;
   8      =1  sfr DPL0                = 0x82 ;
   9      =1  sfr DPH                 = 0x83 ;
  10      =1  sfr DPH0                = 0x83 ;
  11      =1  sfr DPL1                = 0x84 ;
  12      =1  sfr DPH1                = 0x85 ;
  13      =1  sfr DPS                 = 0x86 ;
  14      =1  sfr PCON                = 0x87 ;
  15      =1  sfr TCON                = 0x88 ;
  16      =1  sfr TMOD                = 0x89 ;
  17      =1  sfr TL0                 = 0x8A ;
  18      =1  sfr TL1                 = 0x8B ;
  19      =1  sfr TH0                 = 0x8C ;
  20      =1  sfr TH1                 = 0x8D ;
  21      =1  sfr CKCON               = 0x8E ;
  22      =1  sfr SPC_FNC             = 0x8F ;
  23      =1  sfr P1          = 0x90 ;
  24      =1  sfr EXIF                = 0x91 ;
  25      =1  sfr MPAGE               = 0x92 ;
  26      =1  sfr P0_DIR              = 0x94 ;
  27      =1  sfr P0_ALT              = 0x95 ;
  28      =1  sfr P1_DIR              = 0x96 ;
  29      =1  sfr P1_ALT              = 0x97 ;
  30      =1  sfr SCON                = 0x98 ;
  31      =1  sfr SBUF                = 0x99 ;
  32      =1  sfr RADIO               = 0xA0 ;
  33      =1  sfr ADCCON              = 0xA1 ;
  34      =1  sfr ADCDATAH    = 0xA2 ;
  35      =1  sfr ADCDATAL    = 0xA3 ;
  36      =1  sfr ADCSTATIC   = 0xA4 ;
  37      =1  sfr IE                  = 0xA8 ;
  38      =1  sfr PWMCON              = 0xA9 ;
  39      =1  sfr PWMDUTY             = 0xAA ;
  40      =1  sfr REGX_MSB    = 0xAB ;
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 2   

  41      =1  sfr REGX_LSB    = 0xAC ;
  42      =1  sfr REGX_CTRL   = 0xAD ;
  43      =1  sfr RSTREAS             = 0xB1 ;
  44      =1  sfr SPI_DATA    = 0xB2 ;
  45      =1  sfr SPI_CTRL    = 0xB3 ;
  46      =1  sfr SPICLK              = 0xB4 ;
  47      =1  sfr TICK_DV             = 0xB5 ;
  48      =1  sfr CK_CTRL             = 0xB6 ;
  49      =1  sfr TEST_MODE   = 0xB7 ;
  50      =1  sfr IP                  = 0xB8 ;
  51      =1  sfr T1_1V2              = 0xBC ;
  52      =1  sfr T2_1V2              = 0xBD ;
  53      =1  sfr DEV_OFFSET  = 0xBE ;
  54      =1  sfr T2CON               = 0xC8 ;
  55      =1  sfr RCAP2L              = 0xCA ;
  56      =1  sfr RCAP2H              = 0xCB ;
  57      =1  sfr TL2                 = 0xCC ;
  58      =1  sfr TH2                 = 0xCD ;
  59      =1  sfr PSW                 = 0xD0 ;
  60      =1  sfr EICON               = 0xD8 ;
  61      =1  sfr ACC                 = 0xE0 ;
  62      =1  sfr EIE                 = 0xE8 ;
  63      =1  sfr B                   = 0xF0 ;
  64      =1  sfr EIP                 = 0xF8 ;
  65      =1  
  66      =1  
  67      =1  /*  BIT Registers  */
  68      =1  /* P0 */
  69      =1  sbit P0_0       = 0x80  ;
  70      =1  sbit DIO2       = 0x80  ;
  71      =1  sbit P0_1       = 0x81  ;
  72      =1  sbit RXD        = 0x81  ;
  73      =1  sbit DIO3       = 0x81  ;
  74      =1  sbit P0_2       = 0x82  ;
  75      =1  sbit TXD        = 0x82  ;
  76      =1  sbit DIO4       = 0x82  ;
  77      =1  sbit P0_3       = 0x83  ;
  78      =1  sbit INT0_N     = 0x83  ;
  79      =1  sbit DIO5       = 0x83  ;
  80      =1  sbit P0_4       = 0x84  ;
  81      =1  sbit INT1_N     = 0x84  ;
  82      =1  sbit DIO6       = 0x84  ;
  83      =1  sbit P0_5       = 0x85  ;
  84      =1  sbit T0         = 0x85  ;
  85      =1  sbit DIO7       = 0x85  ;
  86      =1  sbit P0_6       = 0x86  ;
  87      =1  sbit T1         = 0x86  ;
  88      =1  sbit DIO8       = 0x86  ;
  89      =1  sbit P0_7       = 0x87  ;
  90      =1  sbit PWM        = 0x87  ;
  91      =1  sbit DIO9       = 0x87  ;
  92      =1  
  93      =1  /*  TCON  */
  94      =1  sbit IT0        = 0x88 ;
  95      =1  sbit IE0        = 0x89 ;
  96      =1  sbit IT1        = 0x8A ;
  97      =1  sbit IE1        = 0x8B ;
  98      =1  sbit TR0        = 0x8C ;
  99      =1  sbit TF0        = 0x8D ;
 100      =1  sbit TR1        = 0x8E ;
 101      =1  sbit TF1        = 0x8F ;
 102      =1  
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 3   

 103      =1  /* P1 */
 104      =1  sbit P1_0       = 0x90 ;
 105      =1  sbit T2         = 0x90 ;
 106      =1  sbit DIO0       = 0x90 ;
 107      =1  sbit P1_1       = 0x91 ;
 108      =1  sbit DIO1       = 0x91 ;
 109      =1  sbit P1_2       = 0x92 ;
 110      =1  sbit DIN0       = 0x92 ;
 111      =1  
 112      =1  /*  SCON  */
 113      =1  sbit RI         = 0x98 ;
 114      =1  sbit TI         = 0x99 ;
 115      =1  sbit RB8        = 0x9A ;
 116      =1  sbit TB8        = 0x9B ;
 117      =1  sbit REN        = 0x9C ;
 118      =1  sbit SM2        = 0x9D ;
 119      =1  sbit SM1        = 0x9E ;
 120      =1  sbit SM0        = 0x9F ;
 121      =1  
 122      =1  /* P2 */
 123      =1  sbit DATA       = 0xA0 ;
 124      =1  sbit CLK1       = 0xA1 ;
 125      =1  sbit DR1        = 0xA2 ;
 126      =1  sbit CS         = 0xA3 ;
 127      =1  sbit DOUT2      = 0xA4 ;
 128      =1  sbit CLK2       = 0xA5 ;
 129      =1  sbit DR2_CE     = 0xA6 ;
 130      =1  sbit DR2        = 0xA6 ;
 131      =1  sbit CE         = 0xA6 ;
 132      =1  sbit PWR_UP     = 0xA7 ;
 133      =1  
 134      =1  /*  IE   */
 135      =1  sbit EX0        = 0xA8 ;
 136      =1  sbit ET0        = 0xA9 ;
 137      =1  sbit EX1        = 0xAA ;
 138      =1  sbit ET1        = 0xAB ;
 139      =1  sbit ES         = 0xAC ;
 140      =1  sbit ET2        = 0xAD ;
 141      =1  sbit EA         = 0xAF ;
 142      =1  
 143      =1  /*  IP   */
 144      =1  sbit PX0        = 0xB8 ;
 145      =1  sbit PT0        = 0xB9 ;
 146      =1  sbit PX1        = 0xBA ;
 147      =1  sbit PT1        = 0xBB ;
 148      =1  sbit PS         = 0xBC ;
 149      =1  sbit PT2        = 0xBD ;
 150      =1  
 151      =1  /*  T2CON  */
 152      =1  sbit CP_RL2     = 0xC8 ;
 153      =1  sbit CPRL2      = 0xC8 ;
 154      =1  sbit C_T2       = 0xC9 ;
 155      =1  sbit CT2        = 0xC9 ;
 156      =1  sbit TR2        = 0xCA ;
 157      =1  sbit EXEN2      = 0xCB ;
 158      =1  sbit TCLK       = 0xCC ;
 159      =1  sbit RCLK       = 0xCD ;
 160      =1  sbit EXF2       = 0xCE ;
 161      =1  sbit TF2        = 0xCF ;
 162      =1  
 163      =1  /*  PSW   */
 164      =1  sbit P          = 0xD0 ;
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 4   

 165      =1  sbit F1         = 0xD1 ;
 166      =1  sbit OV         = 0xD2 ;
 167      =1  sbit RS0        = 0xD3 ;
 168      =1  sbit RS1        = 0xD4 ;
 169      =1  sbit F0         = 0xD5 ;
 170      =1  sbit AC         = 0xD6 ;
 171      =1  sbit CY         = 0xD7 ;
 172      =1  
 173      =1  /*  EICON  */
 174      =1  sbit WDTI       = 0xDB ;
 175      =1  
 176      =1  /*  EIE  */
 177      =1  sbit EX2        = 0xE8 ;
 178      =1  sbit EX3        = 0xE9 ;
 179      =1  sbit EX4        = 0xEA ;
 180      =1  sbit EX5        = 0xEB ;
 181      =1  sbit EWDI       = 0xEC ;
 182      =1  
 183      =1  /*  EIP  */
 184      =1  sbit PX2        = 0xF8 ;
 185      =1  sbit PX3        = 0xF9 ;
 186      =1  sbit PX4        = 0xFA ;
 187      =1  sbit PX5        = 0xFB ;
 188      =1  sbit PWDI       = 0xFC ;
 189      =1  
 190      =1  
 191      =1  /* BIT definitions for bits that are not directly accessible */
 192      =1  /* PCON bits */
 193      =1  #define IDL             0x01
 194      =1  #define PD              0x02
 195      =1  #define GF0             0x04
 196      =1  #define GF1             0x08
 197      =1  #define SMOD            0x80
 198      =1  
 199      =1  /* TMOD bits */
 200      =1  #define T0_M0           0x01
 201      =1  #define T0_M1           0x02
 202      =1  #define T0_CT           0x04
 203      =1  #define T0_GATE         0x08
 204      =1  #define T1_M0           0x10
 205      =1  #define T1_M1           0x20
 206      =1  #define T1_CT           0x40
 207      =1  #define T1_GATE         0x80
 208      =1  
 209      =1  #define T0_MASK         0x0F
 210      =1  #define T1_MASK         0xF0
 211      =1  
 212      =1  /* Interrupt numbers: address = (number * 8) + 3 */
 213      =1  #define IE0_VECTOR      0       /* 0x03 external interrupt 0 */
 214      =1  #define TF0_VECTOR      1       /* 0x0b timer 0 */
 215      =1  #define IE1_VECTOR      2       /* 0x13 external interrupt 1 */
 216      =1  #define TF1_VECTOR      3       /* 0x1b timer 1 */
 217      =1  #define SI0_VECTOR      4       /* 0x23 serial port 0 */
 218      =1  
 219      =1  #endif
  15          #include <adc/adc.h>
   1      =1  /* 
   2      =1   * Author(s): Min-Hua Chen (Embedded Platform Lab, NTHU)
   3      =1   * Copyright (c) 2008 National Tsing Hua University (NTHU) 
   4      =1   * Permission to copy, modify, and distribute this program is granted 
   5      =1   * for noncommercial purposes, provided the author(s) and copyright
   6      =1   * notice are retained. All other uses require explicit written
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 5   

   7      =1   * permission from NTHU. 
   8      =1   *
   9      =1   * adc.h
  10      =1   */
  11      =1  
  12      =1  #ifndef _ADC_H_
  13      =1  #define _ADC_H_
  14      =1  
  15      =1  /* ADCCON register */
  16      =1  #define ADC_PWR_ON      (1 << 5)
  17      =1  #define EXTREF          (1 << 4)
  18      =1  
  19      =1  /* ADCSTATIC register */
  20      =1  #define ADC_CLK_D32     (0 << 5)
  21      =1  #define ADC_CLK_D8      (1 << 5)
  22      =1  #define ADC_RES_6       0x00
  23      =1  #define ADC_RES_8       0x01
  24      =1  #define ADC_RES_10      0x02
  25      =1  #define ADC_RES_12      0x03
  26      =1  
  27      =1  /* the default value of ADCCON is 0x80, hence the H -> L -> H
  28      =1   * sequence to start the ADC has L -> H left
  29      =1   */
  30      =1  #define ADC_START()                     \
  31      =1          do {                            \
  32      =1                  ADCCON &= ~0x80;        \
  33      =1                  ADCCON |= 0x80;         \
  34      =1          } while (0)
  35      =1  
  36      =1  #define ADC_EOC         (1 << 4)
  37      =1  
  38      =1  /* pins connected to the accelerometer */
  39      =1  #define X_AXIS          3
  40      =1  #define Y_AXIS          4
  41      =1  #define Z_AXIS          6
  42      =1  
  43      =1  void adc_init(char clk, char resol, char extref);
  44      =1  int adc_read(char in_pin);
  45      =1  
  46      =1  #endif
  16          
  17          /* adc_init - initialize A/D converter
  18           * @CLK: clock rate, 1/n of CPU clock rate
  19           * @resol: data resolution
  20           * @extref: internal or external reference voltage
  21           */
  22          void adc_init(char clk, char resol, char extref)
  23          {
  24   1              /* ADCCON init value: 0x80 */
  25   1              ADCCON |= ADC_PWR_ON;   /* power on */
  26   1              ADCCON |= extref;       /* use external reference */
  27   1              ADCSTATIC &= ~(1 << 5); /* clean [5] bit */
  28   1              ADCSTATIC |= clk;       /* setup ADC clock */
  29   1              ADCSTATIC &= ~0x03;     /* clean [0:1] bits */
  30   1              ADCSTATIC |= resol;     /* 12-bit resolution */
  31   1      }
  32          
  33          static int p_adc_read()
  34          {
  35   1              int resol = ADCSTATIC & 0x03;   /* get resolution */
  36   1              int val = 0;
  37   1              switch (resol) {
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 6   

  38   2              case 0:
  39   2              case 1:
  40   2                      /* data is in ADCDATAH only */
  41   2                      val = ADCDATAH;
  42   2                      break;
  43   2              case 2:
  44   2                      /* data is ADCDATAH + ADCDATA[7:6] */
  45   2                      val = (ADCDATAH << 2);
  46   2                      val += (ADCDATAL >> 6);
  47   2              case 3:
  48   2                      /* data is ADCDATAH + ADCDATA[7:4] */
  49   2                      val = (ADCDATAH << 4);
  50   2                      val += (ADCDATAL >> 4);
  51   2              }
  52   1              return val;
  53   1      }
  54          
  55          int adc_read(char in_pin)
  56          {
  57   1              int ret = 0;
  58   1              /* check data if necessary */
  59   1              ADCCON &= ~0x07;        /* clean [0:2] bits */
  60   1              ADCCON |= in_pin;       /* select input pin */
  61   1              ADC_START();    /* start A/D conversion */
  62   1      
  63   1              while (!(EXIF & ADC_EOC))       /* wait until done */
  64   1                      ;
  65   1      
  66   1              ret = p_adc_read();     /* read ADCDATAH/L register */
  67   1      
  68   1              EXIF &= ~ADC_EOC;       /* clear EXIF.4 */
  69   1              return ret;
  70   1      }
C51 COMPILER V8.16   ADC                                                                   04/26/2009 00:13:00 PAGE 7   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ADCSTATIC. . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
_adc_read. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  in_pin?245 . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
  ret?246. . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
ADCCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
ADCDATAH . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
EXIF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
ADCDATAL . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
_adc_init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  clk?040. . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
  resol?041. . . . . . . . . . . . . .  * REG *  DATA   CHAR     0005H  1
  extref?042 . . . . . . . . . . . . .  * REG *  DATA   CHAR     0003H  1
p_adc_read . . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  resol?143. . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  val?144. . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    123    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

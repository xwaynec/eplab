AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     1


MACRO ASSEMBLER AX51 V3.06a
OBJECT MODULE PLACED IN .\main.obj
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.exe .\main.src EP DEBUG SYMBOLS OJ(.\main.obj) PR(.\main.ls1) 

LOC    OBJ             LINE     SOURCE

                          1     ; ./main.src generated from: .\main.c
                          2     ; COMPILER INVOKED BY:
                          3     ;        C:\Keil\C51\BIN\C51.exe .\main.c BROWSE DEBUG CODE LISTINCLUDE SYMBOLS PREPRINT
                                ROM(LARGE) INCDIR(../../Include) SRC(./main.src)
                          4     
                          5     $nomod51 
                          6     
                          7     NAME    MAIN
                          8     
 00A0.7                   9     PWR_UP  BIT     0A0H.7
 0080                    10     P0      DATA    080H
 0090                    11     P1      DATA    090H
 00D0.6                  12     AC      BIT     0D0H.6
 0080.5                  13     T0      BIT     080H.5
 00B3                    14     SPI_CTRL        DATA    0B3H
 0080.6                  15     T1      BIT     080H.6
 00A8.7                  16     EA      BIT     0A8H.7
 0090.0                  17     T2      BIT     090H.0
 00A0.6                  18     CE      BIT     0A0H.6
 00BE                    19     DEV_OFFSET      DATA    0BEH
 00A0.1                  20     CLK1    BIT     0A0H.1
 0090.2                  21     DIN0    BIT     090H.2
 00A0.5                  22     CLK2    BIT     0A0H.5
 0090.0                  23     DIO0    BIT     090H.0
 0083                    24     DPH0    DATA    083H
 0090.1                  25     DIO1    BIT     090H.1
 00A8                    26     IE      DATA    0A8H
 0085                    27     DPH1    DATA    085H
 0080.0                  28     DIO2    BIT     080H.0
 0080.1                  29     DIO3    BIT     080H.1
 0080.0                  30     P0_0    BIT     080H.0
 0090.0                  31     P1_0    BIT     090H.0
 0080.2                  32     DIO4    BIT     080H.2
 0080.1                  33     P0_1    BIT     080H.1
 0082                    34     DPL0    DATA    082H
 0090.1                  35     P1_1    BIT     090H.1
 0080.3                  36     DIO5    BIT     080H.3
 0080.2                  37     P0_2    BIT     080H.2
 0084                    38     DPL1    DATA    084H
 0090.2                  39     P1_2    BIT     090H.2
 0080.4                  40     DIO6    BIT     080H.4
 0080.3                  41     P0_3    BIT     080H.3
 0080.5                  42     DIO7    BIT     080H.5
 0080.4                  43     P0_4    BIT     080H.4
 00A4                    44     ADCSTATIC       DATA    0A4H
 0080.6                  45     DIO8    BIT     080H.6
 0080.5                  46     P0_5    BIT     080H.5
 00C8.6                  47     EXF2    BIT     0C8H.6
 00A0.3                  48     CS      BIT     0A0H.3
 0080.7                  49     DIO9    BIT     080H.7
 0080.6                  50     P0_6    BIT     080H.6
 0080.7                  51     P0_7    BIT     080H.7
 00A8.4                  52     ES      BIT     0A8H.4
 00B8                    53     IP      DATA    0B8H
 00A0.0                  54     DATA?   BIT     0A0H.0
 0098.0                  55     RI      BIT     098H.0
 00D0.7                  56     CY      BIT     0D0H.7
 0098.1                  57     TI      BIT     098H.1
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     2

 00BC                    58     T1_1V2  DATA    0BCH
 008F                    59     SPC_FNC DATA    08FH
 00BD                    60     T2_1V2  DATA    0BDH
 00CB                    61     RCAP2H  DATA    0CBH
 00B8.4                  62     PS      BIT     0B8H.4
 0081                    63     SP      DATA    081H
 00D0.2                  64     OV      BIT     0D0H.2
 00B6                    65     CK_CTRL DATA    0B6H
 00CA                    66     RCAP2L  DATA    0CAH
 00B5                    67     TICK_DV DATA    0B5H
 00B1                    68     RSTREAS DATA    0B1H
 00C8.1                  69     C_T2    BIT     0C8H.1
 00E8.4                  70     EWDI    BIT     0E8H.4
 00A1                    71     ADCCON  DATA    0A1H
 00C8.5                  72     RCLK    BIT     0C8H.5
 00A2                    73     ADCDATAH        DATA    0A2H
 0091                    74     EXIF    DATA    091H
 00C8.4                  75     TCLK    BIT     0C8H.4
 00A0.6                  76     DR2_CE  BIT     0A0H.6
 00A3                    77     ADCDATAL        DATA    0A3H
 0099                    78     SBUF    DATA    099H
 0087                    79     PCON    DATA    087H
 0098                    80     SCON    DATA    098H
 00F8.4                  81     PWDI    BIT     0F8H.4
 0089                    82     TMOD    DATA    089H
 0088                    83     TCON    DATA    088H
 00D8.3                  84     WDTI    BIT     0D8H.3
 00AA                    85     PWMDUTY DATA    0AAH
 0088.1                  86     IE0     BIT     088H.1
 0088.3                  87     IE1     BIT     088H.3
 0094                    88     P0_DIR  DATA    094H
 00F0                    89     B       DATA    0F0H
 0096                    90     P1_DIR  DATA    096H
 0095                    91     P0_ALT  DATA    095H
 0097                    92     P1_ALT  DATA    097H
 00C8.0                  93     CP_RL2  BIT     0C8H.0
 00A0.2                  94     DR1     BIT     0A0H.2
 00E0                    95     ACC     DATA    0E0H
 00A0.6                  96     DR2     BIT     0A0H.6
 00B7                    97     TEST_MODE       DATA    0B7H
 00B4                    98     SPICLK  DATA    0B4H
 00C8.1                  99     CT2     BIT     0C8H.1
 00A8.1                 100     ET0     BIT     0A8H.1
 00A8.3                 101     ET1     BIT     0A8H.3
 0088.5                 102     TF0     BIT     088H.5
 0080.3                 103     INT0_N  BIT     080H.3
 00A8.5                 104     ET2     BIT     0A8H.5
 0088.7                 105     TF1     BIT     088H.7
 0080.4                 106     INT1_N  BIT     080H.4
 00C8.7                 107     TF2     BIT     0C8H.7
 0098.2                 108     RB8     BIT     098H.2
 008C                   109     TH0     DATA    08CH
 00A8.0                 110     EX0     BIT     0A8H.0
 0088.0                 111     IT0     BIT     088H.0
 008D                   112     TH1     DATA    08DH
 00A8.2                 113     EX1     BIT     0A8H.2
 0098.3                 114     TB8     BIT     098H.3
 0088.2                 115     IT1     BIT     088H.2
 00CD                   116     TH2     DATA    0CDH
 00AD                   117     REGX_CTRL       DATA    0ADH
 00E8.0                 118     EX2     BIT     0E8H.0
 00D0.0                 119     P       BIT     0D0H.0
 00E8.1                 120     EX3     BIT     0E8H.1
 0098.7                 121     SM0     BIT     098H.7
 008A                   122     TL0     DATA    08AH
 00E8.2                 123     EX4     BIT     0E8H.2
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     3

 0098.6                 124     SM1     BIT     098H.6
 008B                   125     TL1     DATA    08BH
 00E8.3                 126     EX5     BIT     0E8H.3
 0098.5                 127     SM2     BIT     098H.5
 00CC                   128     TL2     DATA    0CCH
 00E8                   129     EIE     DATA    0E8H
 00B8.1                 130     PT0     BIT     0B8H.1
 00D0.3                 131     RS0     BIT     0D0H.3
 00B8.3                 132     PT1     BIT     0B8H.3
 00D0.4                 133     RS1     BIT     0D0H.4
 00B8.5                 134     PT2     BIT     0B8H.5
 0088.4                 135     TR0     BIT     088H.4
 00A9                   136     PWMCON  DATA    0A9H
 0088.6                 137     TR1     BIT     088H.6
 00C8.2                 138     TR2     BIT     0C8H.2
 00B8.0                 139     PX0     BIT     0B8H.0
 00B8.2                 140     PX1     BIT     0B8H.2
 00F8.0                 141     PX2     BIT     0F8H.0
 00F8.1                 142     PX3     BIT     0F8H.1
 00F8.2                 143     PX4     BIT     0F8H.2
 0083                   144     DPH     DATA    083H
 00F8.3                 145     PX5     BIT     0F8H.3
 00F8                   146     EIP     DATA    0F8H
 0082                   147     DPL     DATA    082H
 00C8.3                 148     EXEN2   BIT     0C8H.3
 00C8.0                 149     CPRL2   BIT     0C8H.0
 0098.4                 150     REN     BIT     098H.4
 00C8                   151     T2CON   DATA    0C8H
 0086                   152     DPS     DATA    086H
 00B2                   153     SPI_DATA        DATA    0B2H
 0092                   154     MPAGE   DATA    092H
 0080.1                 155     RXD     BIT     080H.1
 00A0.4                 156     DOUT2   BIT     0A0H.4
 00D8                   157     EICON   DATA    0D8H
 008E                   158     CKCON   DATA    08EH
 0080.2                 159     TXD     BIT     080H.2
 00A0                   160     RADIO   DATA    0A0H
 0080.7                 161     PWM     BIT     080H.7
 00D0.5                 162     F0      BIT     0D0H.5
 00D0.1                 163     F1      BIT     0D0H.1
 00AC                   164     REGX_LSB        DATA    0ACH
 00D0                   165     PSW     DATA    0D0H
 00AB                   166     REGX_MSB        DATA    0ABH
------                  167     ?PR?_bitrev?MAIN     SEGMENT CODE 
------                  168     ?DT?_bitrev?MAIN     SEGMENT DATA OVERLAYABLE 
------                  169     ?PR?_log_2?MAIN      SEGMENT CODE 
------                  170     ?PR?_compute_W?MAIN  SEGMENT CODE 
------                  171     ?DT?_compute_W?MAIN  SEGMENT DATA OVERLAYABLE 
------                  172     ?PR?_permute_bitrev?MAIN                 SEGMENT CODE 
------                  173     ?DT?_permute_bitrev?MAIN                 SEGMENT DATA OVERLAYABLE 
------                  174     ?PR?_fft?MAIN        SEGMENT CODE 
------                  175     ?DT?_fft?MAIN        SEGMENT DATA OVERLAYABLE 
------                  176     ?PR?main?MAIN        SEGMENT CODE 
------                  177     ?ID?_bitrev?MAIN     SEGMENT IDATA OVERLAYABLE 
------                  178     ?ID?_log_2?MAIN      SEGMENT IDATA OVERLAYABLE 
------                  179     ?ID?_compute_W?MAIN  SEGMENT IDATA OVERLAYABLE 
------                  180     ?ID?_permute_bitrev?MAIN                 SEGMENT IDATA OVERLAYABLE 
------                  181     ?ID?_fft?MAIN        SEGMENT IDATA OVERLAYABLE 
------                  182     ?ID?main?MAIN        SEGMENT IDATA OVERLAYABLE 
                        183             EXTRN   CODE (_mdelay)
                        184             EXTRN   CODE (_cos)
                        185             EXTRN   CODE (_sin)
                        186             EXTRN   CODE (_store_cpu_rate)
                        187             EXTRN   CODE (?C?SIDIV)
                        188             EXTRN   CODE (?C?IMUL)
                        189             EXTRN   CODE (?C?FCASTI)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     4

                        190             EXTRN   CODE (?C?CASTF)
                        191             EXTRN   CODE (?C?ISTOPTR)
                        192             EXTRN   CODE (?C?ILDOPTR)
                        193             EXTRN   CODE (?C_STARTUP)
                        194             PUBLIC  main
                        195             PUBLIC  ?_fft?BYTE
                        196             PUBLIC  _fft
                        197             PUBLIC  ?_permute_bitrev?BYTE
                        198             PUBLIC  _permute_bitrev
                        199             PUBLIC  ?_compute_W?BYTE
                        200             PUBLIC  _compute_W
                        201             PUBLIC  _log_2
                        202             PUBLIC  _bitrev
                        203     
------                  204             RSEG  ?DT?_bitrev?MAIN
000000                  205     ?_bitrev?BYTE:
000000                  206         numbits?041:   DS   2
                        207     
------                  208             RSEG  ?DT?_compute_W?MAIN
000000                  209     ?_compute_W?BYTE:
000000                  210               n?246:   DS   2
000002                  211             ORG  2
000002                  212            W_re?247:   DS   3
000005                  213             ORG  5
000005                  214            W_im?248:   DS   3
000008                  215             ORG  8
000008                  216           log2n?251:   DS   2
                        217     
------                  218             RSEG  ?DT?_fft?MAIN
000000                  219     ?_fft?BYTE:
000000                  220               n?460:   DS   2
000002                  221             ORG  2
000002                  222            A_re?461:   DS   3
000005                  223             ORG  5
000005                  224            A_im?462:   DS   3
000008                  225             ORG  8
000008                  226            W_re?463:   DS   3
00000B                  227             ORG  11
00000B                  228            W_im?464:   DS   3
                        229     
------                  230             RSEG  ?DT?_permute_bitrev?MAIN
000000                  231     ?_permute_bitrev?BYTE:
000000                  232               n?352:   DS   2
000002                  233             ORG  2
000002                  234            A_re?353:   DS   3
000005                  235             ORG  5
000005                  236            A_im?354:   DS   3
                        237     
------                  238             RSEG  ?ID?_bitrev?MAIN
000000                  239               i?042:   DS   2
                        240     
------                  241             RSEG  ?ID?_bitrev?MAIN
000002                  242             rev?043:   DS   2
                        243     
------                  244             RSEG  ?ID?_log_2?MAIN
000000                  245             res?145:   DS   2
                        246     
------                  247             RSEG  ?ID?_compute_W?MAIN
000000                  248               i?249:   DS   2
                        249     
------                  250             RSEG  ?ID?_compute_W?MAIN
000002                  251              br?250:   DS   2
                        252     
------                  253             RSEG  ?ID?_permute_bitrev?MAIN
000000                  254               i?355:   DS   2
                        255     
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     5

------                  256             RSEG  ?ID?_permute_bitrev?MAIN
000002                  257             bri?356:   DS   2
                        258     
------                  259             RSEG  ?ID?_permute_bitrev?MAIN
000004                  260           log2n?357:   DS   2
                        261     
------                  262             RSEG  ?ID?_permute_bitrev?MAIN
000006                  263            t_re?358:   DS   2
                        264     
------                  265             RSEG  ?ID?_permute_bitrev?MAIN
000008                  266            t_im?359:   DS   2
                        267     
------                  268             RSEG  ?ID?_fft?MAIN
000000                  269            w_re?465:   DS   2
                        270     
------                  271             RSEG  ?ID?_fft?MAIN
000002                  272            w_im?466:   DS   2
                        273     
------                  274             RSEG  ?ID?_fft?MAIN
000004                  275            u_re?467:   DS   2
                        276     
------                  277             RSEG  ?ID?_fft?MAIN
000006                  278            u_im?468:   DS   2
                        279     
------                  280             RSEG  ?ID?_fft?MAIN
000008                  281            t_re?469:   DS   2
                        282     
------                  283             RSEG  ?ID?_fft?MAIN
00000A                  284            t_im?470:   DS   2
                        285     
------                  286             RSEG  ?ID?_fft?MAIN
00000C                  287               m?471:   DS   2
                        288     
------                  289             RSEG  ?ID?_fft?MAIN
00000E                  290               g?472:   DS   2
                        291     
------                  292             RSEG  ?ID?_fft?MAIN
000010                  293               b?473:   DS   2
                        294     
------                  295             RSEG  ?ID?_fft?MAIN
000012                  296              mt?474:   DS   2
                        297     
------                  298             RSEG  ?ID?_fft?MAIN
000014                  299               k?475:   DS   2
                        300     
------                  301             RSEG  ?ID?main?MAIN
000000                  302               n?576:   DS   2
                        303     
------                  304             RSEG  ?ID?main?MAIN
000002                  305            A_re?577:   DS   16
                        306     
------                  307             RSEG  ?ID?main?MAIN
000012                  308            A_im?578:   DS   16
                        309     ; /* gets no. of points from the user, initialize the points and roots of unity lookup t
                               able 
                        310     ;  * and lets fft go. finally bit-reverses the results and outputs them into a file. 
                        311     ;  * n should be a power of 2. 
                        312     ;  */
                        313     ; #include "Eco/reg24e1.h"
                        314     ; #include "Eco/eco_sys.h"
                        315     ; #include "utils/utils.h"
                        316     ; #include "serial/serial.h"
                        317     ; #include "isr/isr_rf.h"
                        318     ; #include "eeprom/eeprom.h"
                        319     ; #include "eco_page.h"
                        320     ; #include "adc/adc.h"
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     6

                        321     ; 
                        322     ; #include <math.h>
                        323     ; 
                        324     ; /* treats inp as a numbits number and bitreverses it. 
                        325     ;  * inp < 2^(numbits) for meaningful bit-reversal
                        326     ;  */ 
                        327     ; int bitrev(int idata inp, int idata numbits)
                        328     
------                  329             RSEG  ?PR?_bitrev?MAIN
000000                  330     _bitrev:
                        331             USING   0
                        332                             ; SOURCE LINE # 19
000000 8C00       F     333             MOV     numbits?041,R4
000002 8D00       F     334             MOV     numbits?041+01H,R5
                        335     ;---- Variable 'inp?040' assigned to Register 'R2/R3' ----
000004 AB07             336             MOV     R3,AR7
000006 AA06             337             MOV     R2,AR6
                        338     ; {
                        339                             ; SOURCE LINE # 20
                        340     ;       int idata i;
                        341     ;       int idata rev=0;
                        342                             ; SOURCE LINE # 22
000008 E4               343             CLR     A
000009 7800       F     344             MOV     R0,#LOW (rev?043)
00000B F6               345             MOV     @R0,A
00000C 08               346             INC     R0
00000D F6               347             MOV     @R0,A
                        348     ;       for (i=0; i < numbits; i++)
                        349                             ; SOURCE LINE # 23
00000E 7800       F     350             MOV     R0,#LOW (i?042)
000010 F6               351             MOV     @R0,A
000011 08               352             INC     R0
000012 F6               353             MOV     @R0,A
000013                  354     ?C0001:
000013 C3               355             CLR     C
000014 7800       F     356             MOV     R0,#LOW (i?042+01H)
000016 E6               357             MOV     A,@R0
000017 9500       F     358             SUBB    A,numbits?041+01H
000019 E500       F     359             MOV     A,numbits?041
00001B 6480             360             XRL     A,#080H
00001D F5F0             361             MOV     B,A
00001F 18               362             DEC     R0
000020 E6               363             MOV     A,@R0
000021 6480             364             XRL     A,#080H
000023 95F0             365             SUBB    A,B
000025 5026             366             JNC     ?C0002
                        367     ;       {
                        368                             ; SOURCE LINE # 24
                        369     ;               rev = (rev << 1) | (inp & 1);
                        370                             ; SOURCE LINE # 25
000027 7800       F     371             MOV     R0,#LOW (rev?043+01H)
000029 E6               372             MOV     A,@R0
00002A 25E0             373             ADD     A,ACC
00002C FF               374             MOV     R7,A
00002D 18               375             DEC     R0
00002E E6               376             MOV     A,@R0
00002F 33               377             RLC     A
000030 FE               378             MOV     R6,A
000031 EB               379             MOV     A,R3
000032 5401             380             ANL     A,#01H
000034 FD               381             MOV     R5,A
000035 EE               382             MOV     A,R6
000036 F6               383             MOV     @R0,A
000037 EF               384             MOV     A,R7
000038 4D               385             ORL     A,R5
000039 08               386             INC     R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     7

00003A F6               387             MOV     @R0,A
                        388     ;               inp >>= 1;
                        389                             ; SOURCE LINE # 26
00003B EA               390             MOV     A,R2
00003C A2E7             391             MOV     C,ACC.7
00003E 13               392             RRC     A
00003F FA               393             MOV     R2,A
000040 EB               394             MOV     A,R3
000041 13               395             RRC     A
000042 FB               396             MOV     R3,A
                        397     ;       }
                        398                             ; SOURCE LINE # 27
000043 7800       F     399             MOV     R0,#LOW (i?042+01H)
000045 06               400             INC     @R0
000046 E6               401             MOV     A,@R0
000047 18               402             DEC     R0
000048 70C9             403             JNZ     ?C0001
00004A 06               404             INC     @R0
00004B                  405     ?C0034:
00004B 80C6             406             SJMP    ?C0001
00004D                  407     ?C0002:
                        408     ;       return rev;
                        409                             ; SOURCE LINE # 28
00004D 7800       F     410             MOV     R0,#LOW (rev?043)
00004F E6               411             MOV     A,@R0
000050 FE               412             MOV     R6,A
000051 08               413             INC     R0
000052 E6               414             MOV     A,@R0
000053 FF               415             MOV     R7,A
                        416     ; }
                        417                             ; SOURCE LINE # 29
000054                  418     ?C0004:
000054 22               419             RET     
                        420     ; END OF _bitrev
                        421     
                        422     ; 
                        423     ; 
                        424     ; /* returns log n (to the base 2), if n is positive and power of 2 */ 
                        425     ; int log_2(int idata n) 
                        426     
------                  427             RSEG  ?PR?_log_2?MAIN
000000                  428     _log_2:
                        429             USING   0
                        430                             ; SOURCE LINE # 33
                        431     ;---- Variable 'n?144' assigned to Register 'R6/R7' ----
                        432     ; {
                        433                             ; SOURCE LINE # 34
                        434     ;       int idata res; 
                        435     ;       for (res=0; n >= 2; res++) 
                        436                             ; SOURCE LINE # 36
000000 E4               437             CLR     A
000001 7800       F     438             MOV     R0,#LOW (res?145)
000003 F6               439             MOV     @R0,A
000004 08               440             INC     R0
000005 F6               441             MOV     @R0,A
000006                  442     ?C0005:
000006 C3               443             CLR     C
000007 EF               444             MOV     A,R7
000008 9402             445             SUBB    A,#02H
00000A EE               446             MOV     A,R6
00000B 6480             447             XRL     A,#080H
00000D 9480             448             SUBB    A,#080H
00000F 4012             449             JC      ?C0006
                        450     ;               n = n >> 1; 
                        451                             ; SOURCE LINE # 37
000011 EE               452             MOV     A,R6
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     8

000012 A2E7             453             MOV     C,ACC.7
000014 13               454             RRC     A
000015 FE               455             MOV     R6,A
000016 EF               456             MOV     A,R7
000017 13               457             RRC     A
000018 FF               458             MOV     R7,A
000019 7800       F     459             MOV     R0,#LOW (res?145+01H)
00001B 06               460             INC     @R0
00001C E6               461             MOV     A,@R0
00001D 18               462             DEC     R0
00001E 70E6             463             JNZ     ?C0005
000020 06               464             INC     @R0
000021                  465     ?C0035:
000021 80E3             466             SJMP    ?C0005
000023                  467     ?C0006:
                        468     ;       return res; 
                        469                             ; SOURCE LINE # 38
000023 7800       F     470             MOV     R0,#LOW (res?145)
000025 E6               471             MOV     A,@R0
000026 FE               472             MOV     R6,A
000027 08               473             INC     R0
000028 E6               474             MOV     A,@R0
000029 FF               475             MOV     R7,A
                        476     ; }
                        477                             ; SOURCE LINE # 39
00002A                  478     ?C0008:
00002A 22               479             RET     
                        480     ; END OF _log_2
                        481     
                        482     ; 
                        483     ; 
                        484     ; 
                        485     ; /* W will contain roots of unity so that W[bitrev(i,log2n-1)] = e^(2*pi*i/n)
                        486     ;  * n should be a power of 2
                        487     ;  * Note: W is bit-reversal permuted because fft(..) goes faster if this is done.
                        488     ;  *       see that function for more details on why we treat 'i' as a (log2n-1) bit num
                               ber.
                        489     ;  */
                        490     ; void compute_W(int n, int W_re[], int W_im[])
                        491     
------                  492             RSEG  ?PR?_compute_W?MAIN
000000                  493     _compute_W:
                        494             USING   0
                        495                             ; SOURCE LINE # 48
000000 8E00       F     496             MOV     n?246,R6
000002 8F00       F     497             MOV     n?246+01H,R7
000004 8B00       F     498             MOV     W_re?247,R3
000006 8A00       F     499             MOV     W_re?247+01H,R2
000008 8900       F     500             MOV     W_re?247+02H,R1
                        501     ; {
                        502                             ; SOURCE LINE # 49
                        503     ;       int idata i;
                        504     ;       int idata br;
                        505     ;       int log2n = log_2(n);
                        506                             ; SOURCE LINE # 52
00000A 120000     F     507             LCALL   _log_2
00000D 8E00       F     508             MOV     log2n?251,R6
00000F 8F00       F     509             MOV     log2n?251+01H,R7
                        510     ; 
                        511     ;       for (i=0; i<(n/2); i++)
                        512                             ; SOURCE LINE # 54
000011 E4               513             CLR     A
000012 7800       F     514             MOV     R0,#LOW (i?249)
000014 F6               515             MOV     @R0,A
000015 08               516             INC     R0
000016 F6               517             MOV     @R0,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE     9

000017                  518     ?C0009:
000017 AE00       F     519             MOV     R6,n?246
000019 AF00       F     520             MOV     R7,n?246+01H
00001B 7C00             521             MOV     R4,#00H
00001D 7D02             522             MOV     R5,#02H
00001F 120000     E     523             LCALL   ?C?SIDIV
000022 AC06             524             MOV     R4,AR6
000024 AD07             525             MOV     R5,AR7
000026 7800       F     526             MOV     R0,#LOW (i?249)
000028 E6               527             MOV     A,@R0
000029 FE               528             MOV     R6,A
00002A 08               529             INC     R0
00002B E6               530             MOV     A,@R0
00002C FF               531             MOV     R7,A
00002D C3               532             CLR     C
00002E 9D               533             SUBB    A,R5
00002F EC               534             MOV     A,R4
000030 6480             535             XRL     A,#080H
000032 F8               536             MOV     R0,A
000033 EE               537             MOV     A,R6
000034 6480             538             XRL     A,#080H
000036 98               539             SUBB    A,R0
000037 4003             540             JC      $ + 5H
000039 020000     F     541             LJMP    ?C0012
                        542     ;       {
                        543                             ; SOURCE LINE # 55
                        544     ;               br = bitrev(i,log2n-1); 
                        545                             ; SOURCE LINE # 56
00003C E500       F     546             MOV     A,log2n?251+01H
00003E 24FF             547             ADD     A,#0FFH
000040 FD               548             MOV     R5,A
000041 E500       F     549             MOV     A,log2n?251
000043 34FF             550             ADDC    A,#0FFH
000045 FC               551             MOV     R4,A
000046 120000     F     552             LCALL   _bitrev
000049 7800       F     553             MOV     R0,#LOW (br?250)
00004B A606             554             MOV     @R0,AR6
00004D 08               555             INC     R0
00004E A607             556             MOV     @R0,AR7
                        557     ;               W_re[br] = cos((i*2*3)/(n));  
                        558                             ; SOURCE LINE # 57
000050 7800       F     559             MOV     R0,#LOW (i?249)
000052 E6               560             MOV     A,@R0
000053 FE               561             MOV     R6,A
000054 08               562             INC     R0
000055 E6               563             MOV     A,@R0
000056 FF               564             MOV     R7,A
000057 7C00             565             MOV     R4,#00H
000059 7D06             566             MOV     R5,#06H
00005B 120000     E     567             LCALL   ?C?IMUL
00005E AC00       F     568             MOV     R4,n?246
000060 AD00       F     569             MOV     R5,n?246+01H
000062 120000     E     570             LCALL   ?C?SIDIV
000065 AC06             571             MOV     R4,AR6
000067 AD07             572             MOV     R5,AR7
000069 EC               573             MOV     A,R4
00006A 120000     E     574             LCALL   ?C?FCASTI
00006D 120000     E     575             LCALL   _cos
000070 120000     E     576             LCALL   ?C?CASTF
000073 AD07             577             MOV     R5,AR7
000075 7800       F     578             MOV     R0,#LOW (br?250+01H)
000077 E6               579             MOV     A,@R0
000078 25E0             580             ADD     A,ACC
00007A FF               581             MOV     R7,A
00007B 18               582             DEC     R0
00007C E6               583             MOV     A,@R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    10

00007D 33               584             RLC     A
00007E AB00       F     585             MOV     R3,W_re?247
000080 AA00       F     586             MOV     R2,W_re?247+01H
000082 A900       F     587             MOV     R1,W_re?247+02H
000084 8F82             588             MOV     DPL,R7
000086 F583             589             MOV     DPH,A
000088 EE               590             MOV     A,R6
000089 8DF0             591             MOV     B,R5
00008B 120000     E     592             LCALL   ?C?ISTOPTR
                        593     ;               W_im[br] = sin((i*2*3)/(n));  
                        594                             ; SOURCE LINE # 58
00008E 7800       F     595             MOV     R0,#LOW (i?249)
000090 E6               596             MOV     A,@R0
000091 FE               597             MOV     R6,A
000092 08               598             INC     R0
000093 E6               599             MOV     A,@R0
000094 FF               600             MOV     R7,A
000095 7C00             601             MOV     R4,#00H
000097 7D06             602             MOV     R5,#06H
000099 120000     E     603             LCALL   ?C?IMUL
00009C AC00       F     604             MOV     R4,n?246
00009E AD00       F     605             MOV     R5,n?246+01H
0000A0 120000     E     606             LCALL   ?C?SIDIV
0000A3 AC06             607             MOV     R4,AR6
0000A5 AD07             608             MOV     R5,AR7
0000A7 EC               609             MOV     A,R4
0000A8 120000     E     610             LCALL   ?C?FCASTI
0000AB 120000     E     611             LCALL   _sin
0000AE 120000     E     612             LCALL   ?C?CASTF
0000B1 AD07             613             MOV     R5,AR7
0000B3 7800       F     614             MOV     R0,#LOW (br?250+01H)
0000B5 E6               615             MOV     A,@R0
0000B6 25E0             616             ADD     A,ACC
0000B8 FF               617             MOV     R7,A
0000B9 18               618             DEC     R0
0000BA E6               619             MOV     A,@R0
0000BB 33               620             RLC     A
0000BC AB00       F     621             MOV     R3,W_im?248
0000BE AA00       F     622             MOV     R2,W_im?248+01H
0000C0 A900       F     623             MOV     R1,W_im?248+02H
0000C2 8F82             624             MOV     DPL,R7
0000C4 F583             625             MOV     DPH,A
0000C6 EE               626             MOV     A,R6
0000C7 8DF0             627             MOV     B,R5
0000C9 120000     E     628             LCALL   ?C?ISTOPTR
                        629     ;       }
                        630                             ; SOURCE LINE # 59
0000CC 7800       F     631             MOV     R0,#LOW (i?249+01H)
0000CE 06               632             INC     @R0
0000CF E6               633             MOV     A,@R0
0000D0 18               634             DEC     R0
0000D1 6003             635             JZ      $ + 5H
0000D3 020000     F     636             LJMP    ?C0009
0000D6 06               637             INC     @R0
0000D7                  638     ?C0036:
0000D7 020000     F     639             LJMP    ?C0009
                        640     ; }
                        641                             ; SOURCE LINE # 60
0000DA                  642     ?C0012:
0000DA 22               643             RET     
                        644     ; END OF _compute_W
                        645     
                        646     ; 
                        647     ; 
                        648     ; /* permutes the array using a bit-reversal permutation */ 
                        649     ; void permute_bitrev(int n, int *A_re, int *A_im) 
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    11

                        650     
------                  651             RSEG  ?PR?_permute_bitrev?MAIN
000000                  652     _permute_bitrev:
                        653             USING   0
                        654                             ; SOURCE LINE # 64
000000 8E00       F     655             MOV     n?352,R6
000002 8F00       F     656             MOV     n?352+01H,R7
000004 8B00       F     657             MOV     A_re?353,R3
000006 8A00       F     658             MOV     A_re?353+01H,R2
000008 8900       F     659             MOV     A_re?353+02H,R1
                        660     ; { 
                        661                             ; SOURCE LINE # 65
                        662     ;       int idata i;
                        663     ;       int idata bri;
                        664     ;       int idata log2n;
                        665     ;       int idata t_re;
                        666     ;       int idata t_im;
                        667     ; 
                        668     ;       log2n = log_2(n); 
                        669                             ; SOURCE LINE # 72
00000A 120000     F     670             LCALL   _log_2
00000D 7800       F     671             MOV     R0,#LOW (log2n?357)
00000F A606             672             MOV     @R0,AR6
000011 08               673             INC     R0
000012 A607             674             MOV     @R0,AR7
                        675     ; 
                        676     ;       for (i=0; i<n; i++)
                        677                             ; SOURCE LINE # 74
000014 E4               678             CLR     A
000015 7800       F     679             MOV     R0,#LOW (i?355)
000017 F6               680             MOV     @R0,A
000018 08               681             INC     R0
000019 F6               682             MOV     @R0,A
00001A                  683     ?C0013:
00001A 7800       F     684             MOV     R0,#LOW (i?355)
00001C E6               685             MOV     A,@R0
00001D FE               686             MOV     R6,A
00001E 08               687             INC     R0
00001F E6               688             MOV     A,@R0
000020 FF               689             MOV     R7,A
000021 C3               690             CLR     C
000022 9500       F     691             SUBB    A,n?352+01H
000024 E500       F     692             MOV     A,n?352
000026 6480             693             XRL     A,#080H
000028 F8               694             MOV     R0,A
000029 EE               695             MOV     A,R6
00002A 6480             696             XRL     A,#080H
00002C 98               697             SUBB    A,R0
00002D 4003             698             JC      $ + 5H
00002F 020000     F     699             LJMP    ?C0017
                        700     ;       {
                        701                             ; SOURCE LINE # 75
                        702     ;               bri = bitrev(i, log2n);
                        703                             ; SOURCE LINE # 76
000032 7800       F     704             MOV     R0,#LOW (log2n?357)
000034 E6               705             MOV     A,@R0
000035 FC               706             MOV     R4,A
000036 08               707             INC     R0
000037 E6               708             MOV     A,@R0
000038 FD               709             MOV     R5,A
000039 120000     F     710             LCALL   _bitrev
00003C 7800       F     711             MOV     R0,#LOW (bri?356)
00003E EE               712             MOV     A,R6
00003F F6               713             MOV     @R0,A
000040 08               714             INC     R0
000041 EF               715             MOV     A,R7
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    12

000042 F6               716             MOV     @R0,A
                        717     ; 
                        718     ;               /* skip already swapped elements */
                        719     ;               if (bri <= i) continue;
                        720                             ; SOURCE LINE # 79
000043 7800       F     721             MOV     R0,#LOW (i?355)
000045 E6               722             MOV     A,@R0
000046 FC               723             MOV     R4,A
000047 08               724             INC     R0
000048 E6               725             MOV     A,@R0
000049 FD               726             MOV     R5,A
00004A D3               727             SETB    C
00004B EF               728             MOV     A,R7
00004C 9D               729             SUBB    A,R5
00004D EC               730             MOV     A,R4
00004E 6480             731             XRL     A,#080H
000050 F8               732             MOV     R0,A
000051 EE               733             MOV     A,R6
000052 6480             734             XRL     A,#080H
000054 98               735             SUBB    A,R0
000055 5003             736             JNC     $ + 5H
000057 020000     F     737             LJMP    ?C0015
00005A                  738     ?C0016:
                        739     ; 
                        740     ;               t_re = A_re[i];
                        741                             ; SOURCE LINE # 81
00005A 7800       F     742             MOV     R0,#LOW (i?355+01H)
00005C E6               743             MOV     A,@R0
00005D 25E0             744             ADD     A,ACC
00005F FF               745             MOV     R7,A
000060 18               746             DEC     R0
000061 E6               747             MOV     A,@R0
000062 33               748             RLC     A
000063 FE               749             MOV     R6,A
000064 AB00       F     750             MOV     R3,A_re?353
000066 AA00       F     751             MOV     R2,A_re?353+01H
000068 A900       F     752             MOV     R1,A_re?353+02H
00006A 8F82             753             MOV     DPL,R7
00006C F583             754             MOV     DPH,A
00006E 120000     E     755             LCALL   ?C?ILDOPTR
000071 7800       F     756             MOV     R0,#LOW (t_re?358)
000073 A6F0             757             MOV     @R0,B
000075 08               758             INC     R0
000076 F6               759             MOV     @R0,A
                        760     ;               t_im = A_im[i];
                        761                             ; SOURCE LINE # 82
000077 AB00       F     762             MOV     R3,A_im?354
000079 AA00       F     763             MOV     R2,A_im?354+01H
00007B A900       F     764             MOV     R1,A_im?354+02H
00007D 8F82             765             MOV     DPL,R7
00007F 8E83             766             MOV     DPH,R6
000081 120000     E     767             LCALL   ?C?ILDOPTR
000084 7800       F     768             MOV     R0,#LOW (t_im?359)
000086 A6F0             769             MOV     @R0,B
000088 08               770             INC     R0
000089 F6               771             MOV     @R0,A
                        772     ;               A_re[i]= A_re[bri];
                        773                             ; SOURCE LINE # 83
00008A 7800       F     774             MOV     R0,#LOW (bri?356+01H)
00008C E6               775             MOV     A,@R0
00008D 25E0             776             ADD     A,ACC
00008F FF               777             MOV     R7,A
000090 18               778             DEC     R0
000091 E6               779             MOV     A,@R0
000092 33               780             RLC     A
000093 AB00       F     781             MOV     R3,A_re?353
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    13

000095 AA00       F     782             MOV     R2,A_re?353+01H
000097 A900       F     783             MOV     R1,A_re?353+02H
000099 8F82             784             MOV     DPL,R7
00009B F583             785             MOV     DPH,A
00009D 120000     E     786             LCALL   ?C?ILDOPTR
0000A0 FD               787             MOV     R5,A
0000A1 7800       F     788             MOV     R0,#LOW (i?355+01H)
0000A3 E6               789             MOV     A,@R0
0000A4 25E0             790             ADD     A,ACC
0000A6 FF               791             MOV     R7,A
0000A7 18               792             DEC     R0
0000A8 E6               793             MOV     A,@R0
0000A9 33               794             RLC     A
0000AA 8F82             795             MOV     DPL,R7
0000AC F583             796             MOV     DPH,A
0000AE E5F0             797             MOV     A,B
0000B0 8DF0             798             MOV     B,R5
0000B2 120000     E     799             LCALL   ?C?ISTOPTR
                        800     ;               A_im[i]= A_im[bri];
                        801                             ; SOURCE LINE # 84
0000B5 7800       F     802             MOV     R0,#LOW (bri?356+01H)
0000B7 E6               803             MOV     A,@R0
0000B8 25E0             804             ADD     A,ACC
0000BA FF               805             MOV     R7,A
0000BB 18               806             DEC     R0
0000BC E6               807             MOV     A,@R0
0000BD 33               808             RLC     A
0000BE AB00       F     809             MOV     R3,A_im?354
0000C0 AA00       F     810             MOV     R2,A_im?354+01H
0000C2 A900       F     811             MOV     R1,A_im?354+02H
0000C4 8F82             812             MOV     DPL,R7
0000C6 F583             813             MOV     DPH,A
0000C8 120000     E     814             LCALL   ?C?ILDOPTR
0000CB FD               815             MOV     R5,A
0000CC 7800       F     816             MOV     R0,#LOW (i?355+01H)
0000CE E6               817             MOV     A,@R0
0000CF 25E0             818             ADD     A,ACC
0000D1 FF               819             MOV     R7,A
0000D2 18               820             DEC     R0
0000D3 E6               821             MOV     A,@R0
0000D4 33               822             RLC     A
0000D5 8F82             823             MOV     DPL,R7
0000D7 F583             824             MOV     DPH,A
0000D9 E5F0             825             MOV     A,B
0000DB 8DF0             826             MOV     B,R5
0000DD 120000     E     827             LCALL   ?C?ISTOPTR
                        828     ;               A_re[bri]= t_re;
                        829                             ; SOURCE LINE # 85
0000E0 7800       F     830             MOV     R0,#LOW (t_re?358)
0000E2 E6               831             MOV     A,@R0
0000E3 FC               832             MOV     R4,A
0000E4 08               833             INC     R0
0000E5 E6               834             MOV     A,@R0
0000E6 FD               835             MOV     R5,A
0000E7 7800       F     836             MOV     R0,#LOW (bri?356+01H)
0000E9 E6               837             MOV     A,@R0
0000EA 25E0             838             ADD     A,ACC
0000EC FF               839             MOV     R7,A
0000ED 18               840             DEC     R0
0000EE E6               841             MOV     A,@R0
0000EF 33               842             RLC     A
0000F0 FE               843             MOV     R6,A
0000F1 AB00       F     844             MOV     R3,A_re?353
0000F3 AA00       F     845             MOV     R2,A_re?353+01H
0000F5 A900       F     846             MOV     R1,A_re?353+02H
0000F7 8F82             847             MOV     DPL,R7
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    14

0000F9 F583             848             MOV     DPH,A
0000FB EC               849             MOV     A,R4
0000FC 8DF0             850             MOV     B,R5
0000FE 120000     E     851             LCALL   ?C?ISTOPTR
                        852     ;               A_im[bri]= t_im;
                        853                             ; SOURCE LINE # 86
000101 7800       F     854             MOV     R0,#LOW (t_im?359)
000103 E6               855             MOV     A,@R0
000104 FD               856             MOV     R5,A
000105 08               857             INC     R0
000106 E6               858             MOV     A,@R0
000107 AB00       F     859             MOV     R3,A_im?354
000109 AA00       F     860             MOV     R2,A_im?354+01H
00010B A900       F     861             MOV     R1,A_im?354+02H
00010D 8F82             862             MOV     DPL,R7
00010F 8E83             863             MOV     DPH,R6
000111 CD               864             XCH     A,R5
000112 8DF0             865             MOV     B,R5
000114 120000     E     866             LCALL   ?C?ISTOPTR
                        867     ;       }  
                        868                             ; SOURCE LINE # 87
000117                  869     ?C0015:
000117 7800       F     870             MOV     R0,#LOW (i?355+01H)
000119 06               871             INC     @R0
00011A E6               872             MOV     A,@R0
00011B 18               873             DEC     R0
00011C 6003             874             JZ      $ + 5H
00011E 020000     F     875             LJMP    ?C0013
000121 06               876             INC     @R0
000122                  877     ?C0037:
000122 020000     F     878             LJMP    ?C0013
                        879     ; } 
                        880                             ; SOURCE LINE # 88
000125                  881     ?C0017:
000125 22               882             RET     
                        883     ; END OF _permute_bitrev
                        884     
                        885     ; 
                        886     ; 
                        887     ; /* fft on a set of n points given by A_re and A_im. Bit-reversal permuted roots-of-uni
                               ty lookup table
                        888     ;  * is given by W_re and W_im. More specifically,  W is the array of first n/2 nth root
                               s of unity stored
                        889     ;  * in a permuted bitreversal order.
                        890     ;  *
                        891     ;  * FFT - Decimation In Time FFT with input array in correct order and output array in 
                               bit-reversed order.
                        892     ;  *
                        893     ;  * REQ: n should be a power of 2 to work. 
                        894     ;  *
                        895     ;  * Note: - See www.cs.berkeley.edu/~randit for her thesis on VIRAM FFTs and other deta
                               ils about VHALF section of the algo
                        896     ;  *         (thesis link - http://www.cs.berkeley.edu/~randit/papers/csd-00-1106.pdf)
                        897     ;  *       - See the foll. CS267 website for details of the Decimation In Time FFT imple
                               mented here.
                        898     ;  *         (www.cs.berkeley.edu/~demmel/cs267/lecture24/lecture24.html)
                        899     ;  *       - Also, look "Cormen Leicester Rivest [CLR] - Introduction to Algorithms" boo
                               k for another variant of Iterative-FFT
                        900     ;  */
                        901     ; 
                        902     ; //void fft(int n, double *A_re, double *A_im, double *W_re, double *W_im) 
                        903     ; void fft(int n, int A_re[], int A_im[], int W_re[], int W_im[]) 
                        904     
------                  905             RSEG  ?PR?_fft?MAIN
000000                  906     _fft:
                        907             USING   0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    15

                        908                             ; SOURCE LINE # 107
000000 8E00       F     909             MOV     n?460,R6
000002 8F00       F     910             MOV     n?460+01H,R7
000004 8B00       F     911             MOV     A_re?461,R3
000006 8A00       F     912             MOV     A_re?461+01H,R2
000008 8900       F     913             MOV     A_re?461+02H,R1
                        914     ; {
                        915                             ; SOURCE LINE # 108
                        916     ;       int idata w_re, w_im, u_re, u_im, t_re, t_im;
                        917     ;       int idata m, g, b;
                        918     ;       //int i;
                        919     ;       int idata mt, k;
                        920     ; 
                        921     ;       /* for each stage */  
                        922     ;       for (m=n; m>=2; m=m>>1) 
                        923                             ; SOURCE LINE # 115
00000A 7800       F     924             MOV     R0,#LOW (m?471)
00000C A600       F     925             MOV     @R0,n?460
00000E 08               926             INC     R0
00000F A600       F     927             MOV     @R0,n?460+01H
000011                  928     ?C0018:
000011 7800       F     929             MOV     R0,#LOW (m?471)
000013 E6               930             MOV     A,@R0
000014 FE               931             MOV     R6,A
000015 08               932             INC     R0
000016 E6               933             MOV     A,@R0
000017 FF               934             MOV     R7,A
000018 C3               935             CLR     C
000019 9402             936             SUBB    A,#02H
00001B EE               937             MOV     A,R6
00001C 6480             938             XRL     A,#080H
00001E 9480             939             SUBB    A,#080H
000020 5003             940             JNC     $ + 5H
000022 020000     F     941             LJMP    ?C0027
                        942     ;       {
                        943                             ; SOURCE LINE # 116
                        944     ;               /* m = n/2^s; mt = m/2; */
                        945     ;               mt = m >> 1;
                        946                             ; SOURCE LINE # 118
000025 EE               947             MOV     A,R6
000026 A2E7             948             MOV     C,ACC.7
000028 13               949             RRC     A
000029 7900       F     950             MOV     R1,#LOW (mt?474)
00002B F7               951             MOV     @R1,A
00002C EF               952             MOV     A,R7
00002D 13               953             RRC     A
00002E 09               954             INC     R1
00002F F7               955             MOV     @R1,A
                        956     ; 
                        957     ;               /* for each group of butterfly */ 
                        958     ;               for (g=0,k=0; g<n; g+=m,k++) 
                        959                             ; SOURCE LINE # 121
000030 E4               960             CLR     A
000031 08               961             INC     R0
000032 F6               962             MOV     @R0,A
000033 08               963             INC     R0
000034 F6               964             MOV     @R0,A
000035 7800       F     965             MOV     R0,#LOW (k?475)
000037 F6               966             MOV     @R0,A
000038 08               967             INC     R0
000039 F6               968             MOV     @R0,A
00003A                  969     ?C0021:
00003A C3               970             CLR     C
00003B 7800       F     971             MOV     R0,#LOW (g?472+01H)
00003D E6               972             MOV     A,@R0
00003E 9500       F     973             SUBB    A,n?460+01H
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    16

000040 E500       F     974             MOV     A,n?460
000042 6480             975             XRL     A,#080H
000044 F5F0             976             MOV     B,A
000046 18               977             DEC     R0
000047 E6               978             MOV     A,@R0
000048 6480             979             XRL     A,#080H
00004A 95F0             980             SUBB    A,B
00004C 4003             981             JC      $ + 5H
00004E 020000     F     982             LJMP    ?C0020
                        983     ;               {
                        984                             ; SOURCE LINE # 122
                        985     ;                       /* each butterfly group uses only one root of unity. actually, i
                               t is the bitrev of this group's number k.
                        986     ;                        * BUT 'bitrev' it as a log2n-1 bit number because we are using 
                               a lookup array of nth root of unity and
                        987     ;                        * using cancellation lemma to scale nth root to n/2, n/4,... th
                                root.
                        988     ;                        *
                        989     ;                        * It turns out like the foll.
                        990     ;                        *   w.re = W[bitrev(k, log2n-1)].re;
                        991     ;                        *   w.im = W[bitrev(k, log2n-1)].im;
                        992     ;                        * Still, we just use k, because the lookup array itself is bit-
                               reversal permuted. 
                        993     ;                        */
                        994     ;                       w_re = W_re[k];
                        995                             ; SOURCE LINE # 132
000051 7800       F     996             MOV     R0,#LOW (k?475+01H)
000053 E6               997             MOV     A,@R0
000054 25E0             998             ADD     A,ACC
000056 FF               999             MOV     R7,A
000057 18              1000             DEC     R0
000058 E6              1001             MOV     A,@R0
000059 33              1002             RLC     A
00005A FE              1003             MOV     R6,A
00005B AB00       F    1004             MOV     R3,W_re?463
00005D AA00       F    1005             MOV     R2,W_re?463+01H
00005F A900       F    1006             MOV     R1,W_re?463+02H
000061 8F82            1007             MOV     DPL,R7
000063 F583            1008             MOV     DPH,A
000065 120000     E    1009             LCALL   ?C?ILDOPTR
000068 7800       F    1010             MOV     R0,#LOW (w_re?465)
00006A A6F0            1011             MOV     @R0,B
00006C 08              1012             INC     R0
00006D F6              1013             MOV     @R0,A
                       1014     ;                       w_im = W_im[k];
                       1015                             ; SOURCE LINE # 133
00006E AB00       F    1016             MOV     R3,W_im?464
000070 AA00       F    1017             MOV     R2,W_im?464+01H
000072 A900       F    1018             MOV     R1,W_im?464+02H
000074 8F82            1019             MOV     DPL,R7
000076 8E83            1020             MOV     DPH,R6
000078 120000     E    1021             LCALL   ?C?ILDOPTR
00007B 7800       F    1022             MOV     R0,#LOW (w_im?466)
00007D A6F0            1023             MOV     @R0,B
00007F 08              1024             INC     R0
000080 F6              1025             MOV     @R0,A
                       1026     ; 
                       1027     ;                       /* for each butterfly */ 
                       1028     ;                       for (b=g; b<(g+mt); b++) 
                       1029                             ; SOURCE LINE # 136
000081 7800       F    1030             MOV     R0,#LOW (g?472)
000083 E6              1031             MOV     A,@R0
000084 FE              1032             MOV     R6,A
000085 08              1033             INC     R0
000086 E6              1034             MOV     A,@R0
000087 FF              1035             MOV     R7,A
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    17

000088 08              1036             INC     R0
000089 A606            1037             MOV     @R0,AR6
00008B 08              1038             INC     R0
00008C A607            1039             MOV     @R0,AR7
00008E                 1040     ?C0024:
00008E 7900       F    1041             MOV     R1,#LOW (g?472+01H)
000090 E7              1042             MOV     A,@R1
000091 7800       F    1043             MOV     R0,#LOW (mt?474+01H)
000093 26              1044             ADD     A,@R0
000094 FF              1045             MOV     R7,A
000095 19              1046             DEC     R1
000096 E7              1047             MOV     A,@R1
000097 18              1048             DEC     R0
000098 36              1049             ADDC    A,@R0
000099 FE              1050             MOV     R6,A
00009A C3              1051             CLR     C
00009B 18              1052             DEC     R0
00009C E6              1053             MOV     A,@R0
00009D 9F              1054             SUBB    A,R7
00009E EE              1055             MOV     A,R6
00009F 6480            1056             XRL     A,#080H
0000A1 F5F0            1057             MOV     B,A
0000A3 18              1058             DEC     R0
0000A4 E6              1059             MOV     A,@R0
0000A5 6480            1060             XRL     A,#080H
0000A7 95F0            1061             SUBB    A,B
0000A9 4003            1062             JC      $ + 5H
0000AB 020000     F    1063             LJMP    ?C0023
                       1064     ;                       {
                       1065                             ; SOURCE LINE # 137
                       1066     ;                               /* printf("bf %d %d %d %f %f %f %f\n", m, g, b, A_re[b],
                                A_im[b], A_re[b+mt], A_im[b+mt]);
                       1067     ;                                */ 
                       1068     ;                               //printf("bf %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1069     ; 
                       1070     ;                               /* t = w * A[b+mt] */
                       1071     ;                               t_re = w_re * A_re[b+mt] - w_im * A_im[b+mt];
                       1072                             ; SOURCE LINE # 143
0000AE 7900       F    1073             MOV     R1,#LOW (b?473+01H)
0000B0 E7              1074             MOV     A,@R1
0000B1 7800       F    1075             MOV     R0,#LOW (mt?474+01H)
0000B3 26              1076             ADD     A,@R0
0000B4 FF              1077             MOV     R7,A
0000B5 19              1078             DEC     R1
0000B6 E7              1079             MOV     A,@R1
0000B7 18              1080             DEC     R0
0000B8 36              1081             ADDC    A,@R0
0000B9 FE              1082             MOV     R6,A
0000BA EF              1083             MOV     A,R7
0000BB 25E0            1084             ADD     A,ACC
0000BD FF              1085             MOV     R7,A
0000BE EE              1086             MOV     A,R6
0000BF 33              1087             RLC     A
0000C0 AB00       F    1088             MOV     R3,A_im?462
0000C2 AA00       F    1089             MOV     R2,A_im?462+01H
0000C4 A900       F    1090             MOV     R1,A_im?462+02H
0000C6 8F82            1091             MOV     DPL,R7
0000C8 F583            1092             MOV     DPH,A
0000CA 120000     E    1093             LCALL   ?C?ILDOPTR
0000CD FD              1094             MOV     R5,A
0000CE ACF0            1095             MOV     R4,B
0000D0 7800       F    1096             MOV     R0,#LOW (w_im?466)
0000D2 E6              1097             MOV     A,@R0
0000D3 FE              1098             MOV     R6,A
0000D4 08              1099             INC     R0
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    18

0000D5 E6              1100             MOV     A,@R0
0000D6 FF              1101             MOV     R7,A
0000D7 120000     E    1102             LCALL   ?C?IMUL
0000DA C006            1103             PUSH    AR6
0000DC C007            1104             PUSH    AR7
0000DE 7900       F    1105             MOV     R1,#LOW (b?473+01H)
0000E0 E7              1106             MOV     A,@R1
0000E1 7800       F    1107             MOV     R0,#LOW (mt?474+01H)
0000E3 26              1108             ADD     A,@R0
0000E4 FF              1109             MOV     R7,A
0000E5 19              1110             DEC     R1
0000E6 E7              1111             MOV     A,@R1
0000E7 18              1112             DEC     R0
0000E8 36              1113             ADDC    A,@R0
0000E9 FE              1114             MOV     R6,A
0000EA EF              1115             MOV     A,R7
0000EB 25E0            1116             ADD     A,ACC
0000ED FF              1117             MOV     R7,A
0000EE EE              1118             MOV     A,R6
0000EF 33              1119             RLC     A
0000F0 AB00       F    1120             MOV     R3,A_re?461
0000F2 AA00       F    1121             MOV     R2,A_re?461+01H
0000F4 A900       F    1122             MOV     R1,A_re?461+02H
0000F6 8F82            1123             MOV     DPL,R7
0000F8 F583            1124             MOV     DPH,A
0000FA 120000     E    1125             LCALL   ?C?ILDOPTR
0000FD FB              1126             MOV     R3,A
0000FE AAF0            1127             MOV     R2,B
000100 7800       F    1128             MOV     R0,#LOW (w_re?465)
000102 E6              1129             MOV     A,@R0
000103 FE              1130             MOV     R6,A
000104 08              1131             INC     R0
000105 E6              1132             MOV     A,@R0
000106 FF              1133             MOV     R7,A
000107 AD03            1134             MOV     R5,AR3
000109 AC02            1135             MOV     R4,AR2
00010B 120000     E    1136             LCALL   ?C?IMUL
00010E AC06            1137             MOV     R4,AR6
000110 AD07            1138             MOV     R5,AR7
000112 D007            1139             POP     AR7
000114 D006            1140             POP     AR6
000116 C3              1141             CLR     C
000117 ED              1142             MOV     A,R5
000118 9F              1143             SUBB    A,R7
000119 7800       F    1144             MOV     R0,#LOW (t_re?469+01H)
00011B F6              1145             MOV     @R0,A
00011C EC              1146             MOV     A,R4
00011D 9E              1147             SUBB    A,R6
00011E 18              1148             DEC     R0
00011F F6              1149             MOV     @R0,A
                       1150     ;                               t_im = w_re * A_im[b+mt] + w_im * A_re[b+mt];
                       1151                             ; SOURCE LINE # 144
000120 7800       F    1152             MOV     R0,#LOW (w_im?466)
000122 E6              1153             MOV     A,@R0
000123 FE              1154             MOV     R6,A
000124 08              1155             INC     R0
000125 E6              1156             MOV     A,@R0
000126 FF              1157             MOV     R7,A
000127 AD03            1158             MOV     R5,AR3
000129 AC02            1159             MOV     R4,AR2
00012B 120000     E    1160             LCALL   ?C?IMUL
00012E C006            1161             PUSH    AR6
000130 C007            1162             PUSH    AR7
000132 7900       F    1163             MOV     R1,#LOW (b?473+01H)
000134 E7              1164             MOV     A,@R1
000135 7800       F    1165             MOV     R0,#LOW (mt?474+01H)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    19

000137 26              1166             ADD     A,@R0
000138 FF              1167             MOV     R7,A
000139 19              1168             DEC     R1
00013A E7              1169             MOV     A,@R1
00013B 18              1170             DEC     R0
00013C 36              1171             ADDC    A,@R0
00013D FE              1172             MOV     R6,A
00013E EF              1173             MOV     A,R7
00013F 25E0            1174             ADD     A,ACC
000141 FF              1175             MOV     R7,A
000142 EE              1176             MOV     A,R6
000143 33              1177             RLC     A
000144 AB00       F    1178             MOV     R3,A_im?462
000146 AA00       F    1179             MOV     R2,A_im?462+01H
000148 A900       F    1180             MOV     R1,A_im?462+02H
00014A 8F82            1181             MOV     DPL,R7
00014C F583            1182             MOV     DPH,A
00014E 120000     E    1183             LCALL   ?C?ILDOPTR
000151 FD              1184             MOV     R5,A
000152 ACF0            1185             MOV     R4,B
000154 7800       F    1186             MOV     R0,#LOW (w_re?465)
000156 E6              1187             MOV     A,@R0
000157 FE              1188             MOV     R6,A
000158 08              1189             INC     R0
000159 E6              1190             MOV     A,@R0
00015A FF              1191             MOV     R7,A
00015B 120000     E    1192             LCALL   ?C?IMUL
00015E D0E0            1193             POP     ACC
000160 2F              1194             ADD     A,R7
000161 7800       F    1195             MOV     R0,#LOW (t_im?470+01H)
000163 F6              1196             MOV     @R0,A
000164 D0E0            1197             POP     ACC
000166 3E              1198             ADDC    A,R6
000167 18              1199             DEC     R0
000168 F6              1200             MOV     @R0,A
                       1201     ; 
                       1202     ;                               /* u = A[b]; in[b] = u + t; in[b+mt] = u - t; */
                       1203     ;                               u_re = A_re[b];
                       1204                             ; SOURCE LINE # 147
000169 7800       F    1205             MOV     R0,#LOW (b?473+01H)
00016B E6              1206             MOV     A,@R0
00016C 25E0            1207             ADD     A,ACC
00016E FF              1208             MOV     R7,A
00016F 18              1209             DEC     R0
000170 E6              1210             MOV     A,@R0
000171 33              1211             RLC     A
000172 FE              1212             MOV     R6,A
000173 AB00       F    1213             MOV     R3,A_re?461
000175 AA00       F    1214             MOV     R2,A_re?461+01H
000177 A900       F    1215             MOV     R1,A_re?461+02H
000179 8F82            1216             MOV     DPL,R7
00017B F583            1217             MOV     DPH,A
00017D 120000     E    1218             LCALL   ?C?ILDOPTR
000180 7800       F    1219             MOV     R0,#LOW (u_re?467)
000182 A6F0            1220             MOV     @R0,B
000184 08              1221             INC     R0
000185 F6              1222             MOV     @R0,A
                       1223     ;                               u_im = A_im[b];
                       1224                             ; SOURCE LINE # 148
000186 AB00       F    1225             MOV     R3,A_im?462
000188 AA00       F    1226             MOV     R2,A_im?462+01H
00018A A900       F    1227             MOV     R1,A_im?462+02H
00018C 8F82            1228             MOV     DPL,R7
00018E 8E83            1229             MOV     DPH,R6
000190 120000     E    1230             LCALL   ?C?ILDOPTR
000193 7800       F    1231             MOV     R0,#LOW (u_im?468)
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    20

000195 A6F0            1232             MOV     @R0,B
000197 08              1233             INC     R0
000198 F6              1234             MOV     @R0,A
                       1235     ;                               A_re[b] = u_re + t_re;
                       1236                             ; SOURCE LINE # 149
000199 7900       F    1237             MOV     R1,#LOW (u_re?467+01H)
00019B E7              1238             MOV     A,@R1
00019C 7800       F    1239             MOV     R0,#LOW (t_re?469+01H)
00019E 26              1240             ADD     A,@R0
00019F FD              1241             MOV     R5,A
0001A0 19              1242             DEC     R1
0001A1 E7              1243             MOV     A,@R1
0001A2 18              1244             DEC     R0
0001A3 36              1245             ADDC    A,@R0
0001A4 FC              1246             MOV     R4,A
0001A5 7800       F    1247             MOV     R0,#LOW (b?473+01H)
0001A7 E6              1248             MOV     A,@R0
0001A8 25E0            1249             ADD     A,ACC
0001AA FF              1250             MOV     R7,A
0001AB 18              1251             DEC     R0
0001AC E6              1252             MOV     A,@R0
0001AD 33              1253             RLC     A
0001AE AB00       F    1254             MOV     R3,A_re?461
0001B0 AA00       F    1255             MOV     R2,A_re?461+01H
0001B2 A900       F    1256             MOV     R1,A_re?461+02H
0001B4 8F82            1257             MOV     DPL,R7
0001B6 F583            1258             MOV     DPH,A
0001B8 EC              1259             MOV     A,R4
0001B9 8DF0            1260             MOV     B,R5
0001BB 120000     E    1261             LCALL   ?C?ISTOPTR
                       1262     ;                               A_im[b] = u_im + t_im;
                       1263                             ; SOURCE LINE # 150
0001BE 7900       F    1264             MOV     R1,#LOW (u_im?468+01H)
0001C0 E7              1265             MOV     A,@R1
0001C1 7800       F    1266             MOV     R0,#LOW (t_im?470+01H)
0001C3 26              1267             ADD     A,@R0
0001C4 FD              1268             MOV     R5,A
0001C5 19              1269             DEC     R1
0001C6 E7              1270             MOV     A,@R1
0001C7 18              1271             DEC     R0
0001C8 36              1272             ADDC    A,@R0
0001C9 FC              1273             MOV     R4,A
0001CA 7800       F    1274             MOV     R0,#LOW (b?473+01H)
0001CC E6              1275             MOV     A,@R0
0001CD 25E0            1276             ADD     A,ACC
0001CF FF              1277             MOV     R7,A
0001D0 18              1278             DEC     R0
0001D1 E6              1279             MOV     A,@R0
0001D2 33              1280             RLC     A
0001D3 AB00       F    1281             MOV     R3,A_im?462
0001D5 AA00       F    1282             MOV     R2,A_im?462+01H
0001D7 A900       F    1283             MOV     R1,A_im?462+02H
0001D9 8F82            1284             MOV     DPL,R7
0001DB F583            1285             MOV     DPH,A
0001DD EC              1286             MOV     A,R4
0001DE 8DF0            1287             MOV     B,R5
0001E0 120000     E    1288             LCALL   ?C?ISTOPTR
                       1289     ;                               A_re[b+mt] = u_re - t_re;
                       1290                             ; SOURCE LINE # 151
0001E3 C3              1291             CLR     C
0001E4 7900       F    1292             MOV     R1,#LOW (u_re?467+01H)
0001E6 E7              1293             MOV     A,@R1
0001E7 7800       F    1294             MOV     R0,#LOW (t_re?469+01H)
0001E9 96              1295             SUBB    A,@R0
0001EA FD              1296             MOV     R5,A
0001EB 19              1297             DEC     R1
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    21

0001EC E7              1298             MOV     A,@R1
0001ED 18              1299             DEC     R0
0001EE 96              1300             SUBB    A,@R0
0001EF FC              1301             MOV     R4,A
0001F0 7900       F    1302             MOV     R1,#LOW (b?473+01H)
0001F2 E7              1303             MOV     A,@R1
0001F3 7800       F    1304             MOV     R0,#LOW (mt?474+01H)
0001F5 26              1305             ADD     A,@R0
0001F6 FF              1306             MOV     R7,A
0001F7 19              1307             DEC     R1
0001F8 E7              1308             MOV     A,@R1
0001F9 18              1309             DEC     R0
0001FA 36              1310             ADDC    A,@R0
0001FB FE              1311             MOV     R6,A
0001FC EF              1312             MOV     A,R7
0001FD 25E0            1313             ADD     A,ACC
0001FF FF              1314             MOV     R7,A
000200 EE              1315             MOV     A,R6
000201 33              1316             RLC     A
000202 AB00       F    1317             MOV     R3,A_re?461
000204 AA00       F    1318             MOV     R2,A_re?461+01H
000206 A900       F    1319             MOV     R1,A_re?461+02H
000208 8F82            1320             MOV     DPL,R7
00020A F583            1321             MOV     DPH,A
00020C EC              1322             MOV     A,R4
00020D 8DF0            1323             MOV     B,R5
00020F 120000     E    1324             LCALL   ?C?ISTOPTR
                       1325     ;                               A_im[b+mt] = u_im - t_im;
                       1326                             ; SOURCE LINE # 152
000212 C3              1327             CLR     C
000213 7900       F    1328             MOV     R1,#LOW (u_im?468+01H)
000215 E7              1329             MOV     A,@R1
000216 7800       F    1330             MOV     R0,#LOW (t_im?470+01H)
000218 96              1331             SUBB    A,@R0
000219 FD              1332             MOV     R5,A
00021A 19              1333             DEC     R1
00021B E7              1334             MOV     A,@R1
00021C 18              1335             DEC     R0
00021D 96              1336             SUBB    A,@R0
00021E FC              1337             MOV     R4,A
00021F 7900       F    1338             MOV     R1,#LOW (b?473+01H)
000221 E7              1339             MOV     A,@R1
000222 7800       F    1340             MOV     R0,#LOW (mt?474+01H)
000224 26              1341             ADD     A,@R0
000225 FF              1342             MOV     R7,A
000226 19              1343             DEC     R1
000227 E7              1344             MOV     A,@R1
000228 18              1345             DEC     R0
000229 36              1346             ADDC    A,@R0
00022A FE              1347             MOV     R6,A
00022B EF              1348             MOV     A,R7
00022C 25E0            1349             ADD     A,ACC
00022E FF              1350             MOV     R7,A
00022F EE              1351             MOV     A,R6
000230 33              1352             RLC     A
000231 AB00       F    1353             MOV     R3,A_im?462
000233 AA00       F    1354             MOV     R2,A_im?462+01H
000235 A900       F    1355             MOV     R1,A_im?462+02H
000237 8F82            1356             MOV     DPL,R7
000239 F583            1357             MOV     DPH,A
00023B EC              1358             MOV     A,R4
00023C 8DF0            1359             MOV     B,R5
00023E 120000     E    1360             LCALL   ?C?ISTOPTR
                       1361     ; 
                       1362     ;                               /*  printf("af %d %d %d %f %f %f %f\n", m, g, b, A_re[b]
                               , A_im[b], A_re[b+mt], A_im[b+mt]);
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    22

                       1363     ;                                */         
                       1364     ;                               //printf("af %d %d %d (u,t) %g %g %g %g (w) %g %g\n", m,
                                g, b, A_re[b], A_im[b], A_re[b+mt], A_im[b+mt], w_re, w_im);
                       1365     ;                       }
                       1366                             ; SOURCE LINE # 157
000241 7800       F    1367             MOV     R0,#LOW (b?473+01H)
000243 06              1368             INC     @R0
000244 E6              1369             MOV     A,@R0
000245 18              1370             DEC     R0
000246 7001            1371             JNZ     ?C0038
000248 06              1372             INC     @R0
000249                 1373     ?C0038:
000249 020000     F    1374             LJMP    ?C0024
                       1375     ;               }
                       1376                             ; SOURCE LINE # 158
00024C                 1377     ?C0023:
00024C 7800       F    1378             MOV     R0,#LOW (m?471)
00024E E6              1379             MOV     A,@R0
00024F FE              1380             MOV     R6,A
000250 08              1381             INC     R0
000251 E6              1382             MOV     A,@R0
000252 7800       F    1383             MOV     R0,#LOW (g?472+01H)
000254 26              1384             ADD     A,@R0
000255 F6              1385             MOV     @R0,A
000256 18              1386             DEC     R0
000257 EE              1387             MOV     A,R6
000258 36              1388             ADDC    A,@R0
000259 F6              1389             MOV     @R0,A
00025A 7800       F    1390             MOV     R0,#LOW (k?475+01H)
00025C 06              1391             INC     @R0
00025D E6              1392             MOV     A,@R0
00025E 18              1393             DEC     R0
00025F 6003            1394             JZ      $ + 5H
000261 020000     F    1395             LJMP    ?C0021
000264 06              1396             INC     @R0
000265                 1397     ?C0039:
000265 020000     F    1398             LJMP    ?C0021
                       1399     ;       }
                       1400                             ; SOURCE LINE # 159
000268                 1401     ?C0020:
000268 7800       F    1402             MOV     R0,#LOW (m?471)
00026A E6              1403             MOV     A,@R0
00026B A2E7            1404             MOV     C,ACC.7
00026D 13              1405             RRC     A
00026E 7900       F    1406             MOV     R1,#LOW (m?471)
000270 F7              1407             MOV     @R1,A
000271 08              1408             INC     R0
000272 E6              1409             MOV     A,@R0
000273 13              1410             RRC     A
000274 09              1411             INC     R1
000275 F7              1412             MOV     @R1,A
000276 020000     F    1413             LJMP    ?C0018
                       1414     ; }
                       1415                             ; SOURCE LINE # 160
000279                 1416     ?C0027:
000279 22              1417             RET     
                       1418     ; END OF _fft
                       1419     
                       1420     ; 
                       1421     ; int main()
                       1422     
------                 1423             RSEG  ?PR?main?MAIN
000000                 1424     main:
                       1425             USING   0
                       1426                             ; SOURCE LINE # 162
                       1427     ; {
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    23

                       1428                             ; SOURCE LINE # 163
                       1429     ;       int idata n;
                       1430     ;       //int idata i;
                       1431     ;       //int idata A_re[16];
                       1432     ;       //int idata A_im[16];
                       1433     ;       //int idata W_re[8];
                       1434     ;       //int idata W_im[8]; 
                       1435     ;       
                       1436     ; 
                       1437     ; 
                       1438     ;       int idata A_re[8];
                       1439     ;       int idata A_im[8];
                       1440     ;       //int idata W_re[4];
                       1441     ;       //int idata W_im[4]; 
                       1442     ; 
                       1443     ;       
                       1444     ;       store_cpu_rate(16);
                       1445                             ; SOURCE LINE # 179
000000 7F10            1446             MOV     R7,#010H
000002 7E00            1447             MOV     R6,#00H
000004 120000     E    1448             LCALL   _store_cpu_rate
                       1449     ; 
                       1450     ;       P0_DIR &= ~0x28;
                       1451                             ; SOURCE LINE # 181
000007 5394D7          1452             ANL     P0_DIR,#0D7H
                       1453     ;       P0_ALT &= ~0x28;
                       1454                             ; SOURCE LINE # 182
00000A 5395D7          1455             ANL     P0_ALT,#0D7H
                       1456     ; 
                       1457     ;       for(n=0;n<6;n++)
                       1458                             ; SOURCE LINE # 184
00000D E4              1459             CLR     A
00000E 7800       F    1460             MOV     R0,#LOW (n?576)
000010 F6              1461             MOV     @R0,A
000011 08              1462             INC     R0
000012 F6              1463             MOV     @R0,A
000013                 1464     ?C0028:
                       1465     ;       {
                       1466                             ; SOURCE LINE # 185
                       1467     ;               blink_led();
                       1468                             ; SOURCE LINE # 186
000013 638020          1469             XRL     P0,#020H
                       1470     ;               mdelay(300);
                       1471                             ; SOURCE LINE # 187
000016 7F2C            1472             MOV     R7,#02CH
000018 7E01            1473             MOV     R6,#01H
00001A 120000     E    1474             LCALL   _mdelay
                       1475     ;       }       
                       1476                             ; SOURCE LINE # 188
00001D 7800       F    1477             MOV     R0,#LOW (n?576+01H)
00001F 06              1478             INC     @R0
000020 E6              1479             MOV     A,@R0
000021 18              1480             DEC     R0
000022 7001            1481             JNZ     ?C0040
000024 06              1482             INC     @R0
000025                 1483     ?C0040:
000025 C3              1484             CLR     C
000026 7800       F    1485             MOV     R0,#LOW (n?576+01H)
000028 E6              1486             MOV     A,@R0
000029 9406            1487             SUBB    A,#06H
00002B 18              1488             DEC     R0
00002C E6              1489             MOV     A,@R0
00002D 6480            1490             XRL     A,#080H
00002F 9480            1491             SUBB    A,#080H
000031 40E0            1492             JC      ?C0028
000033                 1493     ?C0031:
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    24

                       1494     ;       //A_re = (double*)malloc(sizeof(double)*n); 
                       1495     ;       //A_im = (double*)malloc(sizeof(double)*n); 
                       1496     ;       //W_re = (double*)malloc(sizeof(double)*n/2); 
                       1497     ;       //W_im = (double*)malloc(sizeof(double)*n/2); 
                       1498     ;       //assert(A_re != NULL && A_im != NULL && W_re != NULL && W_im != NULL); 
                       1499     ;       
                       1500     ;       while(1)
                       1501                             ; SOURCE LINE # 195
                       1502     ;       {
                       1503                             ; SOURCE LINE # 196
                       1504     ;               blink_led();
                       1505                             ; SOURCE LINE # 197
000033 638020          1506             XRL     P0,#020H
                       1507     ;       //for (i=0; i<3; i++) {
                       1508     ;               //init_array(n, A_re, A_im); 
                       1509     ;               
                       1510     ;               n = 8;
                       1511                             ; SOURCE LINE # 201
000036 7800       F    1512             MOV     R0,#LOW (n?576)
000038 7600            1513             MOV     @R0,#00H
00003A 08              1514             INC     R0
00003B 7608            1515             MOV     @R0,#08H
                       1516     ;               //compute_W(n, W_re, W_im); 
                       1517     ;               //fft(n, A_re, A_im, W_re, W_im);
                       1518     ;               permute_bitrev(n, A_re, A_im);        
                       1519                             ; SOURCE LINE # 204
00003D 750000     F    1520             MOV     ?_permute_bitrev?BYTE+05H,#00H
000040 750000     F    1521             MOV     ?_permute_bitrev?BYTE+06H,#HIGH (A_im?578)
000043 750000     F    1522             MOV     ?_permute_bitrev?BYTE+07H,#LOW (A_im?578)
000046 7B00            1523             MOV     R3,#00H
000048 7A00       F    1524             MOV     R2,#HIGH (A_re?577)
00004A 7900       F    1525             MOV     R1,#LOW (A_re?577)
00004C 7F08            1526             MOV     R7,#08H
00004E 7E00            1527             MOV     R6,#00H
000050 120000     F    1528             LCALL   _permute_bitrev
                       1529     ; 
                       1530     ;               mdelay(100);
                       1531                             ; SOURCE LINE # 206
000053 7F64            1532             MOV     R7,#064H
000055 7E00            1533             MOV     R6,#00H
000057 120000     E    1534             LCALL   _mdelay
                       1535     ;               //output_array(n, A_re, A_im, argv[2]);  
                       1536     ;               //print_string("done");
                       1537     ;       }
                       1538                             ; SOURCE LINE # 209
00005A 80D7            1539             SJMP    ?C0031
                       1540     ; END OF main
                       1541     
                       1542             END
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    25

SYMBOL TABLE LISTING
------ ----- -------


N A M E                                   T Y P E  V A L U E     ATTRIBUTES

?_BITREV?BYTE. . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
?_COMPUTE_W?BYTE . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
?_FFT?BYTE . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
?_PERMUTE_BITREV?BYTE. . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
?C0001 . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?_BITREV?MAIN
?C0002 . . . . . . . . . . . . . . . .    C  ADDR  004DH     R   SEG=?PR?_BITREV?MAIN
?C0004 . . . . . . . . . . . . . . . .    C  ADDR  0054H     R   SEG=?PR?_BITREV?MAIN
?C0005 . . . . . . . . . . . . . . . .    C  ADDR  0006H     R   SEG=?PR?_LOG_2?MAIN
?C0006 . . . . . . . . . . . . . . . .    C  ADDR  0023H     R   SEG=?PR?_LOG_2?MAIN
?C0008 . . . . . . . . . . . . . . . .    C  ADDR  002AH     R   SEG=?PR?_LOG_2?MAIN
?C0009 . . . . . . . . . . . . . . . .    C  ADDR  0017H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0012 . . . . . . . . . . . . . . . .    C  ADDR  00DAH     R   SEG=?PR?_COMPUTE_W?MAIN
?C0013 . . . . . . . . . . . . . . . .    C  ADDR  001AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0015 . . . . . . . . . . . . . . . .    C  ADDR  0117H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0016 . . . . . . . . . . . . . . . .    C  ADDR  005AH     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0017 . . . . . . . . . . . . . . . .    C  ADDR  0125H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0018 . . . . . . . . . . . . . . . .    C  ADDR  0011H     R   SEG=?PR?_FFT?MAIN
?C0020 . . . . . . . . . . . . . . . .    C  ADDR  0268H     R   SEG=?PR?_FFT?MAIN
?C0021 . . . . . . . . . . . . . . . .    C  ADDR  003AH     R   SEG=?PR?_FFT?MAIN
?C0023 . . . . . . . . . . . . . . . .    C  ADDR  024CH     R   SEG=?PR?_FFT?MAIN
?C0024 . . . . . . . . . . . . . . . .    C  ADDR  008EH     R   SEG=?PR?_FFT?MAIN
?C0027 . . . . . . . . . . . . . . . .    C  ADDR  0279H     R   SEG=?PR?_FFT?MAIN
?C0028 . . . . . . . . . . . . . . . .    C  ADDR  0013H     R   SEG=?PR?MAIN?MAIN
?C0031 . . . . . . . . . . . . . . . .    C  ADDR  0033H     R   SEG=?PR?MAIN?MAIN
?C0034 . . . . . . . . . . . . . . . .    C  ADDR  004BH     R   SEG=?PR?_BITREV?MAIN
?C0035 . . . . . . . . . . . . . . . .    C  ADDR  0021H     R   SEG=?PR?_LOG_2?MAIN
?C0036 . . . . . . . . . . . . . . . .    C  ADDR  00D7H     R   SEG=?PR?_COMPUTE_W?MAIN
?C0037 . . . . . . . . . . . . . . . .    C  ADDR  0122H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
?C0038 . . . . . . . . . . . . . . . .    C  ADDR  0249H     R   SEG=?PR?_FFT?MAIN
?C0039 . . . . . . . . . . . . . . . .    C  ADDR  0265H     R   SEG=?PR?_FFT?MAIN
?C0040 . . . . . . . . . . . . . . . .    C  ADDR  0025H     R   SEG=?PR?MAIN?MAIN
?C?CASTF . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?FCASTI. . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ILDOPTR . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?IMUL. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?ISTOPTR . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C?SIDIV . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?C_STARTUP . . . . . . . . . . . . . .    C  ADDR  -------       EXT
?DT?_BITREV?MAIN . . . . . . . . . . .    D  SEG   000002H       REL=UNIT, ALN=BYTE
?DT?_COMPUTE_W?MAIN. . . . . . . . . .    D  SEG   00000AH       REL=UNIT, ALN=BYTE
?DT?_FFT?MAIN. . . . . . . . . . . . .    D  SEG   00000EH       REL=UNIT, ALN=BYTE
?DT?_PERMUTE_BITREV?MAIN . . . . . . .    D  SEG   000008H       REL=UNIT, ALN=BYTE
?ID?_BITREV?MAIN . . . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_COMPUTE_W?MAIN. . . . . . . . . .    I  SEG   000004H       REL=UNIT, ALN=BYTE
?ID?_FFT?MAIN. . . . . . . . . . . . .    I  SEG   000016H       REL=UNIT, ALN=BYTE
?ID?_LOG_2?MAIN. . . . . . . . . . . .    I  SEG   000002H       REL=UNIT, ALN=BYTE
?ID?_PERMUTE_BITREV?MAIN . . . . . . .    I  SEG   00000AH       REL=UNIT, ALN=BYTE
?ID?MAIN?MAIN. . . . . . . . . . . . .    I  SEG   000022H       REL=UNIT, ALN=BYTE
?PR?_BITREV?MAIN . . . . . . . . . . .    C  SEG   000055H       REL=UNIT, ALN=BYTE
?PR?_COMPUTE_W?MAIN. . . . . . . . . .    C  SEG   0000DBH       REL=UNIT, ALN=BYTE
?PR?_FFT?MAIN. . . . . . . . . . . . .    C  SEG   00027AH       REL=UNIT, ALN=BYTE
?PR?_LOG_2?MAIN. . . . . . . . . . . .    C  SEG   00002BH       REL=UNIT, ALN=BYTE
?PR?_PERMUTE_BITREV?MAIN . . . . . . .    C  SEG   000126H       REL=UNIT, ALN=BYTE
?PR?MAIN?MAIN. . . . . . . . . . . . .    C  SEG   00005CH       REL=UNIT, ALN=BYTE
_BITREV. . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_BITREV?MAIN
_COMPUTE_W . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_COMPUTE_W?MAIN
_COS . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_FFT . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_FFT?MAIN
_LOG_2 . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_LOG_2?MAIN
_MDELAY. . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    26

_PERMUTE_BITREV. . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?_PERMUTE_BITREV?MAIN
_SIN . . . . . . . . . . . . . . . . .    C  ADDR  -------       EXT
_STORE_CPU_RATE. . . . . . . . . . . .    C  ADDR  -------       EXT
A_IM?354 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_IM?462 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_FFT?MAIN
A_IM?578 . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?MAIN?MAIN
A_RE?353 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
A_RE?461 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_FFT?MAIN
A_RE?577 . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?MAIN?MAIN
AC . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.6   A   
ACC. . . . . . . . . . . . . . . . . .    D  ADDR  00E0H     A   
ADCCON . . . . . . . . . . . . . . . .    D  ADDR  00A1H     A   
ADCDATAH . . . . . . . . . . . . . . .    D  ADDR  00A2H     A   
ADCDATAL . . . . . . . . . . . . . . .    D  ADDR  00A3H     A   
ADCSTATIC. . . . . . . . . . . . . . .    D  ADDR  00A4H     A   
AR2. . . . . . . . . . . . . . . . . .    D  ADDR  0002H     A   
AR3. . . . . . . . . . . . . . . . . .    D  ADDR  0003H     A   
AR6. . . . . . . . . . . . . . . . . .    D  ADDR  0006H     A   
AR7. . . . . . . . . . . . . . . . . .    D  ADDR  0007H     A   
B. . . . . . . . . . . . . . . . . . .    D  ADDR  00F0H     A   
B?473. . . . . . . . . . . . . . . . .    I  ADDR  0010H     R   SEG=?ID?_FFT?MAIN
BR?250 . . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_COMPUTE_W?MAIN
BRI?356. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
C_T2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CE . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
CK_CTRL. . . . . . . . . . . . . . . .    D  ADDR  00B6H     A   
CKCON. . . . . . . . . . . . . . . . .    D  ADDR  008EH     A   
CLK1 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.1   A   
CLK2 . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.5   A   
CP_RL2 . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CPRL2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.0   A   
CS . . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.3   A   
CT2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.1   A   
CY . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.7   A   
DATA?. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.0   A   
DEV_OFFSET . . . . . . . . . . . . . .    D  ADDR  00BEH     A   
DIN0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
DIO0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
DIO1 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
DIO2 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
DIO3 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
DIO4 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
DIO5 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
DIO6 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
DIO7 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
DIO8 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
DIO9 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
DOUT2. . . . . . . . . . . . . . . . .    B  ADDR  00A0H.4   A   
DPH. . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH0 . . . . . . . . . . . . . . . . .    D  ADDR  0083H     A   
DPH1 . . . . . . . . . . . . . . . . .    D  ADDR  0085H     A   
DPL. . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL0 . . . . . . . . . . . . . . . . .    D  ADDR  0082H     A   
DPL1 . . . . . . . . . . . . . . . . .    D  ADDR  0084H     A   
DPS. . . . . . . . . . . . . . . . . .    D  ADDR  0086H     A   
DR1. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.2   A   
DR2. . . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
DR2_CE . . . . . . . . . . . . . . . .    B  ADDR  00A0H.6   A   
EA . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.7   A   
EICON. . . . . . . . . . . . . . . . .    D  ADDR  00D8H     A   
EIE. . . . . . . . . . . . . . . . . .    D  ADDR  00E8H     A   
EIP. . . . . . . . . . . . . . . . . .    D  ADDR  00F8H     A   
ES . . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.4   A   
ET0. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.1   A   
ET1. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.3   A   
ET2. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.5   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    27

EWDI . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.4   A   
EX0. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.0   A   
EX1. . . . . . . . . . . . . . . . . .    B  ADDR  00A8H.2   A   
EX2. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.0   A   
EX3. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.1   A   
EX4. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.2   A   
EX5. . . . . . . . . . . . . . . . . .    B  ADDR  00E8H.3   A   
EXEN2. . . . . . . . . . . . . . . . .    B  ADDR  00C8H.3   A   
EXF2 . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.6   A   
EXIF . . . . . . . . . . . . . . . . .    D  ADDR  0091H     A   
F0 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.5   A   
F1 . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.1   A   
G?472. . . . . . . . . . . . . . . . .    I  ADDR  000EH     R   SEG=?ID?_FFT?MAIN
I?042. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_BITREV?MAIN
I?249. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_COMPUTE_W?MAIN
I?355. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
IE . . . . . . . . . . . . . . . . . .    D  ADDR  00A8H     A   
IE0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.1   A   
IE1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.3   A   
INT0_N . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
INT1_N . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
IP . . . . . . . . . . . . . . . . . .    D  ADDR  00B8H     A   
IT0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.0   A   
IT1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.2   A   
K?475. . . . . . . . . . . . . . . . .    I  ADDR  0014H     R   SEG=?ID?_FFT?MAIN
LOG2N?251. . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_COMPUTE_W?MAIN
LOG2N?357. . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
M?471. . . . . . . . . . . . . . . . .    I  ADDR  000CH     R   SEG=?ID?_FFT?MAIN
MAIN . . . . . . . . . . . . . . . . .    C  ADDR  0000H     R   SEG=?PR?MAIN?MAIN
MPAGE. . . . . . . . . . . . . . . . .    D  ADDR  0092H     A   
MT?474 . . . . . . . . . . . . . . . .    I  ADDR  0012H     R   SEG=?ID?_FFT?MAIN
N?246. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_COMPUTE_W?MAIN
N?352. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_PERMUTE_BITREV?MAIN
N?460. . . . . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_FFT?MAIN
N?576. . . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?MAIN?MAIN
NUMBITS?041. . . . . . . . . . . . . .    D  ADDR  0000H     R   SEG=?DT?_BITREV?MAIN
OV . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.2   A   
P. . . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.0   A   
P0 . . . . . . . . . . . . . . . . . .    D  ADDR  0080H     A   
P0_0 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.0   A   
P0_1 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
P0_2 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
P0_3 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.3   A   
P0_4 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.4   A   
P0_5 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
P0_6 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
P0_7 . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
P0_ALT . . . . . . . . . . . . . . . .    D  ADDR  0095H     A   
P0_DIR . . . . . . . . . . . . . . . .    D  ADDR  0094H     A   
P1 . . . . . . . . . . . . . . . . . .    D  ADDR  0090H     A   
P1_0 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
P1_1 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.1   A   
P1_2 . . . . . . . . . . . . . . . . .    B  ADDR  0090H.2   A   
P1_ALT . . . . . . . . . . . . . . . .    D  ADDR  0097H     A   
P1_DIR . . . . . . . . . . . . . . . .    D  ADDR  0096H     A   
PCON . . . . . . . . . . . . . . . . .    D  ADDR  0087H     A   
PS . . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.4   A   
PSW. . . . . . . . . . . . . . . . . .    D  ADDR  00D0H     A   
PT0. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.1   A   
PT1. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.3   A   
PT2. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.5   A   
PWDI . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.4   A   
PWM. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.7   A   
PWMCON . . . . . . . . . . . . . . . .    D  ADDR  00A9H     A   
PWMDUTY. . . . . . . . . . . . . . . .    D  ADDR  00AAH     A   
PWR_UP . . . . . . . . . . . . . . . .    B  ADDR  00A0H.7   A   
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    28

PX0. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.0   A   
PX1. . . . . . . . . . . . . . . . . .    B  ADDR  00B8H.2   A   
PX2. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.0   A   
PX3. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.1   A   
PX4. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.2   A   
PX5. . . . . . . . . . . . . . . . . .    B  ADDR  00F8H.3   A   
RADIO. . . . . . . . . . . . . . . . .    D  ADDR  00A0H     A   
RB8. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.2   A   
RCAP2H . . . . . . . . . . . . . . . .    D  ADDR  00CBH     A   
RCAP2L . . . . . . . . . . . . . . . .    D  ADDR  00CAH     A   
RCLK . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.5   A   
REGX_CTRL. . . . . . . . . . . . . . .    D  ADDR  00ADH     A   
REGX_LSB . . . . . . . . . . . . . . .    D  ADDR  00ACH     A   
REGX_MSB . . . . . . . . . . . . . . .    D  ADDR  00ABH     A   
REN. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.4   A   
RES?145. . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_LOG_2?MAIN
REV?043. . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_BITREV?MAIN
RI . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.0   A   
RS0. . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.3   A   
RS1. . . . . . . . . . . . . . . . . .    B  ADDR  00D0H.4   A   
RSTREAS. . . . . . . . . . . . . . . .    D  ADDR  00B1H     A   
RXD. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.1   A   
SBUF . . . . . . . . . . . . . . . . .    D  ADDR  0099H     A   
SCON . . . . . . . . . . . . . . . . .    D  ADDR  0098H     A   
SM0. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.7   A   
SM1. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.6   A   
SM2. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.5   A   
SP . . . . . . . . . . . . . . . . . .    D  ADDR  0081H     A   
SPC_FNC. . . . . . . . . . . . . . . .    D  ADDR  008FH     A   
SPI_CTRL . . . . . . . . . . . . . . .    D  ADDR  00B3H     A   
SPI_DATA . . . . . . . . . . . . . . .    D  ADDR  00B2H     A   
SPICLK . . . . . . . . . . . . . . . .    D  ADDR  00B4H     A   
T0 . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.5   A   
T1 . . . . . . . . . . . . . . . . . .    B  ADDR  0080H.6   A   
T1_1V2 . . . . . . . . . . . . . . . .    D  ADDR  00BCH     A   
T2 . . . . . . . . . . . . . . . . . .    B  ADDR  0090H.0   A   
T2_1V2 . . . . . . . . . . . . . . . .    D  ADDR  00BDH     A   
T2CON. . . . . . . . . . . . . . . . .    D  ADDR  00C8H     A   
T_IM?359 . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_IM?470 . . . . . . . . . . . . . . .    I  ADDR  000AH     R   SEG=?ID?_FFT?MAIN
T_RE?358 . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_PERMUTE_BITREV?MAIN
T_RE?469 . . . . . . . . . . . . . . .    I  ADDR  0008H     R   SEG=?ID?_FFT?MAIN
TB8. . . . . . . . . . . . . . . . . .    B  ADDR  0098H.3   A   
TCLK . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.4   A   
TCON . . . . . . . . . . . . . . . . .    D  ADDR  0088H     A   
TEST_MODE. . . . . . . . . . . . . . .    D  ADDR  00B7H     A   
TF0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.5   A   
TF1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.7   A   
TF2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.7   A   
TH0. . . . . . . . . . . . . . . . . .    D  ADDR  008CH     A   
TH1. . . . . . . . . . . . . . . . . .    D  ADDR  008DH     A   
TH2. . . . . . . . . . . . . . . . . .    D  ADDR  00CDH     A   
TI . . . . . . . . . . . . . . . . . .    B  ADDR  0098H.1   A   
TICK_DV. . . . . . . . . . . . . . . .    D  ADDR  00B5H     A   
TL0. . . . . . . . . . . . . . . . . .    D  ADDR  008AH     A   
TL1. . . . . . . . . . . . . . . . . .    D  ADDR  008BH     A   
TL2. . . . . . . . . . . . . . . . . .    D  ADDR  00CCH     A   
TMOD . . . . . . . . . . . . . . . . .    D  ADDR  0089H     A   
TR0. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.4   A   
TR1. . . . . . . . . . . . . . . . . .    B  ADDR  0088H.6   A   
TR2. . . . . . . . . . . . . . . . . .    B  ADDR  00C8H.2   A   
TXD. . . . . . . . . . . . . . . . . .    B  ADDR  0080H.2   A   
U_IM?468 . . . . . . . . . . . . . . .    I  ADDR  0006H     R   SEG=?ID?_FFT?MAIN
U_RE?467 . . . . . . . . . . . . . . .    I  ADDR  0004H     R   SEG=?ID?_FFT?MAIN
W_IM?248 . . . . . . . . . . . . . . .    D  ADDR  0005H     R   SEG=?DT?_COMPUTE_W?MAIN
W_IM?464 . . . . . . . . . . . . . . .    D  ADDR  000BH     R   SEG=?DT?_FFT?MAIN
AX51 MACRO ASSEMBLER  MAIN                                                                  05/05/09 15:43:47 PAGE    29

W_IM?466 . . . . . . . . . . . . . . .    I  ADDR  0002H     R   SEG=?ID?_FFT?MAIN
W_RE?247 . . . . . . . . . . . . . . .    D  ADDR  0002H     R   SEG=?DT?_COMPUTE_W?MAIN
W_RE?463 . . . . . . . . . . . . . . .    D  ADDR  0008H     R   SEG=?DT?_FFT?MAIN
W_RE?465 . . . . . . . . . . . . . . .    I  ADDR  0000H     R   SEG=?ID?_FFT?MAIN
WDTI . . . . . . . . . . . . . . . . .    B  ADDR  00D8H.3   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
